xstart <- c(M = .3, C = .6, P = .2, X = .1) #No initial condition listed for TT
ode(
func=closed.coral.model1,
y=xstart,
times=times,
parms=parms1
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(x='Time(Years)', y='Proportion of Population')
ode(
func=closed.coral.model2,
y=xstart,
times=times,
parms=parms2
) %>%
as.data.frame() -> out2
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(x='Time(Years)', y='Proportion of Population')
#paper changes sigma and s
parms1 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .05, s = .3, j = 1.68, phi = .2)
parms2 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .05, s = .3, j = 1.68, phi = .2, z = .5)
times <- seq(from = 80, to = 180, by = 1)
xstart <- c(M = .3, C = .6, P = .2, X = .1) #No initial condition listed for TT
ode(
func=closed.coral.model1,
y=xstart,
times=times,
parms=parms1
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = C", x='Time(Years)', y='Proportion of Population')
ode(
func=closed.coral.model2,
y=xstart,
times=times,
parms=parms2
) %>%
as.data.frame() -> out2
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = 1-zC", x='Time(Years)', y='Proportion of Population')
#paper changes sigma and s
parms1 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .1, s = 0, j = 1.68, phi = .2)
parms2 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .1, s = 0, j = 1.68, phi = .2, z = .5)
times <- seq(from = 80, to = 180, by = 1)
xstart <- c(M = .3, C = .6, P = .2, X = .1) #No initial condition listed for TT
ode(
func=closed.coral.model1,
y=xstart,
times=times,
parms=parms1
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = C", x='Time(Years)', y='Proportion of Population')
ode(
func=closed.coral.model2,
y=xstart,
times=times,
parms=parms2
) %>%
as.data.frame() -> out2
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = 1-zC", x='Time(Years)', y='Proportion of Population')
#paper changes sigma and s
parms1 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .5, s = .2, j = 1.68, phi = .2)
parms2 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .5, s = .2, j = 1.68, phi = .2, z = .5)
times <- seq(from = 350, to = 450, by = 1)
xstart <- c(M = .3, C = .6, P = .2, X = .1) #No initial condition listed for TT
ode(
func=closed.coral.model1,
y=xstart,
times=times,
parms=parms1
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = C", x='Time(Years)', y='Proportion of Population')
ode(
func=closed.coral.model2,
y=xstart,
times=times,
parms=parms2
) %>%
as.data.frame() -> out2
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = 1-zC", x='Time(Years)', y='Proportion of Population')
#paper changes sigma and s
parms1 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .4, s = .4, j = 1.68, phi = .2)
parms2 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .4, s = .4, j = 1.68, phi = .2, z = .5)
times <- seq(from = 450, to = 550, by = 1)
xstart <- c(M = .3, C = .6, P = .2, X = .1) #No initial condition listed for TT
ode(
func=closed.coral.model1,
y=xstart,
times=times,
parms=parms1
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = C", x='Time(Years)', y='Proportion of Population')
ode(
func=closed.coral.model2,
y=xstart,
times=times,
parms=parms2
) %>%
as.data.frame() -> out2
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = 1-zC", x='Time(Years)', y='Proportion of Population')
#paper changes sigma and s
parms1 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .5, s = .35, j = 1.68, phi = .2)
parms2 <- c(alpha = .1, gamma = .8, r = 1, d = .44, kappa = 1.014, sigma = .5, s = .35, j = 1.68, phi = .2, z = .5)
times <- seq(from = 250, to = 350, by = 1)
xstart <- c(M = .3, C = .6, P = .2, X = .1) #No initial condition listed for TT
ode(
func=closed.coral.model1,
y=xstart,
times=times,
parms=parms1
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = C", x='Time(Years)', y='Proportion of Population')
ode(
func=closed.coral.model2,
y=xstart,
times=times,
parms=parms2
) %>%
as.data.frame() -> out2
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x = time, y = value, color = variable)) +
geom_line(size=2) +
theme(legend.title=NULL) +
theme_classic() +
scale_color_discrete(name = "", labels = c("Live Coral", "Macroalgae", "Parrotfish", "Human Operation")) +
labs(title = "K(C) = 1-zC", x='Time(Years)', y='Proportion of Population')
dnorm(50, mean =48, sd = 2)
dnorm(0)
dnorm(-1.96)
dnorm(50, mean =48, sd = 2)
pnorm(0)
pnorm(0, mean = 1, sd = 5)
#To calculate area to right of curve:
pnorm(-1.96, lower.tail = FALSE)
pnorm(-1.96)
#or
1-pnorm(-1.96)
qnorm(.5)
qnorm(.025)
qnorm(.025, lower.tail = FALSE)
#t distributions. Used with finite sample sizes
dt(0, 2)
pt(2, 10)
qt(.05, 19)
qt(.025, 24, lower.tail = FALSE)
qf(.025, 20, 21, lower.tail = FALSE)
qf(.025, 20, 21)
#Quantile Quantile plots useful in that can be used to assess normality
(Observations <- rnorm(10,16,4))
(observations <- rnorm(10,16,4))
(observations <- rnorm(10,16,4))
mean(observations)
sd(observations)
observations <- observations[order(observations)]
onservations
observations
#now to f dist
observations <- rf(10,10,12)
install.packages("tidyverse")
install.packages("dplyr")
library(tidyverse)
library(dplyr)
install.packages("readr")
library(tidyr)
M <- matrix(c(0,0,0,0,127,4,80,
0.6747,0.7370,0,0,0,0,0,
0,0.0486,0.6610,0,0,0,0,
0,0,0.0147,0.6907,0,0,0,
0,0,0,0.0518,0,0,0,
0,0,0,0,0.8091,0,0,
0,0,0,0,0,0.8091,0.8089), nrow = 7, byrow = TRUE)
print(M)
x <- 5
if (x > 4){
print("'x' is greater than 4.")
}
x <- 4
if (x > 4){
print("'x' is greater than 4.")
}
x <- 5
if (x > 4){
print("'x' is greater than 4.")
}
x <- 3
if (x > 4){
print("'x' is greater than 4.")
}
x <- 5
if (x > 4){
if (x < 8){
print("'x' is between 4 and 8")
}
}
print("'x' is between 4 and 8")
#We can also combine this into one. logical "and" and "or", we know we can also write it like this:
if (x > 4 & x < 8){
print("'x' is between 4 and 8")
}
#ELSE statements
if (x >4){
else if (x <= 4 & x > 2){
print("x is less than or equal to 4 and greater than 2")
}
else if (x<=2){
print("x is less than or equal to two")
}
}
#ELSE statements
if (x > 4){
print("'x' is greater than 4")
}  else if (x <= 4 & x > 2){
print("'x' is less than or equal to 4 and greater than 2")
}
#ELSE statements
if (x > 4){
print("'x' is greater than 4")
}  else if (x <= 4 & x > 2){
print("'x' is less than or equal to 4 and greater than 2")
} else if (x <= 2){
print("'x' is less than or equal to two")
}
if (x > 4){
print ("'x' is greater than 4")
} else{
print("'x' is not greater than 4")
}
x <- 3
if (x > 4){
print ("'x' is greater than 4")
} else{
print("'x' is not greater than 4")
}
x <- 1:10
if (x > 4){
print ("'x' is greater than 4")
} else{
print("'x' is not greater than 4")
}
help(ifelse)
?ifelse
(our_data <- data.frame(x = 1:10))
our_data$new_column <- ifelse(our_data$x > 5, "'x' is greater than 5", "'x' is not greater than 5")
our_data
(our_data <- data.frame(x = 1:10))
our_data$new_column <- ifelse(our_data$x > 5, "'x' is greater than 5", "'x' is not greater than 5")
our_data
#What if we have more than one eval metric?
our_data$another_new_column <-
ifelse(our_data$x > 8, "'x' is greater than 8",
ifelse(our_data$x <= 8 & our_data$x > 4, "x is less than or equal to 8 and greater than 4",
ifelse(our_data$x <= 4 & our_data$x < 2, "'x' is less than or equal to 4 and greater than two",
"'x' is less than 2")))
our_data
#This is cumbersome so we use cut fxn
?cut
#This is cumbersome so we use cut fxn cut(x, breaks, labels) breaks are cut offs and labels are what to do with cutoffs
?cut
our_data$one_last_column <-
cut(our_data, c(-Inf, 2, 4, 6, 8, Inf), #More cuts than labels
c("Very Small", "Small", "Medium", "Large", "Very Large"))
our_data$one_last_column <-
cut(our_data$x, c(-Inf, 2, 4, 6, 8, Inf), #More cuts than labels
c("Very Small", "Small", "Medium", "Large", "Very Large"))
our_data
LETTERS
for(i in LETTERS){
print(paste("The letter ", i))
}
LETTERS
for(i in LETTERS){
print(paste("The letter", i))
}
#2
LETTERS
for(i in 1:length(LETTERS)){
print(paste("The letter", LETTERS[i]))
}
vector_1 <- round(rnorm(10), 2)
for (i in 1:length(vector_1)){
print(paste("The ", i, "th element of vector_1 is ",
vector_1[i], sep = ""))
}
#seq_len is better than length. The only difference is how it handles an empty vector
1:0
seq_len(0)
len(0)
print(paste("The ", i, "th element of vector_1 is ",
vector_1[i], sep = ""))
for (i in 1:length(vector_2)){
print(paste("The ", i, "th element of vector_1 is ",
vector_1[i], sep = ""))
}
vector_2 <-  NULL
for (i in 1:seq_length(vector_2)){
print(paste("The ", i, "th element of vector_1 is ",
vector_1[i], sep = ""))
}
for (i in 1:seq_len(vector_2)){
print(paste("The ", i, "th element of vector_1 is ",
vector_1[i], sep = ""))
}
for (i in 1:seq_len(1:length(vector_2))){
print(paste("The ", i, "th element of vector_1 is ",
vector_1[i], sep = ""))
}
vector_2 <-  NULL
for (i in 1:length(vector_2)){
print(paste("The ", i, "th element of vector_1 is ",
vector_1[i], sep = ""))
}
for (i in 1:seq_len(1:length(vector_2))){
print(paste("The ", i, "th element of vector_1 is ",
vector_1[i], sep = ""))
}
for (i in 1:length(vector_2)){
print(paste("The ", i, "th element of vector_1 is ",
vector_2[i], sep = ""))
}
for (i in 1:seq_len(1:length(vector_2))){
print(paste("The ", i, "th element of vector_1 is ",
vector_2[i], sep = ""))
}
vector_2 <-  NULL
for (i in 1:length(vector_2)){
print(paste("The ", i, "th element of vector_2 is ",
vector_2[i], sep = ""))
}
for (i in 1:seq_len(1:length(vector_2))){
print(paste("The ", i, "th element of vector_2 is ",
vector_2[i], sep = ""))
}
for (i in 1:seq_len(length(vector_2))){
print(paste("The ", i, "th element of vector_2 is ",
vector_2[i], sep = ""))
}
vector_2 <-  NULL
for (i in 1:length(vector_2)){
print(paste("The ", i, "th element of vector_2 is ",
vector_2[i], sep = ""))
}
for (i in 1:seq_len(length(vector_2))){
print(paste("The ", i, "th element of vector_2 is ",
vector_2[i], sep = ""))
}
Baseball <- c("Boston Red Sox", "Toronto Blue Jays", "Tampa Bay Rays",
"Baltimore Orioles", "New York Yankees")
ALL_POSSIBLE_MATCHUPS <- NULL
k <- 1
for (i in 1:(length(Baseball) - 1)){
for(j in (i +1):length(Baseball)){
Baseball[k] <- paste(Baseball[i],
"versus", Baseball[j])
}
}
Baseball <- c("Boston Red Sox", "Toronto Blue Jays", "Tampa Bay Rays",
"Baltimore Orioles", "New York Yankees")
ALL_POSSIBLE_MATCHUPS <- NULL
k <- 1
for (i in 1:(length(Baseball) - 1)){
for(j in (i +1):length(Baseball)){
Baseball[k] <- paste(Baseball[i],
"versus", Baseball[j])
k <- k+1
}
}
Baseball <- c("Boston Red Sox", "Toronto Blue Jays", "Tampa Bay Rays",
"Baltimore Orioles", "New York Yankees")
ALL_POSSIBLE_MATCHUPS <- NULL
k <- 1
for (i in 1:(length(Baseball) - 1)){
for(j in (i +1):length(Baseball)){
ALL_POSSIBLE_MATCHUPS[k] <- paste(Baseball[i],
"versus", Baseball[j])
k <- k+1
}
}
ALL_POSSIBLE_MATCHUPS
lm(mtcars$mpg ~ mtcars$cyl)
summary(lm(mtcars$mpg ~ mtcars$cyl))
Nitrogen_Rate <- rep(c(0, 50, 100, 150, 200), 3)
Phosphorus_Rate <- rep(c(0, 50, 100), each = 5)
Corn_Yield <- c(44, 54, 55, 54, 52, 45, 67, 72, 75, 98, 33, 89, 91, 93, 88)
lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)
lm(mpg~cly + disp + hp, data = mtcars)
with(mtcars, lm(mpg~cyl + disp + hp))
lm(mtcars$mpg ~ mtcars$cyl + (mtcars$cyl^2))
lm(mtcars$mpg ~ mtcars$cyl + I(mtcars$cyl^2))
lm(mtcars$mpg ~ mtcars$cyl + (mtcars$cyl^2)) #carrot isn't actually
lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp + mtcars$cyl:mtcars$disp)
#Three way interaction
lm(mtcars$mpg ~ mtcars$cyl * mtcars$disp * mtcars$hp)
#polynomials
lm(mtcars$mpg ~ poly(mtcars$cyl, degree = 2))
Second_Order_Model <- lm(mpg ~ poly(cyl, degree = 2), data = mtcars)
Second_Order_Model <- lm(mpg ~ poly(cyl, degree = 2), data = mtcars)
Sequence_Of_Points <- with(mtcars, seq(min(cyl)), max(cyl), by = 0.01)
Predicted_Values <- predict(Second_Order_Model, newdata = data.frame(cyl = Sequence_Of_Points))
Sequence_Of_Points <- with(mtcars, seq(min(cyl)), max(cyl), by = 0.01)
Predicted_Values <- predict(Second_Order_Model, newdata = data.frame(cyl = Sequence_Of_Points))
Predictor_Variable <- 1:100 + rnorm(100,0,0.5)
Response_Variable <- rnorm(1:100,0,0.5) + log(1:100)
My_Model <- lm(Response_Variable~Predictor_Variable)
predict(My_Model, newdata = data.frame(Predictor_Variable = 55.5)) #thing in dataframe has to match old data
My_New_Model <- lm(mtcars$mpg ~ mtcars$cyl + mtcars$disp)
predict(My_New_Model, newdata - data.frame(cyl = 6, disp = 225))
predict(My_New_Model, newdata - data.frame(mtcars$cyl = 6, mtcars$disp = 225))
My_New_Model <- lm(mpg ~ cyl + disp)
lm(mtcars$mpg ~ mtcars$cyl / mtcars$disp)
interaction.plot(Nitrogen_Rate, Phosphorus_Rate, Corn_Yield)
interaction.plot(Phosphorus_Rate, Nitrogen_Rate, Corn_Yield)
setwd("~/UNH_Docs/BIOL806")
#Joining fxns
require(dplyr)
band_members
band_instruments
#Look at ?inner to look at the different ways to join
inner_join(band_members, band_instruments
#Look at ?inner to look at the different ways to join
inner_join(band_members, band_instruments)
inner_join(band_members, band_instruments)
left_join(band_members, band_instruments)
right_join(band_members, band_instruments)
full_join(band_members, band_instruments)
?inner_join
#What happens if the columns have different names
band_instruments2
left_join(band_members, band_instruments2)
left_join(band_members, band_instruments2,
by = c("name" = "artist"))#Need a by because there is no similar colname
left_join(band_members, band_instruments2,
by = c("name" = "artist"), keep = TRUE)#Need a by because there is no similar colname
