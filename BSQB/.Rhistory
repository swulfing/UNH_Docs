boxwex = 0.4,
frame.plot = FALSE,
col = c(purps,limabean,bananas),
main = paste0("Model-generated data; iter = ",i))
}
par(mfrow = c(2,2),
mar = c(5.1, 4.1, 3.1, 0.5)) #b, l ,t ,r
boxplot(as.numeric(AVG_WT) ~ REGION,
ylab = "Wt",
xlab = "Site",
cex.axis = .5,
las = 1,
staplewex = 0.2,
boxwex = 0.4,
frame.plot = FALSE,
col = c(purps,limabean,bananas),
data = ceph_sites2,
main = "Actual data")
for(i in 1:3){
boxplot(exp(out_stwt$BUGSoutput$sims.list$y.new[i,]) ~ ceph_sites2$id,
ylab = "Wt",
xlab = "Site",
staplewex = 0.2,
boxwex = 0.4,
frame.plot = FALSE,
col = c(purps,limabean,bananas),
main = paste0("Model-generated data; iter = ",i))
}
par(mfrow = c(2,2),
mar = c(5.1, 4.1, 3.1, 0.5)) #b, l ,t ,r
boxplot(as.numeric(AVG_WT) ~ REGION,
ylab = "Wt",
xlab = "Site",
cex.axis = .5,
las = 2,
staplewex = 0.2,
boxwex = 0.4,
frame.plot = FALSE,
col = c(purps,limabean,bananas),
data = ceph_sites2,
main = "Actual data")
for(i in 1:3){
boxplot(exp(out_stwt$BUGSoutput$sims.list$y.new[i,]) ~ ceph_sites2$id,
ylab = "Wt",
xlab = "Site",
staplewex = 0.2,
boxwex = 0.4,
frame.plot = FALSE,
col = c(purps,limabean,bananas),
main = paste0("Model-generated data; iter = ",i))
}
par(mfrow = c(2,2),
mar = c(5.1, 4.1, 3.1, 0.5)) #b, l ,t ,r
boxplot(as.numeric(AVG_WT) ~ REGION,
ylab = "Wt",
xlab = "Site",
#cex.axis = .5,
las = 2,
staplewex = 0.2,
boxwex = 0.4,
frame.plot = FALSE,
col = c(purps,limabean,bananas),
data = ceph_sites2,
main = "Actual data")
for(i in 1:3){
boxplot(exp(out_stwt$BUGSoutput$sims.list$y.new[i,]) ~ ceph_sites2$id,
ylab = "Wt",
xlab = "Site",
staplewex = 0.2,
boxwex = 0.4,
frame.plot = FALSE,
col = c(purps,limabean,bananas),
main = paste0("Model-generated data; iter = ",i))
}
par(mfrow = c(2,2),
mar = c(5.1, 4.1, 3.1, 0.5)) #b, l ,t ,r
boxplot(as.numeric(AVG_WT) ~ REGION,
ylab = "Wt",
xlab = NA,
#cex.axis = .5,
las = 2,
staplewex = 0.2,
boxwex = 0.4,
frame.plot = FALSE,
col = c(purps,limabean,bananas),
data = ceph_sites2,
main = "Actual data")
for(i in 1:3){
boxplot(exp(out_stwt$BUGSoutput$sims.list$y.new[i,]) ~ ceph_sites2$id,
ylab = "Wt",
xlab = "Site",
staplewex = 0.2,
boxwex = 0.4,
frame.plot = FALSE,
col = c(purps,limabean,bananas),
main = paste0("Model-generated data; iter = ",i))
}
plot(TukeyHSD(model, conf.level=.95), las = 2, cex.axis=.3, mar = c(5.1,15,1.4,2.1))
#Now conducting a Tukey test to compare the sites
model <- aov(as.numeric(AVG_WT)~REGION, ceph_sites2)
tukTest <- TukeyHSD(model, conf.level=.95)
plot(TukeyHSD(model, conf.level=.95), las = 2, cex.axis=.3, mar = c(5.1,15,1.4,2.1))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("C:/Users/sophi/Documents/UNH_Docs/Proposal/Mtx_Model")
library(knitr)
library(matlib)
library(ggplot2)
library(quadprog)
library(gridtext)
library(popbio)
library(gridExtra)
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
#Recalcuates the matrix based on a percent increase of survivability
survivability <- function(increase){
A_test <- A
NewMtx <- matrix(c(rep(0,12), A[1,4], rep(0,3)), byrow = FALSE, nrow = 4, ncol = 4)
for(i in 1:(ncol(A_test)-1)){
#Calculate survivability for each staege and increase by x%
surv <- A[i,i] + A[i+1,i]
newsurv <- surv + surv * increase
#Recreate matrix
NewMtx[i,i] <- newsurv * (A[i,i]/(A[i,i]+A[i+1,i]))
NewMtx[i+1,i] <- newsurv * (A[i+1,i]/(A[i,i]+A[i+1,i]))
}
NewMtx[4,4] <- A[4,4] + A[4,4] * 0.01
return(NewMtx)
}
#This is stupid but it just forces R to stop writing things as complex numbers
f <- function(x) {
if (all(Im(z <- zapsmall(x))==0)) as.numeric(z) else x
}
survivability(.025)
percentage <- c(0.01, 0.05, 0.1, 0.15)
freqs <- c(1, 2, 3, 4, 6, 12)
iteration <- data.frame(matrix(ncol=3,nrow=0, dimnames=list(NULL, c("Frequency", "PercentChange", "Eigenvalue"))))
for(i in 1:length(freqs)){
for(j in 1:length(percentage)){
neweig <- (eigen(survivability(percentage[j]))$values[1] + (freqs[i]-1) * eigen(A)$values[1]) / freqs[i]
iteration[nrow(iteration) + 1,] <- c( f(freqs[i]), f(percentage[j]), f(neweig))
}
}
kable(iteration)
p <- list()
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:120, pop = rowSums(modeled_data[,1:4]))
#write.csv(modeled_data, "testing.csv",row.names = TRUE)
modeled_data <- data.frame(modeled_data)
#plot(modeled_data$pop, type = "o")
p[[i]] <-   ggplot(modeled_data) +
geom_line(aes(y = pop, x = month), size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
# xlab("Year") +
# ylab("Total Pop") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016))
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
}
#do.call(grid.arrange,p)
grid.arrange(arrangeGrob(p[[1]],p[[2]],p[[3]],p[[4]],
p[[5]],p[[6]],p[[7]],p[[8]],
p[[9]],p[[10]],p[[11]],p[[12]],
p[[13]],p[[14]],p[[15]],p[[16]],
p[[17]],p[[18]],p[[19]],p[[20]],
p[[21]],p[[22]],p[[23]],p[[24]],ncol=4, nrow=6))
#dev.off()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("C:/Users/sophi/Documents/UNH_Docs/BSQB")
WC_species <- read.csv("WatsCarp_CH4.csv")
lksp <- data.frame(read.csv("WatsCarp_CH4.csv"))
tlake = table(lksp[, c("erie", "ontario")])
tlake
a = tlake[1, 1]
b = tlake[1, 2]
c = tlake[2, 1]
d = tlake[2, 2]
S_j = a/(a + b + c)
S_j
S_s = 2 * a/(2 * a + b + c)
S_s
lksp <- data.frame(read.csv("WatsCarp_CH4.csv"))
tlake = table(lksp[, c("erie", "ontario")])
tlake
a = tlake[1, 1]
b = tlake[1, 2]
c = tlake[2, 1]
d = tlake[2, 2]
S_j = a/(a + b + c)
S_j
S_s = 2 * a/(2 * a + b + c)
S_s
eu <- data.frame(read.csv("euk.csv"))
dist(rbind(eu$j, eu$k), method = "euclidean")
spmatrix <- data.frame(read.csv("speciesmatrix.csv"))
dist(t(spmatrix), method = "euclidean", diag = TRUE)
cls = data.frame(a = c(5, 6, 34, 1, 12), b = c(10, 5, 2, 3, 4),
c = c(10, 59, 32, 3, 40), d = c(2, 63, 10, 29, 45), e = c(44,
35, 40, 12, 20))
clsd = dist(t(cls), method = "euclidean")
round(clsd, 0)
hclust(clsd, "single")
?hclust
plot(hclust(clsd, "single"))
library(openxlsx)
install.packages("openxlsx")
library(openxlsx)
urlj = "https://doi.org/10.1371/journal.pone.0093281.s001"
download.file(urlj, "p.xlsx", mode = "wb")
iso = read.xlsx("p.xlsx")
plot(iso$N ~ iso$C, col = as.numeric(as.factor(iso$Food.Chain)),
xlim = c(-35, 0), pch = as.numeric(as.factor(iso$Species)),
xlab = expression(paste(delta, "13C")), ylab = expression(paste(delta,
"15N")))
legend("topright", legend = unique(as.factor(iso$Food.Chain)),
pch = 1, col = as.numeric(unique(as.factor(iso$Food.Chain))),
bty = "n", title = "Food chain")
legend("bottomright", legend = as.character(unique(as.factor(iso$Species))),
pch = as.numeric(unique(as.factor(iso$Species))), bty = "n",
title = "Species")
#Remove NA's
niso=iso[complete.cases(mydata),]
str(iso)
diso <- dist((iso[, c("C", "N")]), method = "euclidean")
p = hclust(diso, method = "single", )
plot(p, cex = 0.5, main = "", xlab = "")
niso = iso[complete.cases(iso), ]
niso = niso[-5, ]
diso <- dist((niso[, c("C", "N")]), method = "euclidean")
p = hclust(diso, method = "single")
niso$clust <- cutree(p, k = 4)
# plotting the data with 4 groups identified by the
# single-linkage cluster analysis superimposed
plot(niso$N ~ niso$C, col = as.numeric(as.factor(niso$clust)),
xlim = c(-35, 0), pch = as.numeric(as.factor(niso$Species)),
xlab = expression(paste(delta, "13C")), ylab = expression(paste(delta,
"15N")))
legend("topright", legend = unique(as.factor(niso$clust)), pch = 1,
col = as.numeric(unique(as.factor(niso$clust))), bty = "n",
title = "cluster")
legend("bottomright", legend = as.character(unique(as.factor(niso$Species))),
pch = as.numeric(unique(as.factor(niso$Species))), bty = "n",
title = "Species")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("C:/Users/sophi/Documents/UNH_Docs/BSQB")
#https://www.quantitative-biology.ca/multi.html
#Single linkage cluster analysis
cls = data.frame(a = c(5, 6, 34, 1, 12), b = c(10, 5, 2, 3, 4),
c = c(10, 59, 32, 3, 40), d = c(2, 63, 10, 29, 45), e = c(44,
35, 40, 12, 20))
clsd = dist(t(cls), method = "euclidean")
round(clsd, 0) #see chapter for visualization of this
plot(hclust(clsd, "single"))
library(openxlsx)
urlj = "https://doi.org/10.1371/journal.pone.0093281.s001"
download.file(urlj, "p.xlsx", mode = "wb")
iso = read.xlsx("p.xlsx")
plot(iso$N ~ iso$C, col = as.numeric(as.factor(iso$Food.Chain)),
xlim = c(-35, 0), pch = as.numeric(as.factor(iso$Species)),
xlab = expression(paste(delta, "13C")), ylab = expression(paste(delta,
"15N")))
legend("topright", legend = unique(as.factor(iso$Food.Chain)),
pch = 1, col = as.numeric(unique(as.factor(iso$Food.Chain))),
bty = "n", title = "Food chain")
legend("bottomright", legend = as.character(unique(as.factor(iso$Species))),
pch = as.numeric(unique(as.factor(iso$Species))), bty = "n",
title = "Species")
#Remove NA's: niso=iso[complete.cases(mydata),]
str(iso)
#euclidian analysis
diso <- dist((iso[, c("C", "N")]), method = "euclidean")
p = hclust(diso, method = "single", )
plot(p, cex = 0.5, main = "", xlab = "")
niso = iso[complete.cases(iso), ]
niso = niso[-5, ]
diso <- dist((niso[, c("C", "N")]), method = "euclidean")
p = hclust(diso, method = "single")
niso$clust <- cutree(p, k = 4)
# plotting the data with 4 groups identified by the
# single-linkage cluster analysis superimposed
plot(niso$N ~ niso$C, col = as.numeric(as.factor(niso$clust)),
xlim = c(-35, 0), pch = as.numeric(as.factor(niso$Species)),
xlab = expression(paste(delta, "13C")), ylab = expression(paste(delta,
"15N")))
legend("topright", legend = unique(as.factor(niso$clust)), pch = 1,
col = as.numeric(unique(as.factor(niso$clust))), bty = "n",
title = "cluster")
legend("bottomright", legend = as.character(unique(as.factor(niso$Species))),
pch = as.numeric(unique(as.factor(niso$Species))), bty = "n",
title = "Species")
data("iris")
str(iris)
summary(iris[1:4])
#Pairs fxn tells us. Tells you if variables are correlated. Can't use PCA if not
pairs(iris[1:4], main = "Iris Data", pch = as.numeric(iris$Species) +
14, col = as.numeric(iris$Species) + 1)
#now run pca
pca <- prcomp(iris[, 1:4])
summary(pca)
#However, they have highly different variances so we need to standardize
apply(iris[, 1:4], 2, var)
p <- prcomp(iris[, 1:4], scale = TRUE)
summary(p)
screeplot(p, type = ("lines"), main = "", pch = 16, cex = 1)
pvar = round(summary(p)$importance[2, 1:2], 2)
plot(p$x[, 1:2], col = as.numeric(iris$Species) + 1, ylim = c(-3,
3), cex = 1, pch = as.numeric(iris$Species) + 14, xlab = paste0("PC1 (",
pvar[1] * 100, "%)"), ylab = paste0("PC2 (", pvar[2] * 100,
"%)"))
legend("topright", legend = unique(iris$Species), pch = as.numeric(unique(iris$Species)) +
14, col = c(2, 3, 4), bty = "n")
pvar = round(summary(p)$importance[2, 1:2], 2)
plot(p$x[, 1:2], col = as.numeric(iris$Species) + 1, ylim = c(-3,
3), cex = 1, pch = as.numeric(iris$Species) + 14, xlab = paste0("PC1 (",
pvar[1] * 100, "%)"), ylab = paste0("PC2 (", pvar[2] * 100,
"%)"))
legend("topright", legend = unique(iris$Species), pch = as.numeric(unique(iris$Species)) +
14, col = c(2, 3, 4), bty = "n")
plot(NA, ylim = c(-5, 4), xlim = c(-5, 4), xlab = paste0("PC1 (",
pvar[1] * 100, "%)"), ylab = paste0("PC2 (", pvar[2] * 100,
"%)"))
abline(v = 0, col = "grey90")
abline(h = 0, col = "grey90")
# Get co-ordinates of variables (loadings), and multiply by
# 10
l.x <- p$rotation[, 1] * 4
l.y <- p$rotation[, 2] * 4
# Draw arrows
arrows(x0 = 0, x1 = l.x, y0 = 0, y1 = l.y, col = 5, length = 0.15,
lwd = 1.5)
# Label position
l.pos <- l.y  # Create a vector of y axis coordinates
lo <- which(l.y < 0)  # Get the variables on the bottom half of the plot
hi <- which(l.y > 0)  # Get variables on the top half
# Replace values in the vector
l.pos <- replace(l.pos, lo, "1")
l.pos <- replace(l.pos, hi, "3")
l.pos[4] <- "3"
l.x[3:4] <- l.x[3:4] + 0.75
# Variable labels
text(l.x, l.y, labels = row.names(p$rotation), col = 5, pos = l.pos,
cex = 1)
plot(p$x[, 1:2], pch = as.numeric(iris$Species) + 14, col = as.numeric(iris$Species) +
1, ylim = c(-5, 4), xlim = c(-4, 4), cex = 1, xlab = paste("PC1 (",
pvar[1] * 100, "%)"), ylab = paste("PC2 (", pvar[2] * 100,
"%)"))
legend("topleft", legend = unique(iris$Species), pch = as.numeric(unique(iris$Species)) +
14, col = c(2, 3, 4), bty = "n")
# Get co-ordinates of variables (loadings), and multiply by
# a constant
l.x <- p$rotation[, 1] * 4
l.y <- p$rotation[, 2] * 4
# Draw arrows
arrows(x0 = 0, x1 = l.x, y0 = 0, y1 = l.y, col = 5, length = 0.15,
lwd = 1.5)
# Label position
l.pos <- l.y  # Create a vector of y axis coordinates
lo <- which(l.y < 0)  # Get the variables on the bottom half of the plot
hi <- which(l.y > 0)  # Get variables on the top half
# Replace values in the vector
l.pos <- replace(l.pos, lo, "1")
l.pos <- replace(l.pos, hi, "3")
l.pos[4] <- "3"
l.x[3:4] <- l.x[3:4] + 0.75
# Variable labels
text(l.x, l.y, labels = row.names(p$rotation), col = 5, pos = l.pos,
cex = 1)
install.packages("vegan")
nMDS <- metaMDS(iris[, -5], distance = "bray", k = 2, trace = FALSE)
library(vegan)
nMDS <- metaMDS(iris[, -5], distance = "bray", k = 2, trace = FALSE)
par(mfrow = c(1, 2))
# Plot the stressplot
stressplot(nMDS, pch = 16, l.col = NA, las = 1)
# Plot the ordination
plot(nMDS$points, pch = as.numeric(iris$Species) + 14, col = as.numeric(iris$Species) +
1, ylim = c(-0.3, 0.3), xlim = c(-0.6, 0.75), cex = 0.7,
xlab = "nMDS1", ylab = "nMDS2")
legend("bottomleft", legend = unique(iris$Species), pch = as.numeric(unique(iris$Species)) +
14, col = c(2, 3, 4), bty = "n", cex = 1)
# Get co-ordinates of variables, and multiply by scale
l.x2 <- nMDS$species[-1, 1] * 1.25
l.y2 <- nMDS$species[-1, 2] * 1.25
# Draw arrows
arrows(x0 = 0, x1 = l.x2, y0 = 0, y1 = l.y2, col = 5, length = 0.1,
lwd = 2)
# Variable labels
l.x1 <- nMDS$species[, 1] * 1.25
l.y1 <- nMDS$species[, 2] * 1.25
text(l.x1, l.y1, labels = row.names(nMDS$species), col = 1, pos = 3,
cex = 0.8)
library(vegan)
data(varespec)
nMDS <- metaMDS(varespec, trymax = 100, distance = "bray", k = 2,
trace = FALSE)
svarespec = wisconsin(varespec)
disimvar = vegdist(svarespec, method = "bray")
PCoA <- cmdscale(disimvar, k = 2, eig = T, add = T)
str(PCoA)
#FURTHER PCOA EXAMPLE
library(vegan)
data(varespec)
nMDS <- metaMDS(varespec, trymax = 100, distance = "bray", k = 2,
trace = FALSE)
svarespec = wisconsin(varespec)
disimvar = vegdist(svarespec, method = "bray")
PCoA <- cmdscale(disimvar, k = 2, eig = T, add = T)
str(PCoA)
par(mfrow = c(1, 2))
ordipointlabel(nMDS, pch = c(NA, NA), cex = c(1.2, 0.6), xlim = c(-0.6,
1.2))
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
PCoA$species <- wascores(PCoA$points, varespec, expand = TRUE)
ordipointlabel(PCoA, pch = c(NA, NA), cex = c(1.2, 0.6), xlab = "PCoA1",
ylab = "PCoA2", xlim = c(-0.6, 1), ylim = c(-0.5, 0.6))
abline(h = 0, col = "grey")
abline(v = 0, col = "grey")
#Single linkage cluster analysis
cls = data.frame(a = c(5, 6, 34, 1, 12), b = c(10, 5, 2, 3, 4),
c = c(10, 59, 32, 3, 40), d = c(2, 63, 10, 29, 45), e = c(44,
35, 40, 12, 20))
clsd = dist(t(cls), method = "euclidean")
round(clsd, 0) #see chapter for visualization of this
plot(hclust(clsd, "single"))
library(openxlsx)
urlj = "https://doi.org/10.1371/journal.pone.0093281.s001"
download.file(urlj, "p.xlsx", mode = "wb")
iso = read.xlsx("p.xlsx")
plot(iso$N ~ iso$C, col = as.numeric(as.factor(iso$Food.Chain)),
xlim = c(-35, 0), pch = as.numeric(as.factor(iso$Species)),
xlab = expression(paste(delta, "13C")), ylab = expression(paste(delta,
"15N")))
legend("topright", legend = unique(as.factor(iso$Food.Chain)),
pch = 1, col = as.numeric(unique(as.factor(iso$Food.Chain))),
bty = "n", title = "Food chain")
legend("bottomright", legend = as.character(unique(as.factor(iso$Species))),
pch = as.numeric(unique(as.factor(iso$Species))), bty = "n",
title = "Species")
#Remove NA's: niso=iso[complete.cases(mydata),]
str(iso)
#euclidian analysis
diso <- dist((iso[, c("C", "N")]), method = "euclidean")
p = hclust(diso, method = "single", )
plot(p, cex = 0.5, main = "", xlab = "")
niso = iso[complete.cases(iso), ]
niso = niso[-5, ]
diso <- dist((niso[, c("C", "N")]), method = "euclidean")
p = hclust(diso, method = "single")
niso$clust <- cutree(p, k = 4)
# plotting the data with 4 groups identified by the
# single-linkage cluster analysis superimposed
plot(niso$N ~ niso$C, col = as.numeric(as.factor(niso$clust)),
xlim = c(-35, 0), pch = as.numeric(as.factor(niso$Species)),
xlab = expression(paste(delta, "13C")), ylab = expression(paste(delta,
"15N")))
legend("topright", legend = unique(as.factor(niso$clust)), pch = 1,
col = as.numeric(unique(as.factor(niso$clust))), bty = "n",
title = "cluster")
legend("bottomright", legend = as.character(unique(as.factor(niso$Species))),
pch = as.numeric(unique(as.factor(niso$Species))), bty = "n",
title = "Species")
