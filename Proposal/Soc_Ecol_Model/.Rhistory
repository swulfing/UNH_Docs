#
#     dxdt <- k_1 * x * (1-x) *(1/(f + c_1) - w_1 + d_1*(2*x - 1) + rho_1 * (2*y - 1))
#     dydt <- k_2 * y * (1-y) *(1/(g + c_2) - w_2 + d_2*(2*y - 1) + rho_2 * (2*x - 1))
#
#     return(list(c(df, dg, dx, dy)))
#   })
# }
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
titlesList <- c("a)", "b)", "c)", "d)", "e)", "f)")
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(Parameter ~ .(paramletter)[.(paramno)])
yl <- bquote(Variable ~ .(variableletter)[.(variableno)])
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", main = titlesList[variableno], xlab = xl, ylab =  yl, #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_1", 1, 'm', 1, 'F', 1)
bifCurve("m_1", "F_2", 1, 'm', 1, 'F', 2)
#Taken from: https://www.r-bloggers.com/2010/06/r-tools-for-dynamical-systems-bifurcation-plot-in-r%C2%A0for%C2%A0system%C2%A0of%C2%A0odes/
#To avoid confusion, x1 -> x, x2 -> y, f1 -> f, f2 -> g
# Bauch.Coupled <- function (Time, State, Pars) {
#   with(as.list(c(State, Pars)), {
#     dfdt <-  r_1 * f * (1-f) - (h_1 * f * (1-x))/(f+s_1) - m_2 * f + m_1 * g
#     dgdt <-  r_2 * g * (1-g) - (h_2 * g * (1-y))/(g+s_2) - m_1 * g + m_2 * f
#
#     dxdt <- k_1 * x * (1-x) *(1/(f + c_1) - w_1 + d_1*(2*x - 1) + rho_1 * (2*y - 1))
#     dydt <- k_2 * y * (1-y) *(1/(g + c_2) - w_2 + d_2*(2*y - 1) + rho_2 * (2*x - 1))
#
#     return(list(c(df, dg, dx, dy)))
#   })
# }
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
titlesList <- c("a)", "b)", "c)", "d)", "e)", "f)")
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(Parameter ~ .(paramletter)[.(paramno)])
yl <- bquote(Variable ~ .(variableletter)[.(variableno)])
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  yl, #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
title(titlesList[variableno], adj = 0)
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_1", 1, 'm', 1, 'F', 1)
bifCurve("m_1", "F_2", 1, 'm', 1, 'F', 2)
rhoparams <- c(0, 0.05, 0.1, 0.5)
dparams <- c(0, 0.05, 0.1, 0.5)
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='Time (yr)',y='Population') +
theme(legend.position = "none") +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
}
p_legend <- get_legend(plotList[[1]])
rhoparams <- c(0, 0.05, 0.1, 0.5)
dparams <- c(0, 0.05, 0.1, 0.5)
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='Time (yr)',y='Population') +
scale_color_discrete(name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='Time (yr)',y='Population') +
#theme(legend.position = "none") +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
}
}
p_legend <- get_legend(plotList[[1]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
plotList[[7]] + theme(legend.position="none"),
plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
plotList[[10]] + theme(legend.position="none"),
plotList[[11]] + theme(legend.position="none"),
plotList[[12]] + theme(legend.position="none"),
plotList[[13]] + theme(legend.position="none"),
plotList[[14]] + theme(legend.position="none"),
plotList[[15]] + theme(legend.position="none"),
plotList[[16]] + theme(legend.position="none"), nrow=4),
p_legend,
ncol=2,widths=c(2, 0.3))
rhoparams <- c(0, 0.05, 0.1, 0.5)
dparams <- c(0, 0.05, 0.1, 0.5)
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
scale_color_discrete(name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
#theme(legend.position = "none") +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
}
}
p_legend <- get_legend(plotList[[1]])
rhoparams <- c(0, 0.05, 0.1, 0.5)
dparams <- c(0, 0.05, 0.1, 0.5)
plotList <- list()
k <- 0
i <- 1
j <- 1
params_Default <- params_list
params_Default[7] <- dparams[i]
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
scale_color_discrete(name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
#theme(legend.position = "none") +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
p
yleft = richtext_grob("Population", rot=90)
library(gridtext)
yleft = richtext_grob("Population", rot=90)
bottom = richtext_grob(
text = 'Time (year)'
)
p_legend <- get_legend(plotList[[1]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
plotList[[7]] + theme(legend.position="none"),
plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
plotList[[10]] + theme(legend.position="none"),
plotList[[11]] + theme(legend.position="none"),
plotList[[12]] + theme(legend.position="none"),
plotList[[13]] + theme(legend.position="none"),
plotList[[14]] + theme(legend.position="none"),
plotList[[15]] + theme(legend.position="none"),
plotList[[16]] + theme(legend.position="none"), nrow=4, left = yleft, bottom = bottom),
p_legend,
ncol=2,widths=c(2, 0.3))
rhoparams <- c(0, 0.05, 0.1, 0.5)
dparams <- c(0, 0.05, 0.1, 0.5)
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
scale_color_discrete(name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
#theme(legend.position = "none") +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
}
}
yleft = richtext_grob("Population", rot=90)
bottom = richtext_grob(
text = 'Time (year)'
)
p_legend <- get_legend(plotList[[1]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
plotList[[7]] + theme(legend.position="none"),
plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
plotList[[10]] + theme(legend.position="none"),
plotList[[11]] + theme(legend.position="none"),
plotList[[12]] + theme(legend.position="none"),
plotList[[13]] + theme(legend.position="none"),
plotList[[14]] + theme(legend.position="none"),
plotList[[15]] + theme(legend.position="none"),
plotList[[16]] + theme(legend.position="none"), nrow=4, left = yleft, bottom = bottom),
p_legend,
ncol=2,widths=c(2, 0.3))
rhoparams <- c(0, 0.05, 0.1, 0.5)
dparams <- c(0, 0.05, 0.1, 0.5)
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(limits = c(0,750)) +
scale_y_discrete(limits = c(0, 0.5, 1)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
scale_color_discrete(name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(limits = c(0,750)) +
scale_y_discrete(limits = c(0, 0.5, 1)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
#theme(legend.position = "none") +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
}
}
yleft = richtext_grob("Population", rot=90)
bottom = richtext_grob(
text = 'Time (year)'
)
p_legend <- get_legend(plotList[[1]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
plotList[[7]] + theme(legend.position="none"),
plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
plotList[[10]] + theme(legend.position="none"),
plotList[[11]] + theme(legend.position="none"),
plotList[[12]] + theme(legend.position="none"),
plotList[[13]] + theme(legend.position="none"),
plotList[[14]] + theme(legend.position="none"),
plotList[[15]] + theme(legend.position="none"),
plotList[[16]] + theme(legend.position="none"), nrow=4, left = yleft, bottom = bottom),
p_legend,
ncol=2,widths=c(2, 0.3))
j <- 1
i <- 1
rhoparams <- c(0, 0.05, 0.1, 0.5)
dparams <- c(0, 0.05, 0.1, 0.5)
plotList <- list()
k <- 0
params_Default <- params_list
params_Default[7] <- dparams[i]
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(limits = c(0,750)) +
scale_y_discrete(limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
scale_color_discrete(name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_x_discrete(limits = c(0,750)) +
scale_y_discrete(limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
#theme(legend.position = "none") +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
