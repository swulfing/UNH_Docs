as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "", limits = c(0, 500, 950)) +
scale_y_discrete(name = "", limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
scale_discrete_manual(values=cbbPalette, aesthetics = "colour", name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("\u03B4 = ", params_Default[7], "\u03C1 = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "", limits = c(0, 500, 950)) +
scale_y_discrete(name = "", limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
#theme(legend.position = "none") +
ggtitle(paste("\u03B4 = ", params_Default[7], "\u03C1 = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
}
}
yleft = richtext_grob("Population", rot=90)
bottom = richtext_grob(
text = 'Time (year)'
)
p_legend <- get_legend(plotList[[1]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
plotList[[7]] + theme(legend.position="none"),
plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
nrow=3, left = yleft, bottom = bottom),
p_legend,
ncol=2,widths=c(2, 0.3))
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
plotList[[7]] + theme(legend.position="none"),
plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
nrow=3, left = yleft, bottom = bottom),
p_legend,
ncol=2,widths=c(2, 0.3))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf", cache = TRUE)
library(deSolve)
library(tidyverse)
library(ggplot2)
library(gridExtra)
#library(kableExtra)
library(FME)
library(ggpubr)
library(gridtext)
#setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Soc_Ecol_Model")
#Nest try h = .25
params_list <- data.frame(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
cbbPalette <- c("#E69F00", "#009E73", "#567de9", "#D55E00") #F_1, F_2, X_1, X_2
# #WORKED - MINIMUM GROWTH RATE USED IN THAMPI
# params_list <- data.frame(r_1 = 0.16, s_1 = 0.8, h_1 = 0.5, k_1 = 0.17, w_1 = 1.44, c_1 = 0.6, d_1 = 0.3, m_1 = 0, rho_1 = 0,
#                           r_2 = 0.16, s_2 = 0.8, h_2 = 0.5, k_2 = 0.17, w_2 = 1.44, c_2 = 0.6, d_2 = 0.3, m_2 = 0, rho_2 = 0)
#Extensions of Bauch Default but with my params I want changed. Goal: get this to oscillate
# params_list <- data.frame(r_1 = 0.35, s_1 = 0.8, h_1 = 0.5, k_1 = 0.17, w_1 = 1, c_1 = 1.68, d_1 = 0.3, m_1 = 0, rho_1 = 0,
#                           r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 0.17, w_2 = 1, c_2 = 1.68, d_2 = 0.3, m_2 = 0, rho_2 = 0)
#Extension of Bauch Default
# params_list <- data.frame(r_1 = 0.06, s_1 = 0.8, h_1 = 0.1, k_1 = 0.17, w_1 = 1, c_1 = 0.6, d_1 = 0.3, m_1 = 0, rho_1 = 0,
#                           r_2 = 0.06, s_2 = 0.8, h_2 = 0.1, k_2 = 0.17, w_2 = 1, c_2 = 0.6, d_2 = 0.3, m_2 = 0, rho_2 = 0)
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
timespan <- seq(from = 0, to = 1000, by = 1)
options(tinytex.verbose = TRUE)
# params_dispersal <- data.frame(r_1 = 0.40, s_1 = 0.8, h_1 = 0.25, k_1 = 1.014, w_1 = 0.2, c_1 = 1.5, d_1 = 0.5, m_1 = 0.2, rho_1 = 0.1,
#                                r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 1.014, w_2 = 0.35, c_2 = 1.5, d_2 = 0.5, m_2 = 0.2, rho_2 = 0.5)
params_list <- data.frame(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
giveparams <- data.frame(matrix(, nrow = 9, ncol = 4))
colnames(giveparams) <- c("Parameter", "Population_1", "Population_2", "Definition")
giveparams$Parameter <- c("r", "s", "h", "k", "$\\omega$", "c", "d", "m", "$\\rho$")
giveparams$Population_1 <- c(params_list[1:9])
giveparams$Population_2 <- c(params_list[10:18])
colnames(giveparams) <- c("Parameter", "Population 1", "Population 2", "Definition")
giveparams$Definition <- c("Fish net growth",
"Supply and demand",
"Harvesting efficiency",
"Rate of sampling opinions or social interaction",
"Conservation cost",
"Rarity valuation",
"Strength of social influence (within population)",
"Fish movement (from opposite patch)",
"Strength of social influence (opposite population)")
knitr::kable(giveparams, format = "pandoc", booktabs = TRUE, caption = "(ref:defaultparamtable) \\label{DefaultParamTable}")
# params_dispersal <- data.frame(r_1 = 0.40, s_1 = 0.8, h_1 = 0.25, k_1 = 1.014, w_1 = 0.2, c_1 = 1.5, d_1 = 0.5, m_1 = 0.2, rho_1 = 0.1,
#                                r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 1.014, w_2 = 0.35, c_2 = 1.5, d_2 = 0.5, m_2 = 0.2, rho_2 = 0.5)
params_dispersal <- data.frame(r_1 = 0.40, s_1 = 0.8, h_1 = 0.25, k_1 = 1.014, w_1 = 0.2, c_1 = 1.5, d_1 = 0.5, m_1 = 0.2, rho_1 = 0.5,
r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 1.014, w_2 = 0.35, c_2 = 1.5, d_2 = 0.5, m_2 = 0.2, rho_2 = 0.1)
giveparams <- data.frame(matrix(, nrow = 9, ncol = 4))
colnames(giveparams) <- c("Parameter", "Population_1", "Population_2", "Definition")
giveparams$Parameter <- c("r", "s", "h", "k", "$\\omega$", "c", "d", "m", "$\\rho$")
giveparams$Population_1 <- c(params_dispersal[1:9])
giveparams$Population_2 <- c(params_dispersal[10:18])
colnames(giveparams) <- c("Parameter", "Population 1", "Population 2", "Definition")
giveparams$Definition <- c("Fish net growth",
"Supply and demand",
"Harvesting efficiency",
"Rate of sampling opinions or social interaction",
"Conservation cost",
"Rarity valuation",
"Strength of social influence (within population)",
"Fish movement (from opposite patch)",
"Strength of social influence (opposite population)")
knitr::kable(giveparams, format = "pandoc", booktabs = TRUE, caption = "(ref:dispersionparamtable) \\label{DispersionParamTable}")
##Maybe see what proportion of people can actually be fishing in this system to make it sustainable
Bauch.Coupled <- function (t, y, params) {
## first extract the state variables
F_1 <- y[1] #Fish Pop var
F_2 <- y[2] #Fish Pop var
X_1 <- y[3] #conservationist var
X_2 <- y[4] #conservationist var
#TT <- y[5]
## now extract the parameters
r_1 <- params["r_1"] # Net growth/fecundity
s_1 <- params["s_1"] # supply and demand
h_1 <- params["h_1"] # Harvesting efficiency
k_1 <- params["k_1"] # Social learning rate
w_1 <- params["w_1"] # conservation costs
c_1 <- params["c_1"] # rarity valuation param
d_1 <- params["d_1"] # social norm strength
m_1 <- params["m_1"] # Inflow of fish from pop 2 to pop 1
rho_1 <- params["rho_1"] # Influence of pop 2 on pop 1
r_2 <- params["r_2"] # Net growth/fecundity
s_2 <- params["s_2"] # supply and demand
h_2 <- params["h_2"] # Harvesting efficiency
k_2 <- params["k_2"] # Social learning rate
w_2 <- params["w_2"] # conservation costs
c_2 <- params["c_2"] # rarity valuation param
d_2 <- params["d_2"] # social norm strength
m_2 <- params["m_2"] # Inflow of fish from pop 1 to pop 2
rho_2 <- params["rho_2"] # Influence of pop 1 on pop 2
## now code the model equations
dF_1dt <-  r_1 * F_1 * (1-F_1) - (h_1 * F_1 * (1-X_1))/(F_1+s_1) - m_2 * F_1 + m_1 * F_2
dF_2dt <-  r_2 * F_2 * (1-F_2) - (h_2 * F_2 * (1-X_2))/(F_2+s_2) - m_1 * F_2 + m_2 * F_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(F_1 + c_1) - w_1 + d_1*(2*X_1 - 1) + rho_1 * (2*X_2 - 1))
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(F_2 + c_2) - w_2 + d_2*(2*X_2 - 1) + rho_2 * (2*X_1 - 1))
## combine results into a single vector
dydt <- c(dF_1dt, dF_2dt, dX_1dt, dX_2dt)
## return result as a list!
list(dydt)
}
params_Bauch2 <- params_list
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch2
) %>%
as.data.frame() -> out_Coupled
# out_Coupled %>%
#   gather(variable,value,-time) %>%
#   ggplot(aes(x=time,y=value,color=variable))+
#   geom_line(size=1)+
#   theme_classic()+
#   labs(x='Time (Year)',y='Population') +
#   theme(legend.title=element_blank()) +
#   scale_colour_discrete(labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2])))
mparams <- c(0.01, 0.05, 0.1)
plotList <- list()
k <- 0
titlesList <- c("a)", "b)", "c)", "d)", "e)", "f)")
for(i in 1:length(mparams)){
k <- k+1
params_Default <- params_list
params_Default[8] <- mparams[i]
params_Default[17] <- mparams[i]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k == 1) {
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "Symmetrical Movement", subtitle = titlesList[k]) +
theme(plot.title = element_text(hjust = .5))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = NULL, subtitle = titlesList[k])
plotList[[k]] <- p
}
}
for(i in 1:length(mparams)){
k <- k+1
params_Default <- params_list
params_Default[8] <- mparams[i]
#params_Default[17] <- mparams[i]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k == 4) {
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "Asymmetrical Movement", subtitle = titlesList[k]) +
theme(plot.title = element_text(hjust = .5))
plotList[[k]] <- p
}else if(k == 6){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = NULL, subtitle = titlesList[k]) +
scale_discrete_manual(values=cbbPalette, aesthetics = "colour",name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2])))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = NULL, subtitle = titlesList[k])
plotList[[k]] <- p
}
}
#function to extract the legend of a ggplot; source:
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
get_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
#arranging the legend and plots in a grid:
p_legend <- get_legend(plotList[[6]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
nrow=3),
p_legend,
ncol=2,widths=c(2, 0.3))
#Taken from: https://www.r-bloggers.com/2010/06/r-tools-for-dynamical-systems-bifurcation-plot-in-r%C2%A0for%C2%A0system%C2%A0of%C2%A0odes/
#To avoid confusion, x1 -> x, x2 -> y, f1 -> f, f2 -> g
# Bauch.Coupled <- function (Time, State, Pars) {
#   with(as.list(c(State, Pars)), {
#     dfdt <-  r_1 * f * (1-f) - (h_1 * f * (1-x))/(f+s_1) - m_2 * f + m_1 * g
#     dgdt <-  r_2 * g * (1-g) - (h_2 * g * (1-y))/(g+s_2) - m_1 * g + m_2 * f
#
#     dxdt <- k_1 * x * (1-x) *(1/(f + c_1) - w_1 + d_1*(2*x - 1) + rho_1 * (2*y - 1))
#     dydt <- k_2 * y * (1-y) *(1/(g + c_2) - w_2 + d_2*(2*y - 1) + rho_2 * (2*x - 1))
#
#     return(list(c(df, dg, dx, dy)))
#   })
# }
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
titlesList <- c("a)", "b)", "c)", "d)", "e)", "f)")
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(Parameter ~ .(paramletter)[.(paramno)])
yl <- bquote(Variable ~ .(variableletter)[.(variableno)])
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  yl, #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
title(titlesList[variableno], adj = 0)
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
#Below is for calcualting all of the bifurcation curves. We're only going to look at m vs the two F's
# BifParams <- c("rho_1", "rho_2", "m_1", "m_2")
# BifVars <- c("F_1", "F_2","X_1", "X_2")
# plotList <- list()
#
# for(k in 1:length(BifParams)){
#   for(g in 1:length(BifVars)){
#   #plotList[[g]] <- bifCurve(BifParams[g], BifVars[k], 1)
#   bifCurve(BifParams[g], BifVars[k], 1)
#   }
#   # do.call("grid.arrange", c(plotList, ncol=2))
#   # plotList <- list()
# }
bifCurve("m_1", "F_1", 1, 'm', 1, 'F', 1)
bifCurve("m_1", "F_2", 1, 'm', 1, 'F', 2)
rhoparams <- c(0, 0.25, 0.5)
dparams <- c(0, 0.25, 0.5)
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "", limits = c(0, 500, 950)) +
scale_y_discrete(name = "", limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
scale_discrete_manual(values=cbbPalette, aesthetics = "colour", name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("\u03B4 = ", params_Default[7], "\u03C1 = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "", limits = c(0, 500, 950)) +
scale_y_discrete(name = "", limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
#theme(legend.position = "none") +
ggtitle(paste("\u03B4 = ", params_Default[7], "\u03C1 = ", params_Default[18])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
}
}
yleft = richtext_grob("Population", rot=90)
bottom = richtext_grob(
text = 'Time (year)'
)
p_legend <- get_legend(plotList[[1]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
plotList[[7]] + theme(legend.position="none"),
plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
nrow=3, left = yleft, bottom = bottom),
p_legend,
ncol=2,widths=c(2, 0.3))
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_dispersal
) %>%
as.data.frame() -> out_dispersion
out_dispersion %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (Year)',y='Population') +
theme(legend.title=element_blank()) +
scale_colour_discrete(labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2])))
#Social inequity scenario where rho_1 = 0.25 and h_1 = 1
param_seq <- seq(0, .5, by = .01)
finalDynamics <- data.frame(matrix(, nrow = (length(param_seq)), ncol = 3))
colnames(finalDynamics) <- c("Parameter_New", "F1", "F2")
timespan <- seq(from = 0, to = 100, by = .1)
starting_defaultparams <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
for(i in 1:length(param_seq)){
#Run momdel with each new param combo
# params_test <- params_dispersal
# params_test$m_1 <- param_seq[i]
# params_test$m_2 <- param_seq[i]
params_test <- params_dispersal
params_test$rho_1 <- param_seq[i]
params_test$rho_2 <- param_seq[i]
finalDynamics$Parameter_New[i] <- param_seq[i]
ode(
func=Bauch.Coupled,
y=starting_defaultparams,
times=timespan,
parms=params_test
) %>%
as.data.frame() -> out_Coupled
#Compile output into Dataframe
finalDynamics$F1[i] <- out_Coupled[nrow(out_Coupled), 2]
finalDynamics$F2[i] <- out_Coupled[nrow(out_Coupled), 3]
}
param_seq <- seq(0, .5, by = .01)
finalDynamics1 <- data.frame(matrix(, nrow = (length(param_seq)), ncol = 3))
colnames(finalDynamics1) <- c("Parameter_New", "F1", "F2")
for(i in 1:length(param_seq)){
#Run momdel with each new param combo
# params_test <- params_dispersal
# params_test$m_1 <- param_seq[i]
# params_test$m_2 <- param_seq[i]
params_test <- params_dispersal
params_test$rho_1 <- param_seq[i]
#params_test$rho_2 <- param_seq[i]
finalDynamics1$Parameter_New[i] <- param_seq[i]
ode(
func=Bauch.Coupled,
y=starting_defaultparams,
times=timespan,
parms=params_test
) %>%
as.data.frame() -> out_Coupled
#Compile output into Dataframe
finalDynamics1$F1[i] <- out_Coupled[nrow(out_Coupled), 2]
finalDynamics1$F2[i] <- out_Coupled[nrow(out_Coupled), 3]
}
param_seq <- seq(0, .5, by = .01)
finalDynamics2 <- data.frame(matrix(, nrow = (length(param_seq)), ncol = 3))
colnames(finalDynamics2) <- c("Parameter_New", "F1", "F2")
for(i in 1:length(param_seq)){
#Run momdel with each new param combo
# params_test <- params_dispersal
# params_test$m_1 <- param_seq[i]
# params_test$m_2 <- param_seq[i]
params_test <- params_dispersal
#params_test$rho_1 <- param_seq[i]
params_test$rho_2 <- param_seq[i]
finalDynamics2$Parameter_New[i] <- param_seq[i]
ode(
func=Bauch.Coupled,
y=starting_defaultparams,
times=timespan,
parms=params_test
) %>%
as.data.frame() -> out_Coupled
#Compile output into Dataframe
finalDynamics2$F1[i] <- out_Coupled[nrow(out_Coupled), 2]
finalDynamics2$F2[i] <- out_Coupled[nrow(out_Coupled), 3]
}
