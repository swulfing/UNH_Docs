# params_Bauch2 <- params_default
#
# times <- timespan
# xstart <- starting_defaultparams # See supplemental data for other starting params
#
# ode(
#   func=Bauch.Coupled,
#   y=xstart,
#   times=times,
#   parms=params_Bauch2
# ) %>%
#   as.data.frame() -> out_Coupled
#
# out_Coupled %>%
#   gather(variable,value,-time) %>%
#   ggplot(aes(x=time,y=value,color=variable))+
#   geom_line(size=1)+
#   theme_classic()+
#   ggtitle('c)') +
#   labs(x='time (yr)',y='pop')
# params_dispersal <- data.frame(r_1 = 0.40, s_1 = 0.8, h_1 = 0.25, k_1 = 1.014, w_1 = 0.2, c_1 = 1.5, d_1 = 0.5, i_1 = 0.2, rho_1 = 0.1,
#                                r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 1.014, w_2 = 0.35, c_2 = 1.5, d_2 = 0.5, i_2 = 0.2, rho_2 = 0.5)
params_dispersal <- data.frame(r_1 = 0.40, s_1 = 0.8, h_1 = 0.25, k_1 = 1.014, w_1 = 0.2, c_1 = 1.5, d_1 = 0.5, i_1 = 0.2, rho_1 = 0.5,
r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 1.014, w_2 = 0.35, c_2 = 1.5, d_2 = 0.5, i_2 = 0.2, rho_2 = 0.5)
giveparams <- data.frame(matrix(, nrow = 9, ncol = 4))
colnames(giveparams) <- c("Parameter", "Population_1", "Population_2", "Definition")
giveparams$Parameter <- c("r", "s", "h", "k", "$\\omega$", "c", "d", "i", "$\\rho$")
giveparams$Population_1 <- c(params_dispersal[1:9])
giveparams$Population_2 <- c(params_dispersal[10:18])
colnames(giveparams) <- c("Parameter", "Population 1", "Population 2", "Definition")
giveparams$Definition <- c("Fish net growth",
"Supply and demand",
"Harvesting efficiency",
"Social learning rate",
"Conservation cost",
"Rarity valuation",
"Social norm strength (within pop)",
"Fish immigration (from opposite patch patch)",
"Social norm strength (opposite pop)")
knitr::kable(giveparams, format = "latex", booktabs = TRUE, caption = "(ref:dispersionparamtable) \\label{DispersionParamTable}")
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_dispersal
) %>%
as.data.frame() -> out_dispersion
out_dispersion %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='Time (Year)',y='Population') +
theme(legend.title=element_blank()) +
scale_colour_discrete(labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2])))
#Social inequity scenario where rho_1 = 0.25 and h_1 = 1
BauchSensitivity <- function(pars){
derivs <- function (t, state, pars) {
with (as.list(c(state, pars)), {
## now code the model equations
dF_1dt <-  r_1 * F_1 * (1-F_1) - (h_1 * F_1 * (1-X_1))/(F_1+s_1) - i_2 * F_1 + i_1 * F_2
dF_2dt <-  r_2 * F_2 * (1-F_2) - (h_2 * F_2 * (1-X_2))/(F_2+s_2) - i_1 * F_2 + i_2 * F_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(F_1 + c_1) - w_1 + d_1*(2*X_1 - 1) + rho_1 * (2*X_2 - 1))
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(F_2 + c_2) - w_2 + d_2*(2*X_2 - 1) + rho_2 * (2*X_1 - 1))
return(list(c(dF_1dt, dF_2dt, dX_1dt, dX_2dt)))
})
}
state   <- starting_defaultparams
tout    <- timespan
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = pars)))
}
SnsBact <- sensFun(func = BauchSensitivity, parms = params_default, sensvar = c("F_1", "F_2"), senspar = c("i_1", "i_2", "rho_1", "rho_2"), varscale = 1)
summary(SnsBact)
sense <- summary(SnsBact)
plot(sense$L1)
plot(sense[L1])
plot(sense[1])
sense <- summary(SnsBact)
summary(SnsBact)
class(sense)
sense$L1
sensegraph <- data.frame(matrix(,nrow = 4, ncol = 2))
colnames(sensegraph) = c("Parameter", "Sensitivity")
sensegraph$Sensitivity <- summary(SnsBact)
sensegraph
sense <- summary(SnsBact)
sensegraph$Sensitivity <- sense$L1
sensegraph
sensegraph$Parameter <- c("i1", "i2", "rho1", "rho2")
sensegraph$Sensitivity <- sense$L1
sensegraph
p<-ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity")
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity")
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity") +
scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989"))
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity") +
scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989"))
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity") +
scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity") +
#scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
p+scale_color_brewer(palette="Dark2")
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity") +
#scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
scale_color_brewer(palette="Dark2") +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity", fill = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
scale_color_brewer(palette="Dark2") +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity", fill = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
scale_x_discrete(labels = c(" ", " ", " ", " ")) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity", fill = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
scale_x_discrete(labels = c("expression('i'[1])", "expression('i'[2])", "expression('\u03C1'[1])", "expression('\u03C1'[2])")) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity", fill = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
scale_x_discrete(labels = c(expression('i'[1]), expression('i'[2]), expression('\u03C1'[1]), expression('\u03C1'[2]))) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
?plotmath
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity", fill = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
scale_x_discrete(labels = c(expression('i'[1]), expression('i'[2]), expression(rho), expression('\u03C1'[2]))) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity", fill = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
scale_x_discrete(labels = c(expression('i'[1]), expression('i'[2]), expression(rho[1]), expression('\u03C1'[2]))) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
geom_bar(stat="identity", fill = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
scale_x_discrete(labels = c(expression('i'[1]), expression('i'[2]), expression(rho[1]), expression(rho[2]))) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
paramplane <- function(paramx, paramy, maxx, maxy){
#Create empty dataframe to fill
paramlist <- c("r", "s", "h", "k", "\u03C9", "c", "d", "i", "\u03C1")
outcomes <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(outcomes) <- c("XParameter", "YParameter", "Fish1", "Fish2")
#Dumb but it throws an error if S = 0
startx <- 0
starty <- 0
if(paramx == 2){startx <- .001}
if(paramy == 2){starty <- .001}
#
# #Can comment this part out if using other H vals
# if(paramx == 3){maxx = 0.1}
# if(paramy == 3){maxy = 0.1}
#Create list of all combinations of the two paramters
paramcombos <- expand.grid(x_parameter = seq(from = startx, to = maxx, length.out = 11),
y_parameter = seq(from = starty, to = maxy, length.out = 11))
for(i in 1:nrow(paramcombos)){
params_Default <- params_dispersal
#Change params to be the
params_Default[paramx] <- paramcombos$x_parameter[i]
params_Default[(paramy + 9)] <- paramcombos$y_parameter[i]
#
params_new <- c(r_1 = params_Default$r_1, s_1 = params_Default$s_1, h_1 = params_Default$h_1, k_1 = params_Default$k_1,
w_1 = params_Default$w_1, c_1 = params_Default$c_1, d_1 = params_Default$d_1, i_1 = params_Default$i_1,
rho_1 =  params_Default$rho_1,
r_2 = params_Default$r_2, s_2 = params_Default$s_2, h_2 = params_Default$h_2, k_2 = params_Default$k_2,
w_2 = params_Default$w_2, c_2 = params_Default$c_2, d_2 = params_Default$d_2, i_2 = params_Default$i_2,
rho_2 = params_Default$rho_2)
times <- timespan
starting_params <- starting_defaultparams #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=starting_params,
times=times,
parms=params_new
) %>%
as.data.frame() -> out_Diff
finalstatus <- out_Diff[nrow(out_Diff),]
# out_Diff %>%
# filter(times == 100)
outcomes[i,] <- c(paramcombos$x_parameter[i], paramcombos$y_parameter[i], finalstatus$F_1, finalstatus$F_2)
}
finalDynamics <- outcomes %>%
mutate(Result = case_when(
Fish1 >= .25 & Fish2 >= .25 ~ "Both",
Fish1 >= .25 & Fish2 < .25 ~ "Only Pop1",
Fish1 < .25 & Fish2 >= .25 ~ "Only Pop2",
Fish1 < .25 & Fish2 < .25 ~ "Neither"))
cols <- c("green", "orange", "yellow", "black")
# finalDynamics$Result <- as.character(finalDynamics$Result)
finalDynamics$Result <- factor(finalDynamics$Result, levels = c("Both", "Only Pop1", "Only Pop2", "Neither"))
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(limits = c(0,1), expand = c(0,0)) +
scale_y_continuous(limits = c(-0.05,1.05), expand = c(0,0)) +
# scale_x_continuous(expand = c(0,0), breaks = seq(from = 0, to = 1, length.out = 11)) +
# scale_y_continuous(expand = c(0,0),  breaks = seq(from = 0, to = 1, length.out = 11)) +
# xlim(0, 1) +
# ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())
}
paramplane_testing <- function(boop){
pl <- list()
param_tests <- expand.grid(firstParam = seq(from = 1, to = 9, length.out = 9),
secondParam = seq(from = 1, to = 9, length.out = 9))
param_tests <- param_tests %>%
filter(firstParam != secondParam) %>%
filter(firstParam == boop)
for(i in 1:nrow(param_tests)){
pl[[i]] <- paramplane(param_tests$firstParam[i], param_tests$secondParam[i], 1, 1)
}
#do.call("grid.arrange", c(pl,  ncol=2))
ggarrange(plotlist = pl, ncol = 2, nrow = 4, legend = "right", common.legend = TRUE)
}
paramplane_testing(9)
paramx <- 8
paramy <- 9
maxx <- 1
maxy <- 1
#Create empty dataframe to fill
paramlist <- c("r", "s", "h", "k", "\u03C9", "c", "d", "i", "\u03C1")
outcomes <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(outcomes) <- c("XParameter", "YParameter", "Fish1", "Fish2")
#Dumb but it throws an error if S = 0
startx <- 0
starty <- 0
if(paramx == 2){startx <- .001}
if(paramy == 2){starty <- .001}
#Create list of all combinations of the two paramters
paramcombos <- expand.grid(x_parameter = seq(from = startx, to = maxx, length.out = 11),
y_parameter = seq(from = starty, to = maxy, length.out = 11))
for(i in 1:nrow(paramcombos)){
params_Default <- params_dispersal
#Change params to be the
params_Default[paramx] <- paramcombos$x_parameter[i]
params_Default[(paramy + 9)] <- paramcombos$y_parameter[i]
#
params_new <- c(r_1 = params_Default$r_1, s_1 = params_Default$s_1, h_1 = params_Default$h_1, k_1 = params_Default$k_1,
w_1 = params_Default$w_1, c_1 = params_Default$c_1, d_1 = params_Default$d_1, i_1 = params_Default$i_1,
rho_1 =  params_Default$rho_1,
r_2 = params_Default$r_2, s_2 = params_Default$s_2, h_2 = params_Default$h_2, k_2 = params_Default$k_2,
w_2 = params_Default$w_2, c_2 = params_Default$c_2, d_2 = params_Default$d_2, i_2 = params_Default$i_2,
rho_2 = params_Default$rho_2)
times <- timespan
starting_params <- starting_defaultparams #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=starting_params,
times=times,
parms=params_new
) %>%
as.data.frame() -> out_Diff
finalstatus <- out_Diff[nrow(out_Diff),]
# out_Diff %>%
# filter(times == 100)
outcomes[i,] <- c(paramcombos$x_parameter[i], paramcombos$y_parameter[i], finalstatus$F_1, finalstatus$F_2)
}
finalDynamics <- outcomes %>%
mutate(Result = case_when(
Fish1 >= .25 & Fish2 >= .25 ~ "Both",
Fish1 >= .25 & Fish2 < .25 ~ "Only Pop1",
Fish1 < .25 & Fish2 >= .25 ~ "Only Pop2",
Fish1 < .25 & Fish2 < .25 ~ "Neither"))
cols <- c("green", "orange", "yellow", "black")
# finalDynamics$Result <- as.character(finalDynamics$Result)
finalDynamics$Result <- factor(finalDynamics$Result, levels = c("Both", "Only Pop1", "Only Pop2", "Neither"))
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(limits = c(0,1), expand = c(0,0)) +
scale_y_continuous(limits = c(-0.05,1.05), expand = c(0,0)) +
# scale_x_continuous(expand = c(0,0), breaks = seq(from = 0, to = 1, length.out = 11)) +
# scale_y_continuous(expand = c(0,0),  breaks = seq(from = 0, to = 1, length.out = 11)) +
# xlim(0, 1) +
# ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.title.y=element_text(angle=0))
paramplane <- function(paramx, paramy, maxx, maxy){
#Create empty dataframe to fill
paramlist <- c("r", "s", "h", "k", "\u03C9", "c", "d", "i", "\u03C1")
outcomes <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(outcomes) <- c("XParameter", "YParameter", "Fish1", "Fish2")
#Dumb but it throws an error if S = 0
startx <- 0
starty <- 0
if(paramx == 2){startx <- .001}
if(paramy == 2){starty <- .001}
#
# #Can comment this part out if using other H vals
# if(paramx == 3){maxx = 0.1}
# if(paramy == 3){maxy = 0.1}
#Create list of all combinations of the two paramters
paramcombos <- expand.grid(x_parameter = seq(from = startx, to = maxx, length.out = 11),
y_parameter = seq(from = starty, to = maxy, length.out = 11))
for(i in 1:nrow(paramcombos)){
params_Default <- params_dispersal
#Change params to be the
params_Default[paramx] <- paramcombos$x_parameter[i]
params_Default[(paramy + 9)] <- paramcombos$y_parameter[i]
#
params_new <- c(r_1 = params_Default$r_1, s_1 = params_Default$s_1, h_1 = params_Default$h_1, k_1 = params_Default$k_1,
w_1 = params_Default$w_1, c_1 = params_Default$c_1, d_1 = params_Default$d_1, i_1 = params_Default$i_1,
rho_1 =  params_Default$rho_1,
r_2 = params_Default$r_2, s_2 = params_Default$s_2, h_2 = params_Default$h_2, k_2 = params_Default$k_2,
w_2 = params_Default$w_2, c_2 = params_Default$c_2, d_2 = params_Default$d_2, i_2 = params_Default$i_2,
rho_2 = params_Default$rho_2)
times <- timespan
starting_params <- starting_defaultparams #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=starting_params,
times=times,
parms=params_new
) %>%
as.data.frame() -> out_Diff
finalstatus <- out_Diff[nrow(out_Diff),]
# out_Diff %>%
# filter(times == 100)
outcomes[i,] <- c(paramcombos$x_parameter[i], paramcombos$y_parameter[i], finalstatus$F_1, finalstatus$F_2)
}
finalDynamics <- outcomes %>%
mutate(Result = case_when(
Fish1 >= .25 & Fish2 >= .25 ~ "Both",
Fish1 >= .25 & Fish2 < .25 ~ "Only Pop1",
Fish1 < .25 & Fish2 >= .25 ~ "Only Pop2",
Fish1 < .25 & Fish2 < .25 ~ "Neither"))
cols <- c("green", "orange", "yellow", "black")
# finalDynamics$Result <- as.character(finalDynamics$Result)
finalDynamics$Result <- factor(finalDynamics$Result, levels = c("Both", "Only Pop1", "Only Pop2", "Neither"))
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(limits = c(0,1), expand = c(0,0)) +
scale_y_continuous(limits = c(-0.05,1.05), expand = c(0,0)) +
# scale_x_continuous(expand = c(0,0), breaks = seq(from = 0, to = 1, length.out = 11)) +
# scale_y_continuous(expand = c(0,0),  breaks = seq(from = 0, to = 1, length.out = 11)) +
# xlim(0, 1) +
# ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank(), axis.title.y=element_text(angle=0))
}
paramplane_testing <- function(boop){
pl <- list()
param_tests <- expand.grid(firstParam = seq(from = 1, to = 9, length.out = 9),
secondParam = seq(from = 1, to = 9, length.out = 9))
param_tests <- param_tests %>%
filter(firstParam != secondParam) %>%
filter(firstParam == boop)
for(i in 1:nrow(param_tests)){
pl[[i]] <- paramplane(param_tests$firstParam[i], param_tests$secondParam[i], 1, 1)
}
#do.call("grid.arrange", c(pl,  ncol=2))
ggarrange(plotlist = pl, ncol = 2, nrow = 4, legend = "right", common.legend = TRUE)
}
paramplane_testing(9)
BauchSensitivity <- function(pars){
derivs <- function (t, state, pars) {
with (as.list(c(state, pars)), {
## now code the model equations
dF_1dt <-  r_1 * F_1 * (1-F_1) - (h_1 * F_1 * (1-X_1))/(F_1+s_1) - i_2 * F_1 + i_1 * F_2
dF_2dt <-  r_2 * F_2 * (1-F_2) - (h_2 * F_2 * (1-X_2))/(F_2+s_2) - i_1 * F_2 + i_2 * F_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(F_1 + c_1) - w_1 + d_1*(2*X_1 - 1) + rho_1 * (2*X_2 - 1))
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(F_2 + c_2) - w_2 + d_2*(2*X_2 - 1) + rho_2 * (2*X_1 - 1))
return(list(c(dF_1dt, dF_2dt, dX_1dt, dX_2dt)))
})
}
state   <- starting_defaultparams
tout    <- timespan
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = pars)))
}
SnsBact <- sensFun(func = BauchSensitivity, parms = params_default, sensvar = c("F_1", "F_2"), senspar = c("i_1", "i_2", "rho_1", "rho_2"), varscale = 1)
SnsBact <- sensFun(func = BauchSensitivity, parms = params_default, sensvar = c("F_1", "F_2"), senspar = c("i_1", "i_2", "rho_1", "rho_2"), varscale = 1)
sensegraph <- data.frame(matrix(,nrow = 4, ncol = 2))
colnames(sensegraph) = c("Parameter", "Sensitivity")
sense <- summary(SnsBact)
sensegraph$Parameter <- c("i1", "i2", "rho1", "rho2")
sensegraph$Sensitivity <- sense$L1
sensegraph
BauchSensitivity <- function(pars){
derivs <- function (t, state, pars) {
with (as.list(c(state, pars)), {
## now code the model equations
dF_1dt <-  r_1 * F_1 * (1-F_1) - (h_1 * F_1 * (1-X_1))/(F_1+s_1) - i_2 * F_1 + i_1 * F_2
dF_2dt <-  r_2 * F_2 * (1-F_2) - (h_2 * F_2 * (1-X_2))/(F_2+s_2) - i_1 * F_2 + i_2 * F_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(F_1 + c_1) - w_1 + d_1*(2*X_1 - 1) + rho_1 * (2*X_2 - 1))
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(F_2 + c_2) - w_2 + d_2*(2*X_2 - 1) + rho_2 * (2*X_1 - 1))
return(list(c(dF_1dt, dF_2dt, dX_1dt, dX_2dt)))
})
}
state   <- starting_defaultparams
tout    <- timespan
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = pars)))
}
SnsBact <- sensFun(func = BauchSensitivity, parms = params_default, sensvar = c("F_1", "F_2"), senspar = c("i_1", "i_2", "rho_1", "rho_2"), varscale = 1)
sensegraph <- data.frame(matrix(,nrow = 4, ncol = 2))
colnames(sensegraph) = c("Parameter", "Sensitivity")
sense <- summary(SnsBact)
sensegraph$Parameter <- c(expression("i"[1]), expression("i"[2]), expression("\u03C1"[1]), expression("\u03C1"[2]))
sensegraph$Sensitivity <- sense$L1
# ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
#   geom_bar(stat="identity", fill = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#   #scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#   scale_x_discrete(labels = c(expression('i'[1]), expression('i'[2]), expression(rho[1]), expression(rho[2]))) +
#   theme_bw() +
#   theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# plot(SnsBact, type = "b", pch = 15:19, col = 2:6,
#      main = "Sensitivity all vars")
knitr::kable(sensegraph, format = "latex", booktabs = TRUE, caption = "(ref:lifetablecap) \\label{lifetable}", caption = '(ref:sensitivity) \\label{Sensitivity}')
knitr::kable(sensegraph, format = "latex", booktabs = TRUE, caption = '(ref:sensitivity) \\label{Sensitivity}')
BauchSensitivity <- function(pars){
derivs <- function (t, state, pars) {
with (as.list(c(state, pars)), {
## now code the model equations
dF_1dt <-  r_1 * F_1 * (1-F_1) - (h_1 * F_1 * (1-X_1))/(F_1+s_1) - i_2 * F_1 + i_1 * F_2
dF_2dt <-  r_2 * F_2 * (1-F_2) - (h_2 * F_2 * (1-X_2))/(F_2+s_2) - i_1 * F_2 + i_2 * F_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(F_1 + c_1) - w_1 + d_1*(2*X_1 - 1) + rho_1 * (2*X_2 - 1))
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(F_2 + c_2) - w_2 + d_2*(2*X_2 - 1) + rho_2 * (2*X_1 - 1))
return(list(c(dF_1dt, dF_2dt, dX_1dt, dX_2dt)))
})
}
state   <- starting_defaultparams
tout    <- timespan
## ode solves the model by integration ...
return(as.data.frame(ode(y = state, times = tout, func = derivs,
parms = pars)))
}
SnsBact <- sensFun(func = BauchSensitivity, parms = params_default, sensvar = c("F_1", "F_2"), senspar = c("i_1", "i_2", "rho_1", "rho_2"), varscale = 1)
sensegraph <- data.frame(matrix(,nrow = 4, ncol = 2))
colnames(sensegraph) = c("Parameter", "Sensitivity")
sense <- summary(SnsBact)
sensegraph$Parameter <- c("i\\textsubscript{1}", "i\\textsubscript{2}", "\u03C1\\textsubscript{1}", "\u03C1\\textsubscript{2}")
sensegraph$Sensitivity <- sense$L1
# ggplot(data=sensegraph, aes(x=Parameter, y=Sensitivity)) +
#   geom_bar(stat="identity", fill = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#   #scale_color_manual(values = c("#0066FF", "#89B8FF", "#FF0101", "#FF8989")) +
#   scale_x_discrete(labels = c(expression('i'[1]), expression('i'[2]), expression(rho[1]), expression(rho[2]))) +
#   theme_bw() +
#   theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# plot(SnsBact, type = "b", pch = 15:19, col = 2:6,
#      main = "Sensitivity all vars")
knitr::kable(sensegraph, format = "latex", booktabs = TRUE, caption = '(ref:sensitivity) \\label{Sensitivity}')
knitr::kable(sensegraph, format = "latex", booktabs = TRUE, caption = '(ref:sensitivity) \\label{Sensitivity}')
View(sensegraph)
sensegraph$Parameter <- c("i\textsubscript{1}", "i\textsubscript{2}", "\u03C1\textsubscript{1}", "\u03C1\textsubscript{2}")
sensegraph$Sensitivity <- sense$L1
knitr::kable(sensegraph, format = "latex", booktabs = TRUE, caption = '(ref:sensitivity) \\label{Sensitivity}')
View(sensegraph)
sensegraph$Parameter <- c("i \textsubscript{1}", "i \textsubscript{2}", "\u03C1 \textsubscript{1}", "\u03C1 \textsubscript{2}")
sensegraph$Sensitivity <- sense$L1
View(sensegraph)
sensegraph$Parameter <- c("i ~1~", "i \textsubscript{2}", "\u03C1 \textsubscript{1}", "\u03C1 \textsubscript{2}")
