for(i in 1:length(new_param)){
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default$param <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%#THIS PLOTS START BACK HERE LOOK AT STAGE MODEL
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
#grid.arrange(out_Diff[[1:5]], ncol = 2)
#do.call(grid.arrange, out_Diff)
grid.arrange(arrangeGrob(plotList, main = "Big Title", ncol=1))
}
#Change params to max and min for graph 6
#graph all 6 in same panel with caption or something idk
param_ranges(roe, 0, 10)
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
param_ranges <- function(param, max, min){
#Generate list of ranges
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
new_param <- seq(from=min, to=max, length.out=5)
plotList <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default$param <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%#THIS PLOTS START BACK HERE LOOK AT STAGE MODEL
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
#grid.arrange(out_Diff[[1:5]], ncol = 2)
#do.call(grid.arrange, out_Diff)
#grid.arrange(arrangeGrob(plotList, main = "Big Title", ncol=2))
grid.arrange(plotList[[1]],plotList[[2]],plotList[[3]],plotList[[4]],plotList[[5]])
}
#Change params to max and min for graph 6
#graph all 6 in same panel with caption or something idk
param_ranges(roe, 0, 10)
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
param_ranges <- function(param, max, min){
#Generate list of ranges
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
new_param <- seq(from=min, to=max, length.out=5)
plotList <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default$param <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%#THIS PLOTS START BACK HERE LOOK AT STAGE MODEL
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
#grid.arrange(out_Diff[[1:5]], ncol = 2)
#do.call(grid.arrange, out_Diff)
#grid.arrange(arrangeGrob(plotList, main = "Big Title", ncol=2))
do.call("grid.arrange", c(plotList, ncol=2))
}
#Change params to max and min for graph 6
#graph all 6 in same panel with caption or something idk
param_ranges(roe, 0, 10)
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
out_Diff
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
out_Diff
params_Bauch
Bauch.Coupled <- function (t, y, params) {
## first extract the state variables
P_1 <- y[1] #Fish Pop var
P_2 <- y[2] #Fish Pop var
X_1 <- y[3] #conservationist var
X_2 <- y[4] #conservationist var
#TT <- y[5]
## now extract the parameters
R_1 <- params["R_1"] # Net growth/fecundity
s_1 <- params["s_1"] # supply and demand
h_1 <- params["h_1"] # Harvesting efficiency
k_1 <- params["k_1"] # Social learning rate
w_1 <- params["w_1"] # conservation costs
c_1 <- params["c_1"] # rarity valuation param
d_1 <- params["d_1"] # social norm strength
R_2 <- params["R_2"] # Net growth/fecundity
s_2 <- params["s_2"] # supply and demand
h_2 <- params["h_2"] # Harvesting efficiency
k_2 <- params["k_2"] # Social learning rate
w_2 <- params["w_2"] # conservation costs
c_2 <- params["c_2"] # rarity valuation param
d_2 <- params["d_2"] # social norm strength
roe_1 <- params["roe_1"] #fish diffusion
roe_2 <- params["roe_2"] #fish diffusion
## now code the model equations
dP_1dt <- R_1 * P_1 * (1-P_1) - (h_1 * P_1 * (1-X_1))/(P_1+s_1) + roe_1 * (P_2 - P_1)/2
dX_1dt <- k_1 * X_1 * (1-X_1) * (d_1*(2*X_1-1) + 1/(P_1+c_1) - w_1) +
k_1 * X_2 * (1-X_2) * (d_1*(2*X_2-1) + 1/(P_1+c_1) - w_1)
dP_2dt <- R_2 * P_2 * (1-P_2) - (h_2 * P_2 * (1-X_2))/(P_2+s_2) + roe_2 * (P_1 - P_2)/2
dX_2dt <- k_2 * X_2 * (1-X_2) * (d_2*(2*X_2-1) + 1/(P_2+c_2) - w_2) +
k_2 * X_1 * (1-X_1) * (d_2*(2*X_1-1) + 1/(P_2+c_2) - w_2)
## combine results into a single vector
dydt <- c(dP_1dt, dP_2dt, dX_1dt, dX_2dt)
## return result as a list!
list(dydt)
}
param = R
param <-  R
param <-  "R"
params_Default$param
params_Default$as.factor(param)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Soc_Ecol_Model")
library(deSolve)
library(tidyverse)
library(ggplot2)
library(gridExtra)
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
param_ranges <- function(param, max, min){
#Generate list of ranges
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
new_param <- seq(from=min, to=max, length.out=5)
plotList <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default[param] <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
do.call("grid.arrange", c(plotList, ncol=2))
}
#Change params to max and min for graph 6
#graph all 6 in same panel with caption or something idk
param_ranges(8, 0, 10)
params_Default[8]
params_Default[8,2]
params_Default[8] <- 2
params_Default[8]
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
param_ranges <- function(param, max, min){
#Generate list of ranges
new_param <- seq(from=min, to=max, length.out=5)
plotList <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default[param] <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
do.call("grid.arrange", c(plotList, ncol=2))
}
#Change params to max and min for graph 6
#graph all 6 in same panel with caption or something idk
param_ranges(8, 0, 10)
i <- 4
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default[param] <- new_param[i]
min <- 0
max <- 1
#Generate list of ranges
new_param <- seq(from=min, to=max, length.out=5)
new_param
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
i <- 1
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default[param] <- new_param[i]
param <- 8
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Soc_Ecol_Model")
library(deSolve)
library(tidyverse)
library(ggplot2)
library(gridExtra)
Bauch.Model <- function (t, y, params) {
## first extract the state variables
P <- y[1] #Fish Pop var
X <- y[2] #conservationist var
#TT <- y[5]
## now extract the parameters
R <- params["R"] # Net growth/fecundity
s <- params["s"] # supply and demand
h <- params["h"] # Harvesting efficiency
k <- params["k"] # Social learning rate
w <- params["w"] # conservation costs
c <- params["c"] # rarity valuation param
d <- params["d"] # social norm strength
## now code the model equations
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
## combine results into a single vector
dydt <- c(dPdt, dXdt)
## return result as a list!
list(dydt)
}
params_Bauch <- c(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P = 0.406, X = .24) # See supplemental data for other starting params
ode(
func=Bauch.Model,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
Bauch.Coupled <- function (t, y, params) {
## first extract the state variables
P_1 <- y[1] #Fish Pop var
P_2 <- y[2] #Fish Pop var
X_1 <- y[3] #conservationist var
X_2 <- y[4] #conservationist var
#TT <- y[5]
## now extract the parameters
R_1 <- params["R_1"] # Net growth/fecundity
s_1 <- params["s_1"] # supply and demand
h_1 <- params["h_1"] # Harvesting efficiency
k_1 <- params["k_1"] # Social learning rate
w_1 <- params["w_1"] # conservation costs
c_1 <- params["c_1"] # rarity valuation param
d_1 <- params["d_1"] # social norm strength
R_2 <- params["R_2"] # Net growth/fecundity
s_2 <- params["s_2"] # supply and demand
h_2 <- params["h_2"] # Harvesting efficiency
k_2 <- params["k_2"] # Social learning rate
w_2 <- params["w_2"] # conservation costs
c_2 <- params["c_2"] # rarity valuation param
d_2 <- params["d_2"] # social norm strength
roe_1 <- params["roe_1"] #fish diffusion
roe_2 <- params["roe_2"] #fish diffusion
## now code the model equations
dP_1dt <- R_1 * P_1 * (1-P_1) - (h_1 * P_1 * (1-X_1))/(P_1+s_1) + roe_1 * (P_2 - P_1)/2
dX_1dt <- k_1 * X_1 * (1-X_1) * (d_1*(2*X_1-1) + 1/(P_1+c_1) - w_1) +
k_1 * X_2 * (1-X_2) * (d_1*(2*X_2-1) + 1/(P_1+c_1) - w_1)
dP_2dt <- R_2 * P_2 * (1-P_2) - (h_2 * P_2 * (1-X_2))/(P_2+s_2) + roe_2 * (P_1 - P_2)/2
dX_2dt <- k_2 * X_2 * (1-X_2) * (d_2*(2*X_2-1) + 1/(P_2+c_2) - w_2) +
k_2 * X_1 * (1-X_1) * (d_2*(2*X_1-1) + 1/(P_2+c_2) - w_2)
## combine results into a single vector
dydt <- c(dP_1dt, dP_2dt, dX_1dt, dX_2dt)
## return result as a list!
list(dydt)
}
params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.5, roe_2 = 1)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) # See supplemental data for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Coupled
out_Coupled %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
min <- 0
max <- 1
i <- 1
param <- 8
#Generate list of ranges
new_param <- seq(from=min, to=max, length.out=5)
new_param
plotList <- list()
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default[param] <- new_param[i]
params_Default
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
params_Bauch
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
do.call("grid.arrange", c(plotList, ncol=2))
param_ranges <- function(param, max, min){
#Generate list of ranges
new_param <- seq(from=min, to=max, length.out=5)
plotList <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default[param] <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
do.call("grid.arrange", c(plotList, ncol=2))
}
param_ranges(8, 0, 1)
# params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
# min <- 0
# max <- 1
# i <- 1
# param <- 8
param_ranges <- function(param, max, min){
#Generate list of ranges
new_param <- seq(from=min, to=max, length.out=5)
plotList <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default[param] <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
params_Bauch[param] <- max
params_Bauch[(param + 8)] <- min
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[6]] <- p
do.call("grid.arrange", c(plotList, ncol=2))
}
#Change params to max and min for graph 6
#graph all 6 in same panel with caption or something idk
param_ranges(8, 0, 1)
