Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
# xl <- which(parameter == names(axis.titles))
# yl <- which(variable == names(axis.titles))
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = expression(bquote(.(axis.titles$parameter))), ylab =  expression(as.character(variableletter)[variableno]), #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_2", 1, m, 1, F, 2)
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
axis.titles <- c(r_1 = expression('r'[1]), s_1 = expression('s'[1]), h_1 = expression('h'[1]), k_1 = expression('k'[1]), w_1 = expression('/omega'[1]), c_1 = expression('c'[1]), d_1 = expression('d'[1]), m_1 = expression(m[1]), rho_1 = expression('/rho'[1]),
r_2 = expression('r'[2]), s_2 = expression('s'[2]), h_2 = expression('h'[2]), k_2 = expression('k'[2]), w_2 = expression('/omega'[2]), c_2 = expression('c'[2]), d_2 = expression('d'[2]), m_2 = expression('m'[2]), rho_2 = expression('/rho'[2]),
F_1 = expression('F'[1]), F_2 = expression('F'[2]), X_1 = expression('X'[1]), X_2 = expression('X'[2]))
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(paramletter[paramno])
yl <- which(variable == names(axis.titles))
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  expression(as.character(variableletter)[variableno]), #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_2", 1, m, 1, F, 2)
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
axis.titles <- c(r_1 = expression('r'[1]), s_1 = expression('s'[1]), h_1 = expression('h'[1]), k_1 = expression('k'[1]), w_1 = expression('/omega'[1]), c_1 = expression('c'[1]), d_1 = expression('d'[1]), m_1 = expression(m[1]), rho_1 = expression('/rho'[1]),
r_2 = expression('r'[2]), s_2 = expression('s'[2]), h_2 = expression('h'[2]), k_2 = expression('k'[2]), w_2 = expression('/omega'[2]), c_2 = expression('c'[2]), d_2 = expression('d'[2]), m_2 = expression('m'[2]), rho_2 = expression('/rho'[2]),
F_1 = expression('F'[1]), F_2 = expression('F'[2]), X_1 = expression('X'[1]), X_2 = expression('X'[2]))
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(.(paramletter[paramno]))
yl <- which(variable == names(axis.titles))
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  expression(as.character(variableletter)[variableno]), #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_2", 1, m, 1, F, 2)
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
axis.titles <- c(r_1 = expression('r'[1]), s_1 = expression('s'[1]), h_1 = expression('h'[1]), k_1 = expression('k'[1]), w_1 = expression('/omega'[1]), c_1 = expression('c'[1]), d_1 = expression('d'[1]), m_1 = expression(m[1]), rho_1 = expression('/rho'[1]),
r_2 = expression('r'[2]), s_2 = expression('s'[2]), h_2 = expression('h'[2]), k_2 = expression('k'[2]), w_2 = expression('/omega'[2]), c_2 = expression('c'[2]), d_2 = expression('d'[2]), m_2 = expression('m'[2]), rho_2 = expression('/rho'[2]),
F_1 = expression('F'[1]), F_2 = expression('F'[2]), X_1 = expression('X'[1]), X_2 = expression('X'[2]))
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(.(paramletter[paramno]))
yl <- which(variable == names(axis.titles))
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  expression(as.character(variableletter)[variableno]), #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_2", 1, 'm', 1, F, 2)
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
axis.titles <- c(r_1 = expression('r'[1]), s_1 = expression('s'[1]), h_1 = expression('h'[1]), k_1 = expression('k'[1]), w_1 = expression('/omega'[1]), c_1 = expression('c'[1]), d_1 = expression('d'[1]), m_1 = expression(m[1]), rho_1 = expression('/rho'[1]),
r_2 = expression('r'[2]), s_2 = expression('s'[2]), h_2 = expression('h'[2]), k_2 = expression('k'[2]), w_2 = expression('/omega'[2]), c_2 = expression('c'[2]), d_2 = expression('d'[2]), m_2 = expression('m'[2]), rho_2 = expression('/rho'[2]),
F_1 = expression('F'[1]), F_2 = expression('F'[2]), X_1 = expression('X'[1]), X_2 = expression('X'[2]))
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(.(paramletter).([paramno]))
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
axis.titles <- c(r_1 = expression('r'[1]), s_1 = expression('s'[1]), h_1 = expression('h'[1]), k_1 = expression('k'[1]), w_1 = expression('/omega'[1]), c_1 = expression('c'[1]), d_1 = expression('d'[1]), m_1 = expression(m[1]), rho_1 = expression('/rho'[1]),
r_2 = expression('r'[2]), s_2 = expression('s'[2]), h_2 = expression('h'[2]), k_2 = expression('k'[2]), w_2 = expression('/omega'[2]), c_2 = expression('c'[2]), d_2 = expression('d'[2]), m_2 = expression('m'[2]), rho_2 = expression('/rho'[2]),
F_1 = expression('F'[1]), F_2 = expression('F'[2]), X_1 = expression('X'[1]), X_2 = expression('X'[2]))
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(.(paramletter[(paramno)]))
yl <- which(variable == names(axis.titles))
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  expression(as.character(variableletter)[variableno]), #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_2", 1, m, 1, F, 2)
bifCurve("m_1", "F_2", 1, 'm', 1, F, 2)
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
axis.titles <- c(r_1 = expression('r'[1]), s_1 = expression('s'[1]), h_1 = expression('h'[1]), k_1 = expression('k'[1]), w_1 = expression('/omega'[1]), c_1 = expression('c'[1]), d_1 = expression('d'[1]), m_1 = expression(m[1]), rho_1 = expression('/rho'[1]),
r_2 = expression('r'[2]), s_2 = expression('s'[2]), h_2 = expression('h'[2]), k_2 = expression('k'[2]), w_2 = expression('/omega'[2]), c_2 = expression('c'[2]), d_2 = expression('d'[2]), m_2 = expression('m'[2]), rho_2 = expression('/rho'[2]),
F_1 = expression('F'[1]), F_2 = expression('F'[2]), X_1 = expression('X'[1]), X_2 = expression('X'[2]))
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(.(paramletter[.(paramno)]))
yl <- which(variable == names(axis.titles))
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  expression(as.character(variableletter)[variableno]), #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_2", 1, 'm', 1, F, 2)
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
axis.titles <- c(r_1 = expression('r'[1]), s_1 = expression('s'[1]), h_1 = expression('h'[1]), k_1 = expression('k'[1]), w_1 = expression('/omega'[1]), c_1 = expression('c'[1]), d_1 = expression('d'[1]), m_1 = expression(m[1]), rho_1 = expression('/rho'[1]),
r_2 = expression('r'[2]), s_2 = expression('s'[2]), h_2 = expression('h'[2]), k_2 = expression('k'[2]), w_2 = expression('/omega'[2]), c_2 = expression('c'[2]), d_2 = expression('d'[2]), m_2 = expression('m'[2]), rho_2 = expression('/rho'[2]),
F_1 = expression('F'[1]), F_2 = expression('F'[2]), X_1 = expression('X'[1]), X_2 = expression('X'[2]))
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(.(paramletter)[.(paramno)])
yl <- which(variable == names(axis.titles))
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  expression(as.character(variableletter)[variableno]), #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_2", 1, 'm', 1, F, 2)
#Taken from: https://www.r-bloggers.com/2010/06/r-tools-for-dynamical-systems-bifurcation-plot-in-r%C2%A0for%C2%A0system%C2%A0of%C2%A0odes/
#To avoid confusion, x1 -> x, x2 -> y, f1 -> f, f2 -> g
# Bauch.Coupled <- function (Time, State, Pars) {
#   with(as.list(c(State, Pars)), {
#     dfdt <-  r_1 * f * (1-f) - (h_1 * f * (1-x))/(f+s_1) - m_2 * f + m_1 * g
#     dgdt <-  r_2 * g * (1-g) - (h_2 * g * (1-y))/(g+s_2) - m_1 * g + m_2 * f
#
#     dxdt <- k_1 * x * (1-x) *(1/(f + c_1) - w_1 + d_1*(2*x - 1) + rho_1 * (2*y - 1))
#     dydt <- k_2 * y * (1-y) *(1/(g + c_2) - w_2 + d_2*(2*y - 1) + rho_2 * (2*x - 1))
#
#     return(list(c(df, dg, dx, dy)))
#   })
# }
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(.(paramletter)[.(paramno)])
yl <- bquote(.(variableletter)[.(variableno)])
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  yl, #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
#Below is for calcualting all of the bifurcation curves. We're only going to look at m vs the two F's
# BifParams <- c("rho_1", "rho_2", "m_1", "m_2")
# BifVars <- c("F_1", "F_2","X_1", "X_2")
# plotList <- list()
#
# for(k in 1:length(BifParams)){
#   for(g in 1:length(BifVars)){
#   #plotList[[g]] <- bifCurve(BifParams[g], BifVars[k], 1)
#   bifCurve(BifParams[g], BifVars[k], 1)
#   }
#   # do.call("grid.arrange", c(plotList, ncol=2))
#   # plotList <- list()
# }
bifCurve("m_1", "F_1", 1, 'm', 1, 'F', 1)
bifCurve("m_1", "F_2", 1, 'm', 1, 'F', 2)
bifCurve <- function(parameter, variable, paramrange, paramletter, paramno, variableletter, variableno){
n <- 100 # number of simulations
param.name <- parameter # choose parameter to perturb
param.seq <- seq(0,paramrange,length = 50) # choose range of parameters
Pars <- c(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
Time <- seq(0, 10, length = n)
State <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
param.index <- which(param.name == names(Pars))
out <- list()
for (i in 1:length(param.seq))
out[[i]] <- matrix(0, n, length(State))
for (i in 1:length(param.seq)) {
# set params
Pars.loop <- Pars
Pars.loop[param.index] <- param.seq[i]
# converge
init <- ode(State, Time, Bauch.Coupled, Pars.loop)
# get converged points
out[[i]] <- ode(init[n,-1], Time, Bauch.Coupled, Pars.loop)[,-1]
}
xl <- bquote(Parameter ~ .(paramletter)[.(paramno)])
yl <- bquote(Variable ~ .(variableletter)[.(variableno)])
range.lim <- lapply(out, function(x) apply(x, 2, range))
range.lim <- apply(do.call("rbind", range.lim), 2, range)
plot.variable <- variable # choose which variable to show
plot(0, 0, pch = "", xlab = xl, ylab =  yl, #xlab = param.name, ylab = plot.variable, #make axis.titles
xlim = range(param.seq), ylim = range.lim[,plot.variable])
for (i in 1:length(param.seq)) {
points(rep(param.seq[i], n), out[[i]][,plot.variable])
}
}
bifCurve("m_1", "F_1", 1, 'm', 1, 'F', 1)
bifCurve("m_1", "F_2", 1, 'm', 1, 'F', 2)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
setwd("C:/Users/Sophi/Documents/GitHub/UNH_Docs/Proposal/Soc_Ecol_Model")
library(deSolve)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(kableExtra)
library(ggpubr)
library(grid)
#Nest try h = .25
params_list <- data.frame(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0, rho_1 = 0,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0, rho_2 = 0)
# #WORKED - MINIMUM GROWTH RATE USED IN THAMPI
# params_list <- data.frame(r_1 = 0.16, s_1 = 0.8, h_1 = 0.5, k_1 = 0.17, w_1 = 1.44, c_1 = 0.6, d_1 = 0.3, m_1 = 0, rho_1 = 0,
#                           r_2 = 0.16, s_2 = 0.8, h_2 = 0.5, k_2 = 0.17, w_2 = 1.44, c_2 = 0.6, d_2 = 0.3, m_2 = 0, rho_2 = 0)
#Extensions of Bauch Default but with my params I want changed. Goal: get this to oscillate
# params_list <- data.frame(r_1 = 0.35, s_1 = 0.8, h_1 = 0.5, k_1 = 0.17, w_1 = 1, c_1 = 1.68, d_1 = 0.3, m_1 = 0, rho_1 = 0,
#                           r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 0.17, w_2 = 1, c_2 = 1.68, d_2 = 0.3, m_2 = 0, rho_2 = 0)
#Extension of Bauch Default
# params_list <- data.frame(r_1 = 0.06, s_1 = 0.8, h_1 = 0.1, k_1 = 0.17, w_1 = 1, c_1 = 0.6, d_1 = 0.3, m_1 = 0, rho_1 = 0,
#                           r_2 = 0.06, s_2 = 0.8, h_2 = 0.1, k_2 = 0.17, w_2 = 1, c_2 = 0.6, d_2 = 0.3, m_2 = 0, rho_2 = 0)
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
timespan <- seq(from = 0, to = 1000, by = 1)
##Maybe see what proportion of people can actually be fishing in this system to make it sustainable
Bauch.Coupled <- function (t, y, params) {
## first extract the state variables
F_1 <- y[1] #Fish Pop var
F_2 <- y[2] #Fish Pop var
X_1 <- y[3] #conservationist var
X_2 <- y[4] #conservationist var
#TT <- y[5]
## now extract the parameters
r_1 <- params["r_1"] # Net growth/fecundity
s_1 <- params["s_1"] # supply and demand
h_1 <- params["h_1"] # Harvesting efficiency
k_1 <- params["k_1"] # Social learning rate
w_1 <- params["w_1"] # conservation costs
c_1 <- params["c_1"] # rarity valuation param
d_1 <- params["d_1"] # social norm strength
m_1 <- params["m_1"] # Inflow of fish from pop 2 to pop 1
rho_1 <- params["rho_1"] # Influence of pop 2 on pop 1
r_2 <- params["r_2"] # Net growth/fecundity
s_2 <- params["s_2"] # supply and demand
h_2 <- params["h_2"] # Harvesting efficiency
k_2 <- params["k_2"] # Social learning rate
w_2 <- params["w_2"] # conservation costs
c_2 <- params["c_2"] # rarity valuation param
d_2 <- params["d_2"] # social norm strength
m_2 <- params["m_2"] # Inflow of fish from pop 1 to pop 2
rho_2 <- params["rho_2"] # Influence of pop 1 on pop 2
## now code the model equations
dF_1dt <-  r_1 * F_1 * (1-F_1) - (h_1 * F_1 * (1-X_1))/(F_1+s_1) - m_2 * F_1 + m_1 * F_2
dF_2dt <-  r_2 * F_2 * (1-F_2) - (h_2 * F_2 * (1-X_2))/(F_2+s_2) - m_1 * F_2 + m_2 * F_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(F_1 + c_1) - w_1 + d_1*(2*X_1 - 1) + rho_1 * (2*X_2 - 1))
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(F_2 + c_2) - w_2 + d_2*(2*X_2 - 1) + rho_2 * (2*X_1 - 1))
## combine results into a single vector
dydt <- c(dF_1dt, dF_2dt, dX_1dt, dX_2dt)
## return result as a list!
list(dydt)
}
params_Bauch2 <- params_list
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch2
) %>%
as.data.frame() -> out_Coupled
out_Coupled %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='Time (Year)',y='Population') +
theme(legend.title=element_blank()) +
scale_colour_discrete(labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2])))
rhoparams <- c(0, 0.05, 0.1, 0.5)
dparams <- c(0, 0.05, 0.1, 0.5)
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='time (yr)',y='pop') +
theme(legend.position = "none") +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[9])) +
theme(plot.title = element_text(size=10))
plotList[[k]] <- p
}
}
do.call("grid.arrange", c(plotList, ncol=4))
rhoparams <- c(0, 0.05, 0.1, 0.5)
dparams <- c(0, 0.05, 0.1, 0.5)
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[18] <- rhoparams[j]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='Time (yr)',y='Population') +
theme(legend.position = "none") +
ggtitle(paste("d = ", params_Default[7], "rho = ", params_Default[9])) +
theme(plot.title = element_text(size=10))
plotList[[k]] <- p
}
}
do.call("grid.arrange", c(plotList, ncol=4))
warnings()
