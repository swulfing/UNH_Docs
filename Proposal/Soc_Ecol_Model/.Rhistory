prop_2 = 1- params_Default$prop)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
#Now assigning the final graph to give the two populations the max and min of the paramters
params_Default <- data.frame(R = 0.06, s = .8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, e = .25, i = .25, prop = .1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, e_1 = params_Default$e, i_1 = params_Default$i,
prop_1 =  params_Default$prop,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 = params_Default$c, d_2 = params_Default$d, e_2 = params_Default$e, i_2 = params_Default$i,
prop_2 = 1- params_Default$prop)
params_Bauch[param] <- max
params_Bauch[(param + 10)] <- min
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[6]] <- p
do.call("grid.arrange", c(plotList, ncol=2))
}
param_ranges(8, 0, 1)
# params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
# min <- 0
# max <- 1
# i <- 1
# param <- 8
#Note: in this function, I am changing BOTH populations' paramters. Should I try just changing one?
param_ranges <- function(param, max, min){
#Generate list of ranges
new_param <- seq(from=min, to=max, length.out=5)
plotList <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
params_Default <- data.frame(R = 0.06, s = .8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, e = .25, i = .25, prop = .1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default[param] <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, e_1 = params_Default$e, i_1 = params_Default$i,
prop_1 =  params_Default$prop,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d,  e_2 = params_Default$e, i_2 = params_Default$i,
prop_2 = 1- params_Default$prop)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
#Now assigning the final graph to give the two populations the max and min of the paramters
params_Default <- data.frame(R = 0.06, s = .8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, e = .25, i = .25, prop = .1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, e_1 = params_Default$e, i_1 = params_Default$i,
prop_1 =  params_Default$prop,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 = params_Default$c, d_2 = params_Default$d, e_2 = params_Default$e, i_2 = params_Default$i,
prop_2 = 1- params_Default$prop)
params_Bauch[param] <- max
params_Bauch[(param + 10)] <- min
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[6]] <- p
do.call("grid.arrange", c(plotList, ncol=2))
}
param_ranges(8, 0, 1)
param_ranges(8, 1, 0)
param_ranges(1, 1, 0)
param_ranges(1, 0, 1)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Soc_Ecol_Model")
library(deSolve)
library(tidyverse)
library(ggplot2)
library(gridExtra)
Bauch.Coupled <- function (t, y, params) {
## first extract the state variables
P_1 <- y[1] #Fish Pop var
P_2 <- y[2] #Fish Pop var
X_1 <- y[3] #conservationist var
X_2 <- y[4] #conservationist var
#TT <- y[5]
## now extract the parameters
R_1 <- params["R_1"] # Net growth/fecundity
s_1 <- params["s_1"] # supply and demand
h_1 <- params["h_1"] # Harvesting efficiency
k_1 <- params["k_1"] # Social learning rate
w_1 <- params["w_1"] # conservation costs
c_1 <- params["c_1"] # rarity valuation param
d_1 <- params["d_1"] # social norm strength
R_2 <- params["R_2"] # Net growth/fecundity
s_2 <- params["s_2"] # supply and demand
h_2 <- params["h_2"] # Harvesting efficiency
k_2 <- params["k_2"] # Social learning rate
w_2 <- params["w_2"] # conservation costs
c_2 <- params["c_2"] # rarity valuation param
d_2 <- params["d_2"] # social norm strength
e_1 <- params["e_1"] # Outflow of fish pop1
e_2 <- params["e_2"] # Outflow of fish pop2
i_1 <- params["i_1"] # Inflow of fish from pop 2 to pop 1
i_2 <- params["i_2"] # Inflow of fish from pop 1 to pop 2
prop_1 <- params["prop_1"] # Influence of pop 2 on pop 1
prop_2 <- params["prop_2"] # Influence of pop 1 on pop 2
## now code the model equations
dP_1dt <- R_1 * P_1 * (1-P_1) - (h_1 * P_1 * (1-X_1))/(P_1+s_1) -  e_1 * P_1 + i_1 * P_2
dP_2dt <- R_2 * P_2 * (1-P_2) - (h_2 * P_2 * (1-X_2))/(P_2+s_2) -  e_2 * P_2 + i_2 * P_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(P_1 + c_1) - w_1 + d_1*(2*X_1 - 1)) - prop_1 * X_1 * ((2* X_2 - 1)^2) + prop_1 * (1 - X_1) * ((2* X_2 - 1)^2)
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(P_2 + c_2) - w_2 + d_2*(2*X_2 - 1)) - prop_2 * X_2 * ((2* X_1 - 1)^2) + prop_2 * (1 - X_2) * ((2* X_1 - 1)^2)
## combine results into a single vector
dydt <- c(dP_1dt, dP_2dt, dX_1dt, dX_2dt)
## return result as a list!
list(dydt)
}
params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, e_1 = 0.25, i_1 = 0.25, prop_1 = 0.1,
R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.5, e_2 = 0.25, i_2 = 0.25, prop_2 = 0.1)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) # See supplemental data for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Coupled
out_Coupled %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='time (yr)',y='pop')
# params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
# min <- 0
# max <- 1
# i <- 1
# param <- 8
#Note: in this function, I am changing BOTH populations' paramters. Should I try just changing one?
param_ranges <- function(param, max, min){
#Generate list of ranges
new_param <- seq(from=min, to=max, length.out=5)
plotList <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
params_Default <- data.frame(R = 0.06, s = .8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, e = .25, i = .25, prop = .1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default[param] <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, e_1 = params_Default$e, i_1 = params_Default$i,
prop_1 =  params_Default$prop,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d,  e_2 = params_Default$e, i_2 = params_Default$i,
prop_2 = 1- params_Default$prop)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[i]] <- p
}
#Now assigning the final graph to give the two populations the max and min of the paramters
params_Default <- data.frame(R = 0.06, s = .8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, e = .25, i = .25, prop = .1)
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, e_1 = params_Default$e, i_1 = params_Default$i,
prop_1 =  params_Default$prop,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 = params_Default$c, d_2 = params_Default$d, e_2 = params_Default$e, i_2 = params_Default$i,
prop_2 = 1- params_Default$prop)
params_Bauch[param] <- max
params_Bauch[(param + 10)] <- min
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='time (yr)',y='pop')
plotList[[6]] <- p
do.call("grid.arrange", c(plotList, ncol=2))
}
param_ranges(1, 0, 1)
param_ranges(1, 1, 0)
seq(from=0, to=1, length.out=5)
seq(from=1, to=0, length.out=5)
param_ranges(1, 1, 0)
param_ranges(8, 1, 0)
param_ranges(9, 0, 1)
param_ranges(10, 0, 1)
param_ranges(9, 1, 0)
param_ranges(10, 1, 0)
paramplane <- function(paramx, paramy, maxx, maxy){
#Create empty dataframe to fill
paramlist <- c("R", "S", "H", "K", "W", "C", "d", "e", "i", "prop")
outcomes <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(outcomes) <- c("XParameter", "YParameter", "Fish1", "Fish2")
#Dumb but it throws an error if S = 0
startx <- 0
starty <- 0
if(paramx == 2){startx <- .001}
if(paramy == 2){starty <- .001}
#Can comment this part out if using other H vals
if(paramx == 3){maxx = 0.1}
if(paramy == 3){maxy = 0.1}
#Create list of all combinations of the two paramters
paramcombos <- expand.grid(x_parameter = seq(from = startx, to = maxx, length.out = 11),
y_parameter = seq(from = starty, to = maxy, length.out = 11))
for(i in 1:nrow(paramcombos)){
params_Default <- data.frame(R = 0.06, s = .8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, e = .25, i = .25, prop = .1)
#Change params to be the
params_Default[paramx] <- paramcombos$x_parameter[i]
params_Default[paramy] <- paramcombos$y_parameter[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, e_1 = params_Default$e, i_1 = params_Default$i,
prop_1 =  params_Default$prop,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 = params_Default$c, d_2 = params_Default$d, e_2 = params_Default$e, i_2 = params_Default$i,
prop_2 = params_Default$prop)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
finalstatus <- out_Diff %>%
filter(times == 100)
outcomes[i,] <- c(paramcombos$x_parameter[i], paramcombos$y_parameter[i], finalstatus$P_1, finalstatus$P_2)
}
finalDynamics <- outcomes %>%
mutate(Result = case_when(
Fish1 >= .25 & Fish2 >= .25 ~ "Both",
Fish1 >= .25 & Fish2 < .25 ~ "Only Pop1",
Fish1 < .25 & Fish2 >= .25 ~ "Only Pop2",
Fish1 < .25 & Fish2 < .25 ~ "Neither"))
cols <- c("green", "orange", "yellow", "black")
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter, fill = Result)) + geom_tile(width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black")) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy])
}
paramplane(1, 3, 1, 1)
expand.grid(firstParam = seq(from = 1, to = 10, length.out = 10),
secondParam = seq(from = 1, to = 10, length.out = 10))
param_tests <- expand.grid(firstParam = seq(from = 1, to = 10, length.out = 10),
secondParam = seq(from = 1, to = 10, length.out = 10))
param_tests
paramplane_testing <- function(boop){
pl <- list()
param_tests <- expand.grid(firstParam = seq(from = 1, to = 10, length.out = 10),
secondParam = seq(from = 1, to = 10, length.out = 10))
param_tests <- param_tests %>%
filter(firstParam != secondParam) %>%
filter(firstParam == boop)
for(i in 1:nrow(param_tests)){
pl[[i]] <- paramplane(param_tests$firstParam[i], param_tests$secondParam[i], 1, 1)
}
do.call("grid.arrange", c(pl,  ncol=2))
}
paramplane_testing(2)
paramplane_testing(8)
paramplane <- function(paramx, paramy, maxx, maxy){
#Create empty dataframe to fill
paramlist <- c("R", "S", "H", "K", "W", "C", "d", "e", "i", "prop")
outcomes <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(outcomes) <- c("XParameter", "YParameter", "Fish1", "Fish2")
#Dumb but it throws an error if S = 0
startx <- 0
starty <- 0
if(paramx == 2){startx <- .001}
if(paramy == 2){starty <- .001}
#Can comment this part out if using other H vals
if(paramx == 3){maxx = 0.1}
if(paramy == 3){maxy = 0.1}
#Create list of all combinations of the two paramters
paramcombos <- expand.grid(x_parameter = seq(from = startx, to = maxx, length.out = 11),
y_parameter = seq(from = starty, to = maxy, length.out = 11))
for(i in 1:nrow(paramcombos)){
params_Default <- data.frame(R = 0.06, s = .8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, e = .25, i = .25, prop = .1)
#Change params to be the
params_Default[paramx] <- paramcombos$x_parameter[i]
params_Default[paramy] <- paramcombos$y_parameter[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, e_1 = params_Default$e, i_1 = params_Default$i,
prop_1 =  params_Default$prop,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 = params_Default$c, d_2 = params_Default$d, e_2 = params_Default$e, i_2 = params_Default$i,
prop_2 = params_Default$prop)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
finalstatus <- out_Diff[nrow(out_Diff),]
# out_Diff %>%
# filter(times == 100)
outcomes[i,] <- c(paramcombos$x_parameter[i], paramcombos$y_parameter[i], finalstatus$P_1, finalstatus$P_2)
}
finalDynamics <- outcomes %>%
mutate(Result = case_when(
Fish1 >= .25 & Fish2 >= .25 ~ "Both",
Fish1 >= .25 & Fish2 < .25 ~ "Only Pop1",
Fish1 < .25 & Fish2 >= .25 ~ "Only Pop2",
Fish1 < .25 & Fish2 < .25 ~ "Neither"))
cols <- c("green", "orange", "yellow", "black")
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter, fill = Result)) + geom_tile(width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black")) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy])
}
#paramplane(1, 3, 1, 1)
paramplane_testing(8)
paramplane_testing(9)
paramplane_testing(10)
popplane <- function(param, max){
#Create empty dataframe to fill
paramlist <- c("R", "S", "H", "K", "W", "C", "d", "e", "i", "prop")
outcomes <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(outcomes) <- c("Pop1Parameter", "Pop2Parameter", "Fish1", "Fish2")
#Dumb but it throws an error if S = 0
start <- 0
if(param == 2){start <- .001}
#Create list of all combinations of the two paramters
paramcombos <- expand.grid(pop1_parameter = seq(from = start, to = max, length.out = 10),
pop2_parameter = seq(from = start, to = max, length.out = 10))
for(i in 1:nrow(paramcombos)){
params_Default <- data.frame(R = 0.06, s = .8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, e = 0.25, i = 0.25, prop = .1)
#Change params to be the
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, e_1 = params_Default$e, i_1 = params_Default$i,
prop_1 =  params_Default$prop,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, e_2 = params_Default$e, i_2 = params_Default$i,
prop_2 = 1- params_Default$prop)
params_Bauch[param] <- paramcombos$pop1_parameter[i]
params_Bauch[(param + 10)] <- paramcombos$pop2_parameter[i]
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
finalstatus <- out_Diff[nrow(out_Diff),]
# out_Diff %>%
# filter(times == 100)
outcomes[i,] <- c(paramcombos$pop1_parameter[i], paramcombos$pop2_parameter[i], finalstatus$P_1, finalstatus$P_2)
}
finalDynamics <- outcomes %>%
mutate(Result = case_when(
Fish1 >= .25 & Fish2 >= .25 ~ "Both",
Fish1 >= .25 & Fish2 < .25 ~ "Only Pop1",
Fish1 < .25 & Fish2 >= .25 ~ "Only Pop2",
Fish1 < .25 & Fish2 < .25 ~ "Neither"))
cols <- c("green", "orange", "yellow", "black")
#Binned Colors
ggplot(finalDynamics, aes(Pop1Parameter, Pop2Parameter, fill = Result)) + geom_tile(width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black")) +
ggtitle(paste0(paramlist[param], " Parameter plane")) +
xlab(paste0(paramlist[param], " Population 1")) +
ylab(paste0(paramlist[param], " Population 2"))
}
popplane(8, 1)
popplane(9, 1)
popplane(10, 1)
popplane <- function(param, max){
#Create empty dataframe to fill
paramlist <- c("R", "S", "H", "K", "W", "C", "d", "e", "i", "prop")
outcomes <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(outcomes) <- c("Pop1Parameter", "Pop2Parameter", "Fish1", "Fish2")
#Dumb but it throws an error if S = 0
start <- 0
if(param == 2){start <- .001}
#Create list of all combinations of the two paramters
paramcombos <- expand.grid(pop1_parameter = seq(from = start, to = max, length.out = 10),
pop2_parameter = seq(from = start, to = max, length.out = 10))
for(i in 1:nrow(paramcombos)){
params_Default <- data.frame(R = 0.06, s = .8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, e = 0.25, i = 0.25, prop = .1)
#Change params to be the
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, e_1 = params_Default$e, i_1 = params_Default$i,
prop_1 =  params_Default$prop,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, e_2 = params_Default$e, i_2 = params_Default$i,
prop_2 = params_Default$prop)
params_Bauch[param] <- paramcombos$pop1_parameter[i]
params_Bauch[(param + 10)] <- paramcombos$pop2_parameter[i]
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff
finalstatus <- out_Diff[nrow(out_Diff),]
# out_Diff %>%
# filter(times == 100)
outcomes[i,] <- c(paramcombos$pop1_parameter[i], paramcombos$pop2_parameter[i], finalstatus$P_1, finalstatus$P_2)
}
finalDynamics <- outcomes %>%
mutate(Result = case_when(
Fish1 >= .25 & Fish2 >= .25 ~ "Both",
Fish1 >= .25 & Fish2 < .25 ~ "Only Pop1",
Fish1 < .25 & Fish2 >= .25 ~ "Only Pop2",
Fish1 < .25 & Fish2 < .25 ~ "Neither"))
cols <- c("green", "orange", "yellow", "black")
#Binned Colors
ggplot(finalDynamics, aes(Pop1Parameter, Pop2Parameter, fill = Result)) + geom_tile(width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black")) +
ggtitle(paste0(paramlist[param], " Parameter plane")) +
xlab(paste0(paramlist[param], " Population 1")) +
ylab(paste0(paramlist[param], " Population 2"))
}
popplane(10, 1)
