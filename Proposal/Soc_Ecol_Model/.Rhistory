starting_params <- starting_defaultparams #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=starting_params,
times=times,
parms=params_new
) %>%
as.data.frame() -> out_Diff
finalstatus <- out_Diff[nrow(out_Diff),]
# out_Diff %>%
# filter(times == 100)
outcomes[i,] <- c(paramcombos$x_parameter[i], paramcombos$y_parameter[i], finalstatus$F_1, finalstatus$F_2)
}
finalDynamics <- outcomes %>%
mutate(Result = case_when(
Fish1 >= .25 & Fish2 >= .25 ~ "Both",
Fish1 >= .25 & Fish2 < .25 ~ "Only Pop1",
Fish1 < .25 & Fish2 >= .25 ~ "Only Pop2",
Fish1 < .25 & Fish2 < .25 ~ "Neither"))
cols <- c("green", "orange", "yellow", "black")
# finalDynamics$Result <- as.character(finalDynamics$Result)
finalDynamics$Result <- factor(finalDynamics$Result, levels = c("Both", "Only Pop1", "Only Pop2", "Neither"))
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
xlim(0, 1) +
ylim(0, 1)
}
paramplane_testing <- function(boop){
pl <- list()
param_tests <- expand.grid(firstParam = seq(from = 1, to = 9, length.out = 9),
secondParam = seq(from = 1, to = 9, length.out = 9))
param_tests <- param_tests %>%
filter(firstParam != secondParam) %>%
filter(firstParam == boop)
for(i in 1:nrow(param_tests)){
pl[[i]] <- paramplane(param_tests$firstParam[i], param_tests$secondParam[i], 1, 1)
}
#do.call("grid.arrange", c(pl,  ncol=2))
ggarrange(plotlist = pl, ncol = 2, nrow = 4, legend = "right", common.legend = TRUE)
}
paramplane_testing(9)
paramx <- 9
paramy <- 8
maxx <- 1
maxy <- 1
#Create empty dataframe to fill
paramlist <- c("r", "s", "h", "k", "\u03C9", "c", "d", "i", "\u03C1")
outcomes <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(outcomes) <- c("XParameter", "YParameter", "Fish1", "Fish2")
#Dumb but it throws an error if S = 0
startx <- 0
starty <- 0
if(paramx == 2){startx <- .001}
if(paramy == 2){starty <- .001}
#Create list of all combinations of the two paramters
paramcombos <- expand.grid(x_parameter = seq(from = startx, to = maxx, length.out = 11),
y_parameter = seq(from = starty, to = maxy, length.out = 11))
for(i in 1:nrow(paramcombos)){
params_Default <- params_dispersal
#Change params to be the
params_Default[paramx] <- paramcombos$x_parameter[i]
params_Default[(paramy + 9)] <- paramcombos$y_parameter[i]
#
params_new <- c(r_1 = params_Default$r_1, s_1 = params_Default$s_1, h_1 = params_Default$h_1, k_1 = params_Default$k_1,
w_1 = params_Default$w_1, c_1 = params_Default$c_1, d_1 = params_Default$d_1, i_1 = params_Default$i_1,
rho_1 =  params_Default$rho_1,
r_2 = params_Default$r_2, s_2 = params_Default$s_2, h_2 = params_Default$h_2, k_2 = params_Default$k_2,
w_2 = params_Default$w_2, c_2 = params_Default$c_2, d_2 = params_Default$d_2, i_2 = params_Default$i_2,
rho_2 = params_Default$rho_2)
times <- timespan
starting_params <- starting_defaultparams #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=starting_params,
times=times,
parms=params_new
) %>%
as.data.frame() -> out_Diff
finalstatus <- out_Diff[nrow(out_Diff),]
# out_Diff %>%
# filter(times == 100)
outcomes[i,] <- c(paramcombos$x_parameter[i], paramcombos$y_parameter[i], finalstatus$F_1, finalstatus$F_2)
}
finalDynamics <- outcomes %>%
mutate(Result = case_when(
Fish1 >= .25 & Fish2 >= .25 ~ "Both",
Fish1 >= .25 & Fish2 < .25 ~ "Only Pop1",
Fish1 < .25 & Fish2 >= .25 ~ "Only Pop2",
Fish1 < .25 & Fish2 < .25 ~ "Neither"))
cols <- c("green", "orange", "yellow", "black")
# finalDynamics$Result <- as.character(finalDynamics$Result)
finalDynamics$Result <- factor(finalDynamics$Result, levels = c("Both", "Only Pop1", "Only Pop2", "Neither"))
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
xlim(0, 1) +
ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE,
expand=c(0,0)) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
xlim(0, 1) +
ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE,
expand=c(0,0)) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
xlim(0, 1) +
ylim(0, 1) +
}
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE,
expand=c(0,0)) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
xlim(0, 1) +
ylim(0, 1)
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
xlim(0, 1) +
ylim(0, 1) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
xlim(0, 1) +
ylim(0, 1) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_bw()
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
xlim(0, 1) +
ylim(0, 1) +
theme_bw()
seq(0,1,10)
?seq
seq(from = 0, to = 1, length.out = 10)
breaks = seq(from = 0, to = 1, length.out = 11)
seq(from = 0, to = 1, length.out = 11)
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(expand = c(0,0), breaks = seq(from = 0, to = 1, length.out = 11)) +
scale_y_continuous(expand = c(0,0),  breaks = seq(from = 0, to = 1, length.out = 11)) +
# xlim(0, 1) +
# ylim(0, 1) +
theme_bw()
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
# scale_x_continuous(expand = c(0,0), breaks = seq(from = 0, to = 1, length.out = 11)) +
# scale_y_continuous(expand = c(0,0),  breaks = seq(from = 0, to = 1, length.out = 11)) +
xlim(0, 1) +
ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
# scale_x_continuous(expand = c(0,0), breaks = seq(from = 0, to = 1, length.out = 11)) +
# scale_y_continuous(expand = c(0,0),  breaks = seq(from = 0, to = 1, length.out = 11)) +
# xlim(0, 1) +
# ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())
finalDynamics
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(limits = c(0,1), expand = c(0,0)) +
scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
# scale_x_continuous(expand = c(0,0), breaks = seq(from = 0, to = 1, length.out = 11)) +
# scale_y_continuous(expand = c(0,0),  breaks = seq(from = 0, to = 1, length.out = 11)) +
# xlim(0, 1) +
# ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(limits = c(0,1), expand = c(0,0)) +
scale_y_continuous(limits = c(-0.5,1.5), expand = c(0,0)) +
# scale_x_continuous(expand = c(0,0), breaks = seq(from = 0, to = 1, length.out = 11)) +
# scale_y_continuous(expand = c(0,0),  breaks = seq(from = 0, to = 1, length.out = 11)) +
# xlim(0, 1) +
# ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())
#Binned Colors
ggplot(finalDynamics, aes(XParameter, YParameter)) +
geom_tile(aes(fill = Result), width=1) +
scale_fill_manual(
values = c("Both" = "green",
"Only Pop1" = "orange",
"Only Pop2" = "yellow",
"Neither" = "black"),
name = "",
# values = c("green", "orange", "yellow", "black"),
# labels = c("Both", "Only Pop1", "Only Pop2", "Neither"),
drop = FALSE) +
xlab(paramlist[paramx]) +
ylab(paramlist[paramy]) +
scale_x_continuous(limits = c(0,1), expand = c(0,0)) +
scale_y_continuous(limits = c(-0.05,1.05), expand = c(0,0)) +
# scale_x_continuous(expand = c(0,0), breaks = seq(from = 0, to = 1, length.out = 11)) +
# scale_y_continuous(expand = c(0,0),  breaks = seq(from = 0, to = 1, length.out = 11)) +
# xlim(0, 1) +
# ylim(0, 1) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_blank())
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf", cache = TRUE)
library(deSolve)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(kableExtra)
library(FME)
library(ggpubr)
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Soc_Ecol_Model")
options(tinytex.verbose = TRUE)
knitr::include_graphics("FigConceptual.png")
param_names <- c("r_1", "s_1", "h_1", "k_1", "w_1", "c_1", "d_1", "i_1", "rho_1",
"r_2", "s_2", "h_2", "k_2", "w_2", "c_2", "d_2", "i_2", "rho_2")
params_default <- data.frame(r_1 = 0.35, s_1 = 0.8, h_1 = 0.5, k_1 = 1.014, w_1 = 0.35, c_1 = 1.5, d_1 = 0.5, i_1 = 0.2, rho_1 = 0.5,
r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 1.014, w_2 = 0.35, c_2 = 1.5, d_2 = 0.5, i_2 = 0.2, rho_2 = 0.5)
starting_defaultparams <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
timespan <- seq(from = 0, to = 100, by = .1)
Bauch.Coupled <- function (t, y, params) {
## first extract the state variables
F_1 <- y[1] #Fish Pop var
F_2 <- y[2] #Fish Pop var
X_1 <- y[3] #conservationist var
X_2 <- y[4] #conservationist var
#TT <- y[5]
## now extract the parameters
r_1 <- params["r_1"] # Net growth/fecundity
s_1 <- params["s_1"] # supply and demand
h_1 <- params["h_1"] # Harvesting efficiency
k_1 <- params["k_1"] # Social learning rate
w_1 <- params["w_1"] # conservation costs
c_1 <- params["c_1"] # rarity valuation param
d_1 <- params["d_1"] # social norm strength
r_2 <- params["r_2"] # Net growth/fecundity
s_2 <- params["s_2"] # supply and demand
h_2 <- params["h_2"] # Harvesting efficiency
k_2 <- params["k_2"] # Social learning rate
w_2 <- params["w_2"] # conservation costs
c_2 <- params["c_2"] # rarity valuation param
d_2 <- params["d_2"] # social norm strength
i_1 <- params["i_1"] # Inflow of fish from pop 2 to pop 1
i_2 <- params["i_2"] # Inflow of fish from pop 1 to pop 2
rho_1 <- params["rho_1"] # Influence of pop 2 on pop 1
rho_2 <- params["rho_2"] # Influence of pop 1 on pop 2
## now code the model equations
dF_1dt <-  r_1 * F_1 * (1-F_1) - (h_1 * F_1 * (1-X_1))/(F_1+s_1) - i_2 * F_1 + i_1 * F_2
dF_2dt <-  r_2 * F_2 * (1-F_2) - (h_2 * F_2 * (1-X_2))/(F_2+s_2) - i_1 * F_2 + i_2 * F_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(F_1 + c_1) - w_1 + d_1*(2*X_1 - 1) + rho_1 * (2*X_2 - 1))
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(F_2 + c_2) - w_2 + d_2*(2*X_2 - 1) + rho_2 * (2*X_1 - 1))
## combine results into a single vector
dydt <- c(dF_1dt, dF_2dt, dX_1dt, dX_2dt)
## return result as a list!
list(dydt)
}
params_BauchCycles <- data.frame(r_1 = 0.06, s_1 = 0.8, h_1 = 0.1, k_1 = 0.17, w_1 = 1, c_1 = 0.6, d_1 = 0.3, i_1 = 0, rho_1 = 0,
r_2 = 0.06, s_2 = 0.8, h_2 = 0.1, k_2 = 0.17, w_2 = 1, c_2 = 0.6, d_2 = 0.3, i_2 = 0, rho_2 = 0) #USE!!!!!
params_noCycles <- data.frame(r_1 = 0.06, s_1 = 0.8, h_1 = 0.1, k_1 = 0.17, w_1 = 1, c_1 = 0.6, d_1 = 0.3, i_1 = 0.2, rho_1 = 0.3,
r_2 = 0.06, s_2 = 0.8, h_2 = 0.1, k_2 = 0.17, w_2 = 1, c_2 = 0.6, d_2 = 0.3, i_2 = 0.2, rho_2 = 0.3) #USE!!!!!
times <- seq(from = 0, to = 1000, by = 1)
xstart <- starting_defaultparams
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_BauchCycles
) %>% as.data.frame() -> out_cycles
out_cycles %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
ggtitle('a)') +
labs(x='time (yr)',y='pop') #theme(plot.title = element_text(vjust = - 10)) #Add if you need to adjust title
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_noCycles
) %>% as.data.frame() -> out_nocycles
out_nocycles %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
ggtitle('b)') +
labs(x='time (yr)',y='pop')
#
# params_Bauch2 <- params_default
#
# times <- timespan
# xstart <- starting_defaultparams # See supplemental data for other starting params
#
# ode(
#   func=Bauch.Coupled,
#   y=xstart,
#   times=times,
#   parms=params_Bauch2
# ) %>%
#   as.data.frame() -> out_Coupled
#
# out_Coupled %>%
#   gather(variable,value,-time) %>%
#   ggplot(aes(x=time,y=value,color=variable))+
#   geom_line(size=1)+
#   theme_classic()+
#   ggtitle('c)') +
#   labs(x='time (yr)',y='pop')
params_dispersal <- data.frame(r_1 = 0.40, s_1 = 0.8, h_1 = 0.25, k_1 = 1.014, w_1 = 0.2, c_1 = 1.5, d_1 = 0.5, i_1 = 0.2, rho_1 = 0.5,
r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 1.014, w_2 = 0.35, c_2 = 1.5, d_2 = 0.5, i_2 = 0.2, rho_2 = 0.1)
giveparams <- data.frame(matrix(, nrow = 9, ncol = 4))
colnames(giveparams) <- c("Parameter", "Population_1", "Population_2", "Def")
giveparams$Parameter <- c("r", "s", "h", "k", "$\\omega$", "c", "d", "i", "$\\rho$")
giveparams$Population_1 <- c(params_dispersal[1:9])
giveparams$Population_2 <- c(params_dispersal[10:18])
giveparams$Def <- c("Fish net growth",
"Supply and demand",
"Harvesting efficiency",
"Social learning rate",
"Conservation cost",
"Rarity valuation",
"Social norm strength (within pop)",
"Fish immigration (from patch)",
"Social norm strength (opposite pop)")
knitr::kable(giveparams, format = "pandoc", booktabs = TRUE, caption = "Default parameter values used in this analysis")
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_dispersal
) %>%
as.data.frame() -> out_dispersion
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_dispersal
) %>%
as.data.frame() -> out_dispersion
out_dispersion %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
labs(x='time (yr)',y='pop')
