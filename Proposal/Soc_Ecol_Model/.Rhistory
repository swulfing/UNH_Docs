plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
nrow=3, left = yleft, bottom = bottom),
p_legend,
ncol=2,widths=c(2, 0.3))
}
gridFxn(StartParams, rhoS, dS)
gridFxn <- function(xstart, rhoparams, dparams){
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[16] <- rhoparams[j]
times <- timespan
#xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "", limits = c(0, 500, 950)) +
scale_y_discrete(name = "", limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
scale_discrete_manual(values=cbbPalette, aesthetics = "colour", name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("\u03C1", " 1 = ", params_Default[7], "\u03C1", " 2 = ", params_Default[16])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "", limits = c(0, 500, 950)) +
scale_y_discrete(name = "", limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
#theme(legend.position = "none") +
ggtitle(paste("\u03C1", "1=", params_Default[7], "\u03C1", "2=", params_Default[16])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
}
}
yleft = richtext_grob("Population", rot=90)
bottom = richtext_grob(
text = paste('Time (year)',  "\n F=", xstart[1], "X=", xstart[3])
)
p_legend <- get_legend(plotList[[1]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
plotList[[7]] + theme(legend.position="none"),
plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
nrow=3, left = yleft, bottom = bottom),
p_legend,
ncol=2,widths=c(2, 0.3))
}
gridFxn(StartParams, rhoS, dS)
timespan <- seq(from = 0, to = 150, by = 1)
gridFxn <- function(xstart, rhoparams, dparams){
plotList <- list()
k <- 0
for(i in 1:length(dparams)){
params_Default <- params_list
params_Default[7] <- dparams[i]
#params_Default[16] <- dparams[i]
for(j in 1:length(rhoparams)){
k <- k+1
#params_Default[9] <- rhoparams[j]
params_Default[16] <- rhoparams[j]
times <- timespan
#xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k ==1){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "", limits = c(0, 500, 950)) +
scale_y_discrete(name = "", limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
scale_discrete_manual(values=cbbPalette, aesthetics = "colour", name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2]))) +
ggtitle(paste("\u03C1", " 1 = ", params_Default[7], "\u03C1", " 2 = ", params_Default[16])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
scale_x_discrete(name = "", limits = c(0, 500, 950)) +
scale_y_discrete(name = "", limits = c(0, 0.5, 0.95)) +
# scale_x_discrete(name = "Time (Year)", limits = c(0,750)) +
# scale_y_discrete(name = "Population", limits = c(0, 0.5, 1)) +
#theme(legend.position = "none") +
ggtitle(paste("\u03C1", "1=", params_Default[7], "\u03C1", "2=", params_Default[16])) +
theme(plot.title = element_text(size=7))
plotList[[k]] <- p
}
}
}
yleft = richtext_grob("Population", rot=90)
bottom = richtext_grob(
text = paste('Time (year)',  " F=", xstart[1], "X=", xstart[3])
)
p_legend <- get_legend(plotList[[1]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
plotList[[7]] + theme(legend.position="none"),
plotList[[8]] + theme(legend.position="none"),
plotList[[9]] + theme(legend.position="none"),
nrow=3, left = yleft, bottom = bottom),
p_legend,
ncol=2,widths=c(2, 0.3))
}
View(mtcars)
RatnaData <- read.csv("C:/Users/Sophi/esktop/RatnaData.csv")
RatnaData <- read.csv("C:/Users/Sophi/Desktop/RatnaData.csv")
View(RatnaData)
boxplot(Stasiun.Zona ~ pH.Air, data=RatnaData, main="pH Air",
xlab="Stasiun", ylab="pH Air")
class(RatnaData$pH.Air)
boxplot(pH.Air ~ Stasiun.Zona, data=RatnaData, main="pH Air",
xlab="Stasiun", ylab="pH Air")
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air")
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", cex.axis=.5)
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", las = 3)
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", las = 3, cex = 0.5)
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", las = 3, cex = 0.5)
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", las = 3, cex.axis = 0.5)
RatnaData <- read.csv("C:/Users/Sophi/Desktop/RatnaData.csv")
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", las = 3, cex.axis = 0.5)
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", cex.axis = 0.5)
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", cex.axis = 1)
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", cex.axis = .5)
# Pilih folder dan dokumen csv di komputer
RatnaData <- read.csv("C:/Users/Sophi/Desktop/RatnaData.csv")
# Lihat Data
View(RatnaData)
boxplot(pH.Air ~ Stasiun.Zona, data=RatnaData, main="pH Air",
xlab="Stasiun", ylab="pH Air")
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", cex.axis = .5)
# Pilih folder dan dokumen csv di komputer
RatnaData <- read.csv("C:/Users/Sophi/Desktop/RatnaData.csv")
# Lihat Data
View(RatnaData)
boxplot(pH.Air ~ Stasiun.Zona, data=RatnaData, main="pH Air",
xlab="Stasiun", ylab="pH Air")
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", cex.axis = .5)
# Pilih folder dan dokumen csv di komputer
RatnaData <- read.csv("C:/Users/Sophi/Desktop/RatnaData.csv")
# Lihat Data
View(RatnaData)
# Membuat grafik Kamu berubah huruf besar:
# boxplot(AXIS Y ~ AXIS X, data = NAMA DATA, main = JUDUL UTAMA, xlab = LABEL AXIS X, ylab = LABEL AXIS Y, cex.axis = UKURAN HURUF DI AXIS)
boxplot(pH.Air ~ Stasiun.Zona, data=RatnaData, main="pH Air",
xlab="Stasiun", ylab="pH Air")
boxplot(pH.Air ~ Desa, data=RatnaData, main="pH Air",
xlab="Desa", ylab="pH Air", cex.axis = .5)
?write.csv
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf", cache = TRUE)
library(deSolve)
library(tidyverse)
library(ggplot2)
library(gridExtra)
#library(kableExtra)
library(FME)
library(ggpubr)
library(gridtext)
#setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Soc_Ecol_Model")
params_list <- data.frame(r_1 = 0.16, s_1 = 0.8, h_1 = .25, k_1 = 0.17, w_1 = 1.44, c_1 = 0.5, d_1 = 0.3, m_1 = 0.01, rho_1 = 0.01,
r_2 = 0.16, s_2 = 0.8, h_2 = .25, k_2 = 0.17, w_2 = 1.44, c_2 = 0.5, d_2 = 0.3, m_2 = 0.01, rho_2 = 0.01)
cbbPalette <- c("#E69F00", "#009E73", "#567de9", "#D55E00") #F_1, F_2, X_1, X_2
# #WORKED - MINIMUM GROWTH RATE USED IN THAMPI
# params_dispersal <- data.frame(r_1 = 0.16, s_1 = 0.8, h_1 = 0.5, k_1 = 0.17, w_1 = 1.44, c_1 = 0.6, d_1 = 0.3, m_1 = 0, rho_1 = 0,
#                           r_2 = 0.16, s_2 = 0.8, h_2 = 0.5, k_2 = 0.17, w_2 = 1.44, c_2 = 0.6, d_2 = 0.3, m_2 = 0, rho_2 = 0)
#Extensions of Bauch Default but with my params I want changed. Goal: get this to oscillate
# params_dispersal <- data.frame(r_1 = 0.35, s_1 = 0.8, h_1 = 0.5, k_1 = 0.17, w_1 = 1, c_1 = 1.68, d_1 = 0.3, m_1 = 0, rho_1 = 0,
#                           r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 0.17, w_2 = 1, c_2 = 1.68, d_2 = 0.3, m_2 = 0, rho_2 = 0)
#Extension of Bauch Default
# params_dispersal <- data.frame(r_1 = 0.06, s_1 = 0.8, h_1 = 0.1, k_1 = 0.17, w_1 = 1, c_1 = 0.6, d_1 = 0.3, m_1 = 0, rho_1 = 0,
#                           r_2 = 0.06, s_2 = 0.8, h_2 = 0.1, k_2 = 0.17, w_2 = 1, c_2 = 0.6, d_2 = 0.3, m_2 = 0, rho_2 = 0)
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
timespan <- seq(from = 0, to = 1000, by = 1)
options(tinytex.verbose = TRUE)
giveparams <- data.frame(matrix(, nrow = 9, ncol = 4))
colnames(giveparams) <- c("Parameter", "Population_1", "Population_2", "Definition")
giveparams$Parameter <- c("r", "s", "h", "k", "$\\omega$", "c", "d", "m", "$\\rho$")
giveparams$Population_1 <- c(params_list[1:9])
giveparams$Population_2 <- c(params_list[10:18])
colnames(giveparams) <- c("Parameter", "Population 1", "Population 2", "Definition")
giveparams$Definition <- c("Fish net growth",
"Supply and demand",
"Harvesting efficiency",
"Rate of sampling opinions or social interaction",
"Conservation cost",
"Rarity valuation",
"Strength of social influence (within population)",
"Fish movement (from opposite patch)",
"Strength of social influence (from opposite population)")
knitr::kable(giveparams, format = "pandoc", booktabs = TRUE, caption = "(ref:defaultparamtable) \\label{DefaultParamTable}")
##Maybe see what proportion of people can actually be fishing in this system to make it sustainable
Bauch.Coupled <- function (t, y, params) {
## first extract the state variables
F_1 <- y[1] #Fish Pop var
F_2 <- y[2] #Fish Pop var
X_1 <- y[3] #conservationist var
X_2 <- y[4] #conservationist var
#TT <- y[5]
## now extract the parameters
r_1 <- params["r_1"] # Net growth/fecundity
s_1 <- params["s_1"] # supply and demand
h_1 <- params["h_1"] # Harvesting efficiency
k_1 <- params["k_1"] # Social learning rate
w_1 <- params["w_1"] # conservation costs
c_1 <- params["c_1"] # rarity valuation param
d_1 <- params["d_1"] # social norm strength
m_1 <- params["m_1"] # Inflow of fish from pop 2 to pop 1
rho_1 <- params["rho_1"] # Influence of pop 2 on pop 1
r_2 <- params["r_2"] # Net growth/fecundity
s_2 <- params["s_2"] # supply and demand
h_2 <- params["h_2"] # Harvesting efficiency
k_2 <- params["k_2"] # Social learning rate
w_2 <- params["w_2"] # conservation costs
c_2 <- params["c_2"] # rarity valuation param
d_2 <- params["d_2"] # social norm strength
m_2 <- params["m_2"] # Inflow of fish from pop 1 to pop 2
rho_2 <- params["rho_2"] # Influence of pop 1 on pop 2
## now code the model equations
dF_1dt <-  r_1 * F_1 * (1-F_1) - (h_1 * F_1 * (1-X_1))/(F_1+s_1) - m_2 * F_1 + m_1 * F_2
dF_2dt <-  r_2 * F_2 * (1-F_2) - (h_2 * F_2 * (1-X_2))/(F_2+s_2) - m_1 * F_2 + m_2 * F_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(F_1 + c_1) - w_1 + d_1*(2*X_1 - 1) + rho_1 * (2*X_2 - 1))
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(F_2 + c_2) - w_2 + d_2*(2*X_2 - 1) + rho_2 * (2*X_1 - 1))
## combine results into a single vector
dydt <- c(dF_1dt, dF_2dt, dX_1dt, dX_2dt)
## return result as a list!
list(dydt)
}
params_Bauch2 <- params_list
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch2
) %>%
as.data.frame() -> out_Coupled
# out_Coupled %>%
#   gather(variable,value,-time) %>%
#   ggplot(aes(x=time,y=value,color=variable))+
#   geom_line(size=1)+
#   theme_classic()+
#   scale_colour_manual(values=cbbPalette) +
#   labs(x='Time (yr)',y='Population') +
#   theme(legend.title=element_blank()) +
#   scale_discrete_manual(values=cbbPalette, aesthetics = "colour",name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2])))
#mparams <- c(0.01, 0.05, 0.1)
rhoparams <- c(0.01, 0.25, 0.5)
plotList <- list()
k <- 0
titlesList <- c("a)", "b)", "c)", "d)", "e)", "f)")
for(i in 1:length(rhoparams)){
k <- k+1
params_Default <- params_list
params_Default[9] <- rhoparams[i]
params_Default[18] <- rhoparams[i]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k == 1) {
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "", subtitle = titlesList[k]) +
theme(plot.title = element_text(hjust = .5))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = NULL, subtitle = titlesList[k])
plotList[[k]] <- p
}
}
for(i in 1:length(rhoparams)){
k <- k+1
params_Default <- params_list
params_Default[9] <- rhoparams[i]
#params_Default[18] <- rhoparams[i]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k == 4) {
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "", subtitle = titlesList[k]) +
theme(plot.title = element_text(hjust = .5))
plotList[[k]] <- p
}else if(k == 6){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = NULL, subtitle = titlesList[k]) +
scale_discrete_manual(values=cbbPalette, aesthetics = "colour",name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2])))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = NULL, subtitle = titlesList[k])
plotList[[k]] <- p
}
}
#function to extract the legend of a ggplot; source:
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
get_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
#arranging the legend and plots in a grid:
p_legend <- get_legend(plotList[[6]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
nrow=3),
p_legend,
ncol=2,widths=c(2, 0.3))
params_list <- data.frame(r_1 = 0.40, s_1 = 0.8, h_1 = 0.25, k_1 = 1.014, w_1 = 0.2, c_1 = 1.5, d_1 = 0.5, m_1 = 0.2, rho_1 = 0.5,
r_2 = 0.35, s_2 = 0.8, h_2 = 0.5, k_2 = 1.014, w_2 = 0.35, c_2 = 1.5, d_2 = 0.5, m_2 = 0.2, rho_2 = 0.1)
giveparams <- data.frame(matrix(, nrow = 9, ncol = 4))
colnames(giveparams) <- c("Parameter", "Population_1", "Population_2", "Definition")
giveparams$Parameter <- c("r", "s", "h", "k", "$\\omega$", "c", "d", "m", "$\\rho$")
giveparams$Population_1 <- c(params_list[1:9])
giveparams$Population_2 <- c(params_list[10:18])
colnames(giveparams) <- c("Parameter", "Population 1", "Population 2", "Definition")
giveparams$Definition <- c("Fish net growth",
"Supply and demand",
"Harvesting efficiency",
"Rate of sampling opinions or social interaction",
"Conservation cost",
"Rarity valuation",
"Strength of social influence (within population)",
"Fish movement (from opposite patch)",
"Strength of social influence (from opposite population)")
knitr::kable(giveparams, format = "pandoc", booktabs = TRUE, caption = "(ref:newparamtable) \\label{NewParamTable}")
k <- 0
modeled_data <- data.frame(matrix(ncol=4,nrow=0, dimnames=list(NULL, c("Rho_1", "Rho_2", "F1_Final", "F2_Final"))))
rhos <- seq(from = 0, to = .5, by = .01)
timespan <- seq(from = 0, to = 200, by = 1)
for(i in 1:length(rhos)){
params_Default <- params_list
params_Default[9] <- rhos[i]
for(j in 1:length(rhos)){
k <- k+1
#params_Default[9] <- rhoS[j]
params_Default[18] <- rhos[j]
times <- timespan
yStart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=yStart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
modeled_data[k,] <- c(rhos[i], rhos[j], out_Diff$F_1[max(out_Diff$time)], out_Diff$F_2[max(out_Diff$time)])
}
}
write.csv(modeled_data, "rhoModel.csv")
ggplot(modeled_data, aes(x = Rho_2, y = Rho_1, fill = F1_Final)) + geom_tile(width=.05) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(growthRate$lambda_new)),
midpoint = 0.1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Rho 2", expand=c(0,0)) + #, breaks = c(1, 3, 6, 9, 12)) +
scale_y_continuous(name = "Rho 1", expand=c(0,0))
# labs(fill = "Final Population") +
# geom_segment(aes(x = 2.5, y = .075, xend = 2.5, yend = 0.105), size = .5, color = "#5A5A5A") +
# geom_segment(aes(x = 11.5, y = .015, xend = 12.5, yend = 0.015), size = .5, color = "#5A5A5A") +
# geom_step(data = paretospagheto , aes(x=Frequency, y=PercentChange), size = .5, color = "#5A5A5A") +
# geom_text(x=8, y=.07, label="Population Increasing") +
# geom_text(x=3.5, y=.015, label="Population Decreasing")
ggplot(modeled_data, aes(x = Rho_2, y = Rho_1, fill = F2_Final)) + geom_tile(width=.05) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(growthRate$lambda_new)),
midpoint = 0.1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Rho 2", expand=c(0,0)) + #, breaks = c(1, 3, 6, 9, 12)) +
scale_y_continuous(name = "Rho 1", expand=c(0,0))
# labs(fill = "Final Population") +
# geom_segment(aes(x = 2.5, y = .075, xend = 2.5, yend = 0.105), size = .5, color = "#5A5A5A") +
# geom_segment(aes(x = 11.5, y = .015, xend = 12.5, yend = 0.015), size = .5, color = "#5A5A5A") +
# geom_step(data = paretospagheto , aes(x=Frequency, y=PercentChange), size = .5, color = "#5A5A5A") +
# geom_text(x=8, y=.07, label="Population Increasing") +
# geom_text(x=3.5, y=.015, label="Population Decreasing")
modeled_data <- read.csv("rhoModel.csv")
ggplot(modeled_data, aes(x = Rho_2, y = Rho_1, fill = F1_Final)) + geom_tile(width=.05) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(growthRate$lambda_new)),
midpoint = 0.1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Rho 2", expand=c(0,0)) + #, breaks = c(1, 3, 6, 9, 12)) +
scale_y_continuous(name = "Rho 1", expand=c(0,0))
ggplot(modeled_data, aes(x = Rho_2, y = Rho_1, fill = F2_Final)) + geom_tile(width=.05) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(growthRate$lambda_new)),
midpoint = 0.1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Rho 2", expand=c(0,0)) + #, breaks = c(1, 3, 6, 9, 12)) +
scale_y_continuous(name = "Rho 1", expand=c(0,0))
