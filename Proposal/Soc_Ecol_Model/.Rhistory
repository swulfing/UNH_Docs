geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(times %in% (events * dt)){
h <-  .15
}else{h <-  0.075}
print(h)
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
events
dt
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(times %in% (events * dt)){
h <-  .15
}else{h <-  0.075}
cat("h:", h, "  t:", times, "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
dt = times[2] - times[1]
dt
times[2]
times[1]
times
events
Bauch.shocks <- function(times, y, param) {
dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(times %in% (events * dt)){
h <-  .15
}else{h <-  0.075}
cat("h:", h, "  t:", times, "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
times <- seq(from = 0, to = end_time, by = 1)
times
events
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(times %in% (events * dt)){
h <-  .15
}else{h <-  0.075}
cat("h:", h, "  t:", times, "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
#dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(round(times, digits = 0) %in% events * dt){ #if(times %in% (events * dt)){
h <-  .15
}else{h <-  0.075}
cat("h:", h, "  t:", times, "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
Bauch.shocks <- function(times, y, param) {
#dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(round(times, digits = 0) %in% events * dt){ #if(times %in% (events * dt)){
h <-  .15
}else{h <-  0.075}
cat("h:", h, "  t:", round(times, digits = 0), "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
out1
colnames(out1) <- c("time", "P1", "x1")
out1
out_compare <- cbind(out1, out2)
out_compare
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Soc_Ecol_Model")
library(deSolve)
library(tidyverse)
library(ggplot2)
library(gridExtra)
Bauch.Model <- function (t, y, params) {
## first extract the state variables
P <- y[1] #Fish Pop var
X <- y[2] #conservationist var
#TT <- y[5]
## now extract the parameters
R <- params["R"] # Net growth/fecundity
s <- params["s"] # supply and demand
h <- params["h"] # Harvesting efficiency
k <- params["k"] # Social learning rate
w <- params["w"] # conservation costs
c <- params["c"] # rarity valuation param
d <- params["d"] # social norm strength
## now code the model equations
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
## combine results into a single vector
dydt <- c(dPdt, dXdt)
## return result as a list!
list(dydt)
}
# Intro shocks These would be short term (perhaps 1 year) increases in the h parameter.
params_Bauch <- c(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P = 0.406, X = .24) # See supplemental data for other starting params
ode(
func=Bauch.Model,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
#dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(round(times, digits = 0) %in% events * dt){ #if(times %in% (events * dt)){
h <-  .15
}else{h <-  0.075}
#cat("h:", h, "  t:", round(times, digits = 0), "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
colnames(out1) <- c("time", "P1", "X1")
out_compare <- cbind(out1, out2) %>%
mutate(Pdiff = (P - P1)/ P1) %>%
mutate(Xdiff = (X - X1)/ X1)
colnames(out1) <- c("time", "P1", "X1")
colnames(out1) <- c("time", "P1", "X1")
out_both <- cbind(out1, out2)
out_compare <- out_both %>%
mutate(Pdiff = (P - P1)/ P1) %>%
mutate(Xdiff = (X - X1)/ X1)
out_both
colnames(out1) <- c("time1", "P1", "X1")
out_both <- cbind(out1, out2)
out_compare <- out_both %>%
mutate(Pdiff = (P - P1)/ P1) %>%
mutate(Xdiff = (X - X1)/ X1)
out_compare
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
#dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(round(times, digits = 0) %in% events * dt){ #if(times %in% (events * dt)){
h <-  .15
}else{h <-  0.075}
cat("h:", h, "  t:", round(times, digits = 0), "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
#dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(round(times, digits = 0) %in% events){ #if(times %in% (events * dt)){
h <-  .15
}else{h <-  0.075}
cat("h:", h, "  t:", round(times, digits = 0), "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
out2
Bauch.Model <- function (t, y, params) {
## first extract the state variables
P <- y[1] #Fish Pop var
X <- y[2] #conservationist var
#TT <- y[5]
## now extract the parameters
R <- params["R"] # Net growth/fecundity
s <- params["s"] # supply and demand
h <- params["h"] # Harvesting efficiency
k <- params["k"] # Social learning rate
w <- params["w"] # conservation costs
c <- params["c"] # rarity valuation param
d <- params["d"] # social norm strength
print(times)
## now code the model equations
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
## combine results into a single vector
dydt <- c(dPdt, dXdt)
## return result as a list!
list(dydt)
}
# Intro shocks These would be short term (perhaps 1 year) increases in the h parameter.
params_Bauch <- c(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P = 0.406, X = .24) # See supplemental data for other starting params
ode(
func=Bauch.Model,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out1
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
#dt = times[2] - times[1]
with(as.list(c(y, param)), {
if(round(times, digits = 0) %in% events){ #if(times %in% (events * dt)){
h <-  1
}else{h <-  0.075}
cat("h:", h, "  t:", round(times, digits = 0), "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
#dt = times[2] - times[1]
with(as.list(c(y, param)), {
# if(round(times, digits = 0) %in% events){ #if(times %in% (events * dt)){
#   h <-  1
# }else{h <-  0.075}
cat("h:", h, "  t:", round(times, digits = 0), "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
param <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5, h = 0.075)
y <- c(P = 0.406, X = .24)
Bauch.shocks <- function(times, y, param) {
#dt = times[2] - times[1]
with(as.list(c(y, param)), {
# if(round(times, digits = 0) %in% events){ #if(times %in% (events * dt)){
#   h <-  1
# }else{h <-  0.075}
cat("h:", h, "  t:", round(times, digits = 0), "\n")
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
return(list(c(dPdt, dXdt)))
})}
times <- seq(from = 0, to = end_time, by = 1)
out2 <- as.data.frame(ode(func = Bauch.shocks, y = y, times = times, parms = param))
out2 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
params_list <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, e_1 = 0.05, i_1 = 0.05, prop_1 = 0.1,
R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.5, e_2 = 0.05, i_2 = 0.05, prop_2 = 0.1)
giveparams <- data.frame(matrix(, nrow = 10, ncol = 3))
colnames(giveparams) <- c("Parameter", "Population_1", "Population_2")
giveparams <- data.frame(matrix(, nrow = 10, ncol = 4))
colnames(giveparams) <- c("Parameter", "Population_1", "Population_2", "Def")
giveparams$Parameter <- c("r", "s", "h", "k", "w", "c", "d", "e", "i", "prop")
giveparams
params_list[1:10]
giveparams$Population_1 <- c(params_list[1:10])
giveparams
giveparams$Population_2 <- c(params_list[-10])
giveparams$Population_2 <- c(params_list[11:20])
giveparams
giveparams <- data.frame(matrix(, nrow = 10, ncol = 4))
colnames(giveparams) <- c("Parameter", "Population_1", "Population_2", "Def")
giveparams$Parameter <- c("r", "s", "h", "k", "w", "c", "d", "e", "i", "prop")
giveparams$Population_1 <- c(params_list[1:10])
giveparams$Population_2 <- c(params_list[11:20])
giveparams$Def <- c("Fish net growth",
"Supply and demand",
"Harvesting efficiency",
"Social learning rate",
"Conservation cost",
"Rarity valuation",
"Social norm strength (within pop)",
"Fish emigration (from patch)",
"Fish immigration (from opposite patch)",
"Social norm strength (opposite pop)")
giveparams
givestart <- data.frame(matrix(, nrow = 2, ncol = 3))
colnames(givestart) <- c("Parameter", "Population_1", "Population_2")
givestart$Parameter <- c("F", "X")
givestart$Population_1 <- c(starting_params[1], starting_params[3])
givestart$Population_2 <- c(starting_params[2], starting_params[4])
starting_params <- c(P_1 = 0.406, P_2 = 0.406, X_1 = .24, X_2 = .24)
givestart$Population_1 <- c(starting_params[1], starting_params[3])
givestart$Population_2 <- c(starting_params[2], starting_params[4])
givestart
tinytex::reinstall_tinytex(repository = "illinois")
BauchModel_10.log
tinytex::install_tinytex()
tinytex::install_tinytex()
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Soc_Ecol_Model")
rm(list=ls())
params_list <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, e_1 = .05, i_1 = .05, prop_1 = 0.1,
R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.5, e_2 = .05, i_2 = .05, prop_2 = 0.1)
params_list$R_1
params_list
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
head(mydata)
plot(admit ~ gre + gpa, data = mydata, family = 'binomial')
summary (mylogit)
mylogit <- glm(formula = admit ~ gre + gpa, data = mydata, family = 'binomial')
summary(mylogit)
