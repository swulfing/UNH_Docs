for(i in 1:3){
surviveTable[i,2] <- sum(A[,i])
}
surviveTable[4,2] <- A[4,4]
surviveTable[5,2] <- A[1,4]/((375000+27000)/2)
lifetable1 <- left_join(lifetable, surviveTable, by = 'Stage')
#colnames(lifetable) <- stringr::str_replace_all(colnames(lifetable), "\\n", "<br>")
knitr::kable(lifetable1, format = "latex", booktabs = TRUE, caption = "(ref:lifetablecap) \\label{lifetable}", col.names = c("Stage", "Stable Stage Distribution (Dominant Eigenvector)", "Reproductive Value (Left Eigenvector)", "Survivability")) %>%
column_spec(2:3, width = "4.5cm") %>%
kable_styling(latex_options="scale_down")
rates <- c(0, 0, 0, 0, 0)
for(i in 1:(length(rates)-1)){
#First need to do the stage 4 and larval differently
if(i == 4){
incr <- 0.01
testMtx <- A
testMtx[4,4] <- A[4,4] + A[4,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[4,4] <- A[4,4] + A[4,4] * incr
}
rates[4] <- incr
incr <- 0.01
testMtx <- A
testMtx[1,4] <- A[1,4] + A[1,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[1,4] <- A[1,4] + A[1,4] * incr
}
rates[5] <- incr
}
else{
incr <- 0.01
testMtx <- A
testMtx[,i] <- A[,i] + A[,i] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[,i] <- A[,i] + A[,i] * incr
}
rates[i] <- incr
}}
rates_percent <- rates * 100
stage_break <- data.frame(matrix(data = (c("1", "2", "3", "4", "Larval", as.numeric(rates_percent))), nrow = 5, ncol = 2))
colnames(stage_break) <- c("Stage", "Percent")
stage_break$Percent <- as.numeric(stage_break$Percent)
stage_break$Stage <- factor(stage_break$Stage , levels = c("Larval", "1", "2", "3", "4"))
# barplot(rates_percent, xlab = "Stage", ylab = "Percent survival increase",
#         names.arg=c("1", "2", "3", "4", "Larval"))
colorlist <- c( "#CC79A7", "#004949", "#009292", "#db6d00", "#920000")
ggplot(stage_break, aes(x = Stage, y = Percent, fill = Stage)) +
ylab("Percent survival increase") +
geom_bar(stat="identity")+
ylim(0,30) +
scale_fill_manual(values = c("Larval" =  "#CC79A7",
"1" = "#004949",
"2" = "#009292",
"3" = "#db6d00",
"4" = "#920000")) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#Calculates new rates based on vectors of % change and frequencies of restrictions
p <- list()
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "Frequency", "PercentChange"))))
percentage <-rates <- c(seq(0, .1, .01)) # c(0.01, 0.05, 0.1, 0.15)
freqs <- c(seq(1, 12)) #c(1, 2, 3, 4, 6, 12)
#par(mfrow = c(6,4))
for(i in 1:length(freqs)){
for(j in 1:length(percentage)){
pop <- observedStageMatrix[13,]
N <- list()
for (k in 1:120){
if(k %% 12 %in% c(seq(1, freqs[i]))){
N[[1]] <- pop
N[[k+1]] <- survivability(percentage[j]) %*% N[[k]]
}
else{
N[[1]] <- pop
N[[k+1]] <- A %*% N[[k]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- data.frame(cbind(new_data, month = 0:120, pop = rowSums(new_data[,1:4]), Frequency = freqs[i], PercentChange = percentage[j]))
modeled_data <- rbind(modeled_data, new_data)
}}
#Calculates new rates based on vectors of % change and frequencies of restrictions
p <- list()
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "Frequency", "PercentChange"))))
percentage <-rates <- c(seq(0, .1, .01)) # c(0.01, 0.05, 0.1, 0.15)
freqs <- c(seq(1, 12)) #c(1, 2, 3, 4, 6, 12)
modeled_data
#par(mfrow = c(6,4))
for(i in 1:length(freqs)){
for(j in 1:length(percentage)){
pop <- observedStageMatrix[13,]
N <- list()
for (k in 1:120){
if(k %% 12 %in% c(seq(1, freqs[i]))){
N[[1]] <- pop
N[[k+1]] <- survivability(percentage[j]) %*% N[[k]]
}
else{
N[[1]] <- pop
N[[k+1]] <- A %*% N[[k]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- data.frame(cbind(new_data, month = 0:120, pop = rowSums(new_data[,1:4]), Frequency = freqs[i], PercentChange = percentage[j]))
modeled_data <- rbind(modeled_data, new_data)
}}
survivability(percentage[j])
percentage[j]
N[[1]]
A %*% N[[k]]
k=1
A %*% N[[k]]
survivability(percentage[j]) %*% N[[k]]
survivability(percentage[j])
survivability(percentage[5])
A
survivability(0.001)
survivability(0.0001)
survivability(1.1)
survivability(seq(0,1,by=0.001))
survivability(0.000001)
increase=0.001
NewMtx <- (A * increase) + A
NewMtx
i
um(NewMtx[,i]) > 1
sum(NewMtx[,i]) > 1
sum(NewMtx[,i])
which(round(lambda,3)==round(1.0720191,3))
which(round(lambda,2)==round(1.0720191,2))
which(round(lambda,2)==round(1.0720191,2))
A<- A_vec[[30]]
A
colSums(A)
A<- A_vec[[13]]
colSums(A)
pop <- observedStageMatrix[13,]
N <- list()
#72 mo projection
for (i in 1:216){
N[[1]] <- pop
N[[i+1]] <- A %*% N[[i]]
}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:216)
#write.csv(modeled_data, "testing.csv",row.names = TRUE)
modeled_data <- data.frame(modeled_data)
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1", linetype = "Stage 1"), size = .75) +
geom_line(aes(y = Stage_2, x = month, color = "Stage 2", linetype = "Stage 2"), size = .75) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3", linetype = "Stage 3"), size = .75) +
geom_line(aes(y = Stage_4, x = month, color = "Stage 4", linetype = "Stage 4"), size = .75) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
scale_linetype_manual(name = "", values = c("Stage 1" = 3,
"Stage 2" = 4,
"Stage 3" = 5,
"Stage 4" = 1)) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 216, 24), label = seq(2006, 2024, 2)) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
eigen(A)
rates <- c(0, 0, 0, 0, 0)
for(i in 1:(length(rates)-1)){
#First need to do the stage 4 and larval differently
if(i == 4){
incr <- 0.01
testMtx <- A
testMtx[4,4] <- A[4,4] + A[4,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[4,4] <- A[4,4] + A[4,4] * incr
}
rates[4] <- incr
incr <- 0.01
testMtx <- A
testMtx[1,4] <- A[1,4] + A[1,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[1,4] <- A[1,4] + A[1,4] * incr
}
rates[5] <- incr
}
else{
incr <- 0.01
testMtx <- A
testMtx[,i] <- A[,i] + A[,i] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[,i] <- A[,i] + A[,i] * incr
}
rates[i] <- incr
}}
rates_percent <- rates * 100
stage_break <- data.frame(matrix(data = (c("1", "2", "3", "4", "Larval", as.numeric(rates_percent))), nrow = 5, ncol = 2))
colnames(stage_break) <- c("Stage", "Percent")
stage_break$Percent <- as.numeric(stage_break$Percent)
stage_break$Stage <- factor(stage_break$Stage , levels = c("Larval", "1", "2", "3", "4"))
# barplot(rates_percent, xlab = "Stage", ylab = "Percent survival increase",
#         names.arg=c("1", "2", "3", "4", "Larval"))
colorlist <- c( "#CC79A7", "#004949", "#009292", "#db6d00", "#920000")
ggplot(stage_break, aes(x = Stage, y = Percent, fill = Stage)) +
ylab("Percent survival increase") +
geom_bar(stat="identity")+
ylim(0,30) +
scale_fill_manual(values = c("Larval" =  "#CC79A7",
"1" = "#004949",
"2" = "#009292",
"3" = "#db6d00",
"4" = "#920000")) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#Calculates new rates based on vectors of % change and frequencies of restrictions
p <- list()
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "Frequency", "PercentChange"))))
percentage <-rates <- c(seq(0, .1, .01)) # c(0.01, 0.05, 0.1, 0.15)
freqs <- c(seq(1, 12)) #c(1, 2, 3, 4, 6, 12)
#par(mfrow = c(6,4))
for(i in 1:length(freqs)){
for(j in 1:length(percentage)){
pop <- observedStageMatrix[13,]
N <- list()
for (k in 1:120){
if(k %% 12 %in% c(seq(1, freqs[i]))){
N[[1]] <- pop
N[[k+1]] <- survivability(percentage[j]) %*% N[[k]]
}
else{
N[[1]] <- pop
N[[k+1]] <- A %*% N[[k]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- data.frame(cbind(new_data, month = 0:120, pop = rowSums(new_data[,1:4]), Frequency = freqs[i], PercentChange = percentage[j]))
modeled_data <- rbind(modeled_data, new_data)
}}
survivability(percentage[j])
survivability(0.001)
k
test=survivability(0.001)
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
library(quadprog)
library(popbio)
#observedStageMatrix <- observedStageMatrix[2:11,]
#timepts <- sample(my_vec,10,replace=F)
my_vec = c(1:11,13)
my_vecs <- combn(my_vec,10)
lambda <- vector('numeric', length=ncol(my_vecs))
A_vec <- list()
for (trial in 1:ncol(my_vecs)){
#Make Z
z <- matrix(t(observedStageMatrix[c(my_vecs[,trial]),]), ncol = 1, nrow = 4*length(2:11), byrow = TRUE)
#z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
A_vec[[trial]] <- A
lambda[trial] <- eigen.analysis(A)$lambda1
}
hist(lambda)
range(lambda)
sort(lambda)
which(round(lambda,2)==round(0.9422901,2))
which(round(lambda,2)==round(1.0720191,2))
A<- A_vec[[13]]
mean(lambda)
mean(lambda)
abline(v=mean(lambda))
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
library(quadprog)
library(popbio)
#observedStageMatrix <- observedStageMatrix[2:11,]
#timepts <- sample(my_vec,10,replace=F)
my_vec = c(1:11,13)
my_vecs <- combn(my_vec,10)
lambda <- vector('numeric', length=ncol(my_vecs))
A_vec <- list()
for (trial in 1:ncol(my_vecs)){
#Make Z
z <- matrix(t(observedStageMatrix[c(my_vecs[,trial]),]), ncol = 1, nrow = 4*length(2:11), byrow = TRUE)
#z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
A_vec[[trial]] <- A
lambda[trial] <- eigen.analysis(A)$lambda1
}
hist(lambda,breaks=15)
abline(v=mean(lambda))
range(lambda)
sort(lambda)
which(round(lambda,2)==round(0.9422901,2))
which(round(lambda,2)==round(1.0720191,2))
A<- A_vec[[13]]
abline(v=median(lambda))
median(lambda)
k
k %% 12 %in% c(seq(1, freqs[i]))
c(seq(1, freqs[i])
)
k %% 12
k
5 %% 12
survivability(percentage[j]) %*% N[[k]]
survivability(percentage[j]) %*% N[[1]]
survivability(percentage[j]) %*% pop
survivability(0.001) %*% pop
#Calculates new rates based on vectors of % change and frequencies of restrictions
p <- list()
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "Frequency", "PercentChange"))))
percentage <-rates <- c(seq(0, .1, .01)) # c(0.01, 0.05, 0.1, 0.15)
freqs <- c(seq(1, 12)) #c(1, 2, 3, 4, 6, 12)
modeled_data
N[[k]]
pop <- observedStageMatrix[13,]
N <- list()
N[[1]] <- pop
k=1
k %% 12 %in% c(seq(1, freqs[i]))
survivability(percentage[j]) %*% N[[k]]
survivability(percentage[j])
j
survivability(percentage[j]) %*% N[[k]]
i
j
k=2
k %% 12 %in% c(seq(1, freqs[i]))
freqs[i]
k %% 12 %in% c(seq(1, freqs[i]))
c(seq(1, freqs[i]))
A
survivability(percentage[j])
survivability(0.001)
survivability(0.01)
survivability(0.1)
survivability(0.01)
A2=survivability(0.01)
A*A2
eigen(A)
eigen(A2)
eigen(A2)$values[[1]]
eigen(A2)$values[[1]]
eigen(A1)$values[[1]]
eigen(A*A2)$values[[1]]
eigen(A*A2*A2)$values[[1]]
eigen(A*A2*A2*A2)$values[[1]]
A*pop
A %*% pop
population
pop
A %*% pop
A%*%(A %*% pop)
A%*%(A%*%(A %*% pop))
population
pop
A^3 %*% pop
A%^%3 %*% pop
A%*%A%*%A %*% pop
A%*%A%*%A2 %*% pop
A%*%A2%*%A %*% pop
A%^%3
library(expm)
install.packages("expm")
library(expm)
A%^%3 * pop
A%^%3 %*% pop
A%^%3 %*% pop
A%*%A%*%A %*% pop
A1%*%A%*%A %*% pop
A%*%A1%*%A %*% pop
A1
A
A2%*%A%*%A %*% pop
A%*%A2%*%A %*% pop
A%*%A%*%A2 %*% pop
A%^%2 %*%A2 %*% pop
A%^%2 %*%A2
eigen(A%^%2 %*%A2)
eigen(A%^%11 %*%A2)
A%^%11 %*%A2 %*% pop
A%^%10 %*%A2%^%2
eigen(A%^%10 %*%A2%^%2)
eigen(A%^%9 %*%A2%^%3)
eigen(A%^%1 %*%A2%^%11)
eigen(A2%^%12)
A%^%2 %*%A2 %*% pop
A%^%2 %*% pop %*%A2
A%^%2 %*%A2 %*% pop
A%^%10 %*%A2%^%2
A%^%10 %*%A2%^%2
A%^%11 %*%A2
A%^%10 %*%A2%^%2
A%^%10 %*%A2%^%2 %*% pop
A%^%11 %*%A2 %*% pop
A%^%10 %*%A2%^%2 %*% pop
sum(A%^%11 %*%A2 %*% pop)/sum(pop)
sum(A%^%10 %*%A2%^%2 %*% pop)/sum(pop)
sum(A %*%A2%^%11 %*% pop)/sum(pop)
eigen(A)
for (i in 1:11){
print(sum(A%^%(12-i) %*%A2%^%(i) %*% pop)/sum(pop))
}
eigen(A2)
eigen(A1)
eigen(A)
A%^%2 %*% pop
A%^%2
A%*%A
eigen(A)$values
eigen(A)$values[1]
as.numeric(eigen(A)$values[1])
mean(as.numeric(eigen(A)$values[1]), as.numeric(eigen(A2)$values[1]))
as.numeric(eigen(A2)$values[1])
mean(as.numeric(eigen(A)$values[1]), as.numeric(eigen(A2)$values[1]))
mean(c(as.numeric(eigen(A)$values[1]), as.numeric(eigen(A2)$values[1])))
A%*%A2
A%+%A2
A+A2
A+A2/2
eigen(A+A2/2)
eigen((A+A2)/2)
mean(c(as.numeric(eigen(A)$values[1]), as.numeric(eigen(A2)$values[1])))
for (i in 1:11){
eigen(((12-i)*A+i*A2)/12)
}
print(eigen(((12-i)*A+i*A2)/12))
print(eigen(((12-i)*A+i*A2)/12))
print(eigen(((12-i)*A+i*A2)/12)$values[1])
for (i in 1:11){
print(as.numeric(eigen(((12-i)*A+i*A2)/12)$values[1]))
}
?qp
?solve.QP
# Print eigenvalues for different combinations of matrices (A2 is increased survivability matrix)
for (i in 1:11){
print(as.numeric(eigen(((12-i)*A+i*A2)/12)$values[1]))
}
which(round(lambda,2)==round(0.9422901,2))
A<- A_vec[[53]]
A2<- survivability(0.01)
A2
A
A2<- survivability(0.001)
A2
A2<- survivability(0.0001)
A2
source("~/Library/CloudStorage/OneDrive-USNH/UNH/Mentoring/0_GradStudents/SophieWulfing/chapter1_revisions/CHIEAston/Uncertainty_Tests.R")
