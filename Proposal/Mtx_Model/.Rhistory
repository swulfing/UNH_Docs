y <- c("Stage", "Survivability")
colnames(surviveTable) <- y
surviveTable[1:5,1] <- c("1 Immature", "2 Incipient Maturity", "3 Mature", "4 Fully Mature", "Larval")
for(i in 1:3){
surviveTable[i,2] <- sum(A[,i])
}
surviveTable[4,2] <- A[4,4]
surviveTable[5,2] <- A[1,4]/((375000+27000)/2)
knitr::kable(surviveTable, format = "latex", booktabs = TRUE, caption = "(ref:surviveTable) \\label{survivabilityEst}") #%>%
#kable_styling(latex_options="scale_down")
cols <- hcl.colors(1000, palette = "Greens 3", alpha = NULL, rev = TRUE, fixup = TRUE)#, end = .85)
sens <- sensitivity(A)
for(i in 1:length(A)){
if(A[i] == 0){
sens[i] <-  NA
}
}
## IMAGE plot with smaller boxes
image2(sens, mar=c(1,3.5,5,1), box.offset=.1, border="gray70",col = c("white", cols[150:850]), text.cex = 2)
## MATPLOT
# matplot2(sens, log='y', type='b', yaxt='n', ltitle="Fate",
#  ylab=expression(paste("Sensitivity of ",lambda)),
#  main="Sensitivity matrix using matplot2")
# pwrs <- -4:1
#  #axis(2, 10^pwrs, parse(text=paste("10^", pwrs, sep = "")), las=1)
#https://rdrr.io/cran/popbio/man/sensitivity.html
#
cols <- hcl.colors(1000, palette = "Greens 3", alpha = NULL, rev = TRUE, fixup = TRUE)#, end = .85)
elas <- elasticity(A)
for(i in 1:length(A)){
if(A[i] == 0){
elas[i] <-  NA
}
}
image2(elas, mar=c(1,3.5,5,1), border="gray70", col = c("white", cols[150:850]), text.cex = 2 )
# # Summed elasticities for teasel.
# # fertility in last column, stasis P on diagonal, and growth in bottom-left triangle
# c(F=sum(elas[,4]), P=sum(diag(elas)), G=sum(elas[row(elas)>col(elas)]))
#
# elas <- elasticity(tortoise[["med.high"]])
# image2(elas, mar=c(1,3.5,5,1),  log=FALSE)
#  title("Tortoise elasticity matrix", line=2.5)
# # Summed elasticities for tortoise (see example 9.4)
# # fertility in top row, stasis on diagonal, and growth on subdiagonal
# c(F=sum(elas[1,]), P=sum(diag(elas)), G=sum(elas[row(elas)==col(elas)+1]))
#https://rdrr.io/cran/popbio/man/elasticity.html
rates <- c(0, 0, 0, 0, 0)
for(i in 1:(length(rates)-1)){
#First need to do the stage 4 and larval differently
if(i == 4){
incr <- 0.01
testMtx <- A
testMtx[4,4] <- A[4,4] + A[4,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[4,4] <- A[4,4] + A[4,4] * incr
}
rates[4] <- incr
incr <- 0.01
testMtx <- A
testMtx[1,4] <- A[1,4] + A[1,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[1,4] <- A[1,4] + A[1,4] * incr
}
rates[5] <- incr
}
else{
incr <- 0.01
testMtx <- A
testMtx[,i] <- A[,i] + A[,i] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[,i] <- A[,i] + A[,i] * incr
}
rates[i] <- incr
}}
rates_percent <- rates * 100
barplot(rates_percent, xlab = "Stage", ylab = "Percent survival increase",
names.arg=c("1", "2", "3", "4", "Larval"))
#rates
#Calculates new rates based on vectors of % chagne and frequencies of restrictions
p <- list()
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "Frequency", "PercentChange"))))
percentage <-rates <- c(seq(0, .1, .01)) # c(0.01, 0.05, 0.1, 0.15)
freqs <- c(seq(1, 12)) #c(1, 2, 3, 4, 6, 12)
#par(mfrow = c(6,4))
for(i in 1:length(freqs)){
for(j in 1:length(percentage)){
pop <- observedStageMatrix[13,]
N <- list()
for (k in 1:120){
if(k %% freqs[i] == 0){
N[[1]] <- pop
N[[k+1]] <- survivability(percentage[j]) %*% N[[k]]
}
else{
N[[1]] <- pop
N[[k+1]] <- A %*% N[[k]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- data.frame(cbind(new_data, month = 0:120, pop = rowSums(new_data[,1:4]), Frequency = freqs[i], PercentChange = percentage[j]))
modeled_data <- rbind(modeled_data, new_data)
}}
# Sources: https://www.webpages.uidaho.edu/wlf448/stochgro.pdf
# https://esajournals.onlinelibrary.wiley.com/doi/10.2307/1943004
#### CALCULATE GROWTH RATE BASED ON LAST POP-FIRST POP/FIRST POP FOR EACH FREQ/PERCENT COMBINATION
growthRate <- modeled_data %>%
select(month, pop, Frequency, PercentChange) %>%
filter(month == 0 | month == 120) %>%
pivot_wider(names_from = month, values_from = pop) %>%
rename(month_0 = 3,
month_120 = 4) %>%
mutate(Mu_New = log(month_120/month_0)/120) %>% #See Crouse paper. From Nt = N0e^(rt)
mutate(lambda_new = exp(Mu_New)) %>%
select(Frequency, PercentChange, Mu_New, lambda_new)
growthRate
growthRate$Frequency <- growthRate$Frequency - 1
growthRate
tail(growthRate)
#### CALCULATE GROWTH RATE BASED ON LAST POP-FIRST POP/FIRST POP FOR EACH FREQ/PERCENT COMBINATION
growthRate <- modeled_data %>%
select(month, pop, Frequency, PercentChange) %>%
filter(month == 0 | month == 120) %>%
pivot_wider(names_from = month, values_from = pop) %>%
rename(month_0 = 3,
month_120 = 4) %>%
mutate(Mu_New = log(month_120/month_0)/120) %>% #See Crouse paper. From Nt = N0e^(rt)
mutate(lambda_new = exp(Mu_New)) %>%
select(Frequency, PercentChange, Mu_New, lambda_new)
growthRate$Frequency <- growthRate$Frequency - 1
paretospagheto <- growthRate %>%
filter(lambda_new >= 1) %>%
group_by(Frequency) %>%
filter(lambda_new == min(lambda_new))
paretospagheto$Frequency <- paretospagheto$Frequency - 0.5
paretospagheto$PercentChange <- paretospagheto$PercentChange - 0.005
#Continuous Colors
ggplot(growthRate, aes(Frequency, PercentChange, fill = lambda_new)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(growthRate$lambda_new)),
midpoint = 1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Months between closures", expand=c(0,0), breaks = c(0, 2, 5, 8, 11)) +
scale_y_continuous(name = "Percent change in survival", expand=c(0,0)) +
labs(fill = "Eigenvalue") +
geom_segment(aes(x = 5.5, y = .095, xend = 5.5, yend = 0.105), size = .5, color = "#5A5A5A") +
geom_segment(aes(x = 4.5, y = .095, xend = 5.5, yend = 0.095), size = .5, color = "#5A5A5A") +
geom_step(data = paretospagheto , aes(x=Frequency, y=PercentChange), size = .5, color = "#5A5A5A")
#####PLOTTING ALL RATES
#   #write.csv(modeled_data, "testing.csv",row.names = TRUE)
#
#   #plot(modeled_data$pop, type = "o")
# ggplot(modeled_data, aes(y = pop, x = month)) +
#   geom_line(size = 1.5) +
#   #ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
#   xlab("Year") +
#   ylab("Total Pop") +
#   ylim(0,1000) +
#   scale_x_continuous(breaks = seq(0, 120, 120), label = c(2006, 2016)) +
#   facet_grid(Frequency ~ PercentChange)
#Continuous Colors
ggplot(growthRate, aes(Frequency, PercentChange, fill = lambda_new)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(growthRate$lambda_new)),
midpoint = 1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Months between closures", expand=c(0,0), breaks = c(0, 2, 5, 8, 11)) +
scale_y_continuous(name = "Percent change in survival", expand=c(0,0)) +
labs(fill = "Eigenvalue") +
geom_segment(aes(x = 4.5, y = .095, xend = 4.5, yend = 0.105), size = .5, color = "#5A5A5A") +
geom_segment(aes(x = 3.5, y = .095, xend = 4.5, yend = 0.095), size = .5, color = "#5A5A5A") +
geom_step(data = paretospagheto , aes(x=Frequency, y=PercentChange), size = .5, color = "#5A5A5A")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
#knitr::write_bib look into
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Mtx_Model")
library(tinytex)
library(matlib)
library(ggplot2)
library(quadprog) #cite
library(gridtext)
library(popbio) #cite
library(knitr)
library(gridExtra)
library(RColorBrewer)
#library(rPref) #Double check what this is doing. Maybe cite?
library(tidyr)
library(dplyr)
library(ggpubr)
library(bookdown)
library(kableExtra)
library(grid)
# #Raw data n supplemental. ASK
# in-stage bar graph goes in paper
# in stage management scenarios will definitely be supplemental
# Check out ecological modelling journal
# Write about stable stage cause I don't think you do
# Citations! Also check ahilya table
# APPENDIX!
# MAKE FIG CAPS FOR EVERYTHING AND EDIT FIGS.
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
options(tinytex.verbose = TRUE)
survivability <- function(increase){
#Calculate survivability for each staege and increase by x%
NewMtx <- (A * increase) + A
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1){
return(NA)
}}
return(NewMtx)
}
#This is stupid but it just forces R to stop writing things as complex numbers
f <- function(x) {
if (all(Im(z <- zapsmall(x))==0)) as.numeric(z) else x
}
real_check <- function(mtx){
if(sum(mtx[,1]) > 1 | sum(mtx[,2]) > 1 | sum(mtx[,3]) > 1 | mtx[4,4] > 1){
return(NA)
}
else{return(mtx)}
}
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
#z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
RaberinaryData <- read.csv("RaberinaryBenbow2012Calcs.csv")
#LifeHistory
knitr::kable(RaberinaryData, format = "latex", booktabs = TRUE, caption = "(ref:rabdata) \\label{RabData}") %>%
kable_styling(latex_options="scale_down")
# I think this is going to be more of an aquaculture conversation than anything else
#Dowble check survivability > 1 check. I don't think you did that correctly
#do stagemo
#have a survivability check in stagemo
stagemo <- function(stage){
stage_it <- data.frame(matrix(ncol=5,nrow=0, dimnames=list(NULL, c("Stage", "Frequency", "PercentChange", "mu", "lambda"))))
for(i in 1:12){
for(j in 1:100){#FIND OUT HOW TO CONDENSE THESE IF STATEMENTS
testMtx <- A
if(stage == 4){
testMtx[stage, stage] <- A[stage, stage] + A[stage, stage]*(j/100)
} #input stage 4
else if(stage == 5){
testMtx[1, stage-1] <- A[1, stage-1] + A[1, stage-1]*(j/100)
} #input stage 5
else{
testMtx[,stage] <- A[,stage] + A[,stage]*(j/100)
} #input other stages
if (!is.na(real_check(testMtx))){
mu <- ((i-1) * log(eigen(A)$values[1])) + log(eigen(testMtx)$values[1]) / i
lambda <- exp(mu)
#print(lambda)
stage_it[nrow(stage_it) + 1,] <- c(stage, i, j/100, f(mu), f(lambda))
}
}
}
return(stage_it)
}
doesthiswork <- list()
for(i in 1:5){
p1 <-ggplot(stagemo(i), aes((Frequency - 1), PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)  +
scale_x_continuous(expand=c(0,0), breaks = c(0, 2, 5, 8, 11)) +
scale_y_continuous(expand=c(0,0)) +
# scale_x_continuous(name = "Frequency of closure (months)", expand=c(0,0), breaks = c(1, 3, 6, 9, 12)) +
# scale_y_continuous(name = "Percent change in survival", expand=c(0,0)) +
theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + #, plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) +
labs(fill = "Eigenvalue")
doesthiswork[[i]] <- p1
}
t <- ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), label.y = 1.05, label.x = 0.1,  font.label = list(size = 7), common.legend = TRUE, ncol = 2, nrow = 3, legend = "right") + theme(plot.margin = margin(0.1,0.1,0.1,0.1, "cm"))
annotate_figure(t, left = textGrob("Percent change in survival", rot = 90, vjust = 1, gp = gpar(cex = 1)),
bottom = textGrob("Months between closures", gp = gpar(cex = 1)))
#do.call(ggarrange, c(doesthiswork[1:5], labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval")))
# I think this is going to be more of an aquaculture conversation than anything else
#Dowble check survivability > 1 check. I don't think you did that correctly
#do stagemo
#have a survivability check in stagemo
stagemo <- function(stage){
stage_it <- data.frame(matrix(ncol=5,nrow=0, dimnames=list(NULL, c("Stage", "Frequency", "PercentChange", "mu", "lambda"))))
for(i in 1:12){
for(j in 1:100){#FIND OUT HOW TO CONDENSE THESE IF STATEMENTS
testMtx <- A
if(stage == 4){
testMtx[stage, stage] <- A[stage, stage] + A[stage, stage]*(j/100)
} #input stage 4
else if(stage == 5){
testMtx[1, stage-1] <- A[1, stage-1] + A[1, stage-1]*(j/100)
} #input stage 5
else{
testMtx[,stage] <- A[,stage] + A[,stage]*(j/100)
} #input other stages
if (!is.na(real_check(testMtx))){
mu <- ((i-1) * log(eigen(A)$values[1])) + log(eigen(testMtx)$values[1]) / i
lambda <- exp(mu)
#print(lambda)
stage_it[nrow(stage_it) + 1,] <- c(stage, i, j/100, f(mu), f(lambda))
}
}
}
return(stage_it)
}
doesthiswork <- list()
for(i in 1:5){
p1 <-ggplot(stagemo(i), aes((Frequency - 1), PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)  +
ylim(0,1) +
scale_x_continuous(expand=c(0,0), breaks = c(0, 2, 5, 8, 11)) +
scale_y_continuous(expand=c(0,0)) +
# scale_x_continuous(name = "Frequency of closure (months)", expand=c(0,0), breaks = c(1, 3, 6, 9, 12)) +
# scale_y_continuous(name = "Percent change in survival", expand=c(0,0)) +
theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + #, plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) +
labs(fill = "Eigenvalue")
doesthiswork[[i]] <- p1
}
t <- ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), label.y = 1.05, label.x = 0.1,  font.label = list(size = 7), common.legend = TRUE, ncol = 2, nrow = 3, legend = "right") + theme(plot.margin = margin(0.1,0.1,0.1,0.1, "cm"))
annotate_figure(t, left = textGrob("Percent change in survival", rot = 90, vjust = 1, gp = gpar(cex = 1)),
bottom = textGrob("Months between closures", gp = gpar(cex = 1)))
#do.call(ggarrange, c(doesthiswork[1:5], labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval")))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
#knitr::write_bib look into
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Mtx_Model")
library(tinytex)
library(matlib)
library(ggplot2)
library(quadprog) #cite
library(gridtext)
library(popbio) #cite
library(knitr)
library(gridExtra)
library(RColorBrewer)
#library(rPref) #Double check what this is doing. Maybe cite?
library(tidyr)
library(dplyr)
library(ggpubr)
library(bookdown)
library(kableExtra)
library(grid)
# #Raw data n supplemental. ASK
# in-stage bar graph goes in paper
# in stage management scenarios will definitely be supplemental
# Check out ecological modelling journal
# Write about stable stage cause I don't think you do
# Citations! Also check ahilya table
# APPENDIX!
# MAKE FIG CAPS FOR EVERYTHING AND EDIT FIGS.
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
options(tinytex.verbose = TRUE)
survivability <- function(increase){
#Calculate survivability for each staege and increase by x%
NewMtx <- (A * increase) + A
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1){
return(NA)
}}
return(NewMtx)
}
#This is stupid but it just forces R to stop writing things as complex numbers
f <- function(x) {
if (all(Im(z <- zapsmall(x))==0)) as.numeric(z) else x
}
real_check <- function(mtx){
if(sum(mtx[,1]) > 1 | sum(mtx[,2]) > 1 | sum(mtx[,3]) > 1 | mtx[4,4] > 1){
return(NA)
}
else{return(mtx)}
}
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
#z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
RaberinaryData <- read.csv("RaberinaryBenbow2012Calcs.csv")
#LifeHistory
knitr::kable(RaberinaryData, format = "latex", booktabs = TRUE, caption = "(ref:rabdata) \\label{RabData}") %>%
kable_styling(latex_options="scale_down")
# I think this is going to be more of an aquaculture conversation than anything else
#Dowble check survivability > 1 check. I don't think you did that correctly
#do stagemo
#have a survivability check in stagemo
stagemo <- function(stage){
stage_it <- data.frame(matrix(ncol=5,nrow=0, dimnames=list(NULL, c("Stage", "Frequency", "PercentChange", "mu", "lambda"))))
for(i in 1:12){
for(j in 1:100){#FIND OUT HOW TO CONDENSE THESE IF STATEMENTS
testMtx <- A
if(stage == 4){
testMtx[stage, stage] <- A[stage, stage] + A[stage, stage]*(j/100)
} #input stage 4
else if(stage == 5){
testMtx[1, stage-1] <- A[1, stage-1] + A[1, stage-1]*(j/100)
} #input stage 5
else{
testMtx[,stage] <- A[,stage] + A[,stage]*(j/100)
} #input other stages
if (!is.na(real_check(testMtx))){
mu <- ((i-1) * log(eigen(A)$values[1])) + log(eigen(testMtx)$values[1]) / i
lambda <- exp(mu)
#print(lambda)
stage_it[nrow(stage_it) + 1,] <- c(stage, i, j/100, f(mu), f(lambda))
}
}
}
return(stage_it)
}
doesthiswork <- list()
for(i in 1:5){
p1 <-ggplot(stagemo(i), aes((Frequency - 1), PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)  +
ylim(0,1) +
scale_x_continuous(expand=c(0,0), breaks = c(0, 2, 5, 8, 11)) +
scale_y_continuous(expand=c(0,0)) +
# scale_x_continuous(name = "Frequency of closure (months)", expand=c(0,0), breaks = c(1, 3, 6, 9, 12)) +
# scale_y_continuous(name = "Percent change in survival", expand=c(0,0)) +
theme(axis.title.x = element_blank(), axis.title.y = element_blank()) + #, plot.margin = margin(0.5,0.5,0.5,0.5, "cm")) +
labs(fill = "Eigenvalue")
doesthiswork[[i]] <- p1
}
t <- ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), label.y = 1.05, label.x = 0.1,  font.label = list(size = 7), common.legend = TRUE, ncol = 2, nrow = 3, legend = "right") + theme(plot.margin = margin(0.1,0.1,0.1,0.1, "cm"))
annotate_figure(t, left = textGrob("Percent change in survival", rot = 90, vjust = 1, gp = gpar(cex = 1)),
bottom = textGrob("Months between closures", gp = gpar(cex = 1)))
#do.call(ggarrange, c(doesthiswork[1:5], labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval")))
