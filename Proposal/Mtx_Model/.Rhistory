for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
Bauch.Model <- function (times, yini, params) {
with(as.list(c(yini, param)), {
if(times %in% events){
h = .15
}else{h = 0.075}
## first extract the state variables
P <- y[1] #Fish Pop var
X <- y[2] #conservationist var
#TT <- y[5]
## now extract the parameters
R <- params["R"] # Net growth/fecundity
s <- params["s"] # supply and demand
h <- params["h"] # Harvesting efficiency
k <- params["k"] # Social learning rate
w <- params["w"] # conservation costs
c <- params["c"] # rarity valuation param
d <- params["d"] # social norm strength
## now code the model equations
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
## combine results into a single vector
dydt <- c(dPdt, dXdt)
## return result as a list!
return(list(dydt))
})
}
# Intro shocks These would be short term (perhaps 1 year) increases in the h parameter.
params_Bauch <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5) #h = 0.075
times <- seq(from = 0, to = end_time, by = 1)
yini <- c(P = 0.406, X = .24) # See supplemental data for other starting params
ode(
func=Bauch.Model,
y=yini,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out1
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
Bauch.Model <- function (times, yini, params) {
with(as.list(c(yini, params)), {
if(times %in% events){
h = .15
}else{h = 0.075}
## first extract the state variables
P <- y[1] #Fish Pop var
X <- y[2] #conservationist var
#TT <- y[5]
## now extract the parameters
R <- params["R"] # Net growth/fecundity
s <- params["s"] # supply and demand
h <- params["h"] # Harvesting efficiency
k <- params["k"] # Social learning rate
w <- params["w"] # conservation costs
c <- params["c"] # rarity valuation param
d <- params["d"] # social norm strength
## now code the model equations
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
## combine results into a single vector
dydt <- c(dPdt, dXdt)
## return result as a list!
return(list(dydt))
})
}
# Intro shocks These would be short term (perhaps 1 year) increases in the h parameter.
params_Bauch <- c(R = 0.06, s = 0.8, k = 0.17, w = 0.35, c = 0.6, d = 0.5) #h = 0.075
times <- seq(from = 0, to = end_time, by = 1)
yini <- c(P = 0.406, X = .24) # See supplemental data for other starting params
ode(
func=Bauch.Model,
y=yini,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
out1
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
Bauch.Model <- function (times, yini, params) {
with(as.list(c(yini, params)), {
if(times %in% events){
h = .15
}else{h = 0.075}
## first extract the state variables
P <- y[1] #Fish Pop var
X <- y[2] #conservationist var
#TT <- y[5]
## now extract the parameters
R <- params["R"] # Net growth/fecundity
s <- params["s"] # supply and demand
h <- params["h"] # Harvesting efficiency
k <- params["k"] # Social learning rate
w <- params["w"] # conservation costs
c <- params["c"] # rarity valuation param
d <- params["d"] # social norm strength
## now code the model equations
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
## combine results into a single vector
dydt <- c(dPdt, dXdt)
## return result as a list!
return(list(dydt))
})
}
# Intro shocks These would be short term (perhaps 1 year) increases in the h parameter.
params_Bauch <- c(R = 0.06, s = 0.8, h = 0.075 ,k = 0.17, w = 0.35, c = 0.6, d = 0.5) #h = 0.075
times <- seq(from = 0, to = end_time, by = 1)
yini <- c(P = 0.406, X = .24) # See supplemental data for other starting params
ode(
func=Bauch.Model,
y=yini,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
Bauch.Model <- function (times, yini, params) {
with(as.list(c(yini, params)), {
if(times %in% events){
h = .15
}else{h = 0.075}
## first extract the state variables
P <- y[1] #Fish Pop var
X <- y[2] #conservationist var
#TT <- y[5]
## now extract the parameters
R <- params["R"] # Net growth/fecundity
s <- params["s"] # supply and demand
h <- params["h"] # Harvesting efficiency
k <- params["k"] # Social learning rate
w <- params["w"] # conservation costs
c <- params["c"] # rarity valuation param
d <- params["d"] # social norm strength
## now code the model equations
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
## combine results into a single vector
dydt <- c(dPdt, dXdt)
## return result as a list!
return(list(dydt))
})
}
# Intro shocks These would be short term (perhaps 1 year) increases in the h parameter.
params_Bauch <- c(R = 0.06, s = 0.8, h = 0.075 ,k = 0.17, w = 0.35, c = 0.6, d = 0.5) #h = 0.075
times <- seq(from = 0, to = end_time, by = 1)
yini <- c(P = 0.406, X = .24) # See supplemental data for other starting params
ode(
func=Bauch.Model,
y=yini,
times=times,
params=params_Bauch
) %>%
as.data.frame() -> out1
#Make a global list of shock times
end_time <- 100
event_prob <- 0.2
event_years <- rbinom(end_time, 1, event_prob)
events <- NULL
for(i in 1:end_time){
if(event_years[i] == 1){
events <- append(events, i)#at the next index == i
}
}
Bauch.Model <- function (times, yini, params) {
with(as.list(c(yini, params)), {
if(times %in% events){
h = .15
}else{h = 0.075}
## first extract the state variables
P <- y[1] #Fish Pop var
X <- y[2] #conservationist var
#TT <- y[5]
## now extract the parameters
R <- params["R"] # Net growth/fecundity
s <- params["s"] # supply and demand
h <- params["h"] # Harvesting efficiency
k <- params["k"] # Social learning rate
w <- params["w"] # conservation costs
c <- params["c"] # rarity valuation param
d <- params["d"] # social norm strength
## now code the model equations
dPdt <- R * P * (1-P) - (h * P * (1-X))/(P+s)
dXdt <- k * X * (1-X) * (d*(2*X-1) + 1/(P+c) - w)
## combine results into a single vector
#dydt <- c(dPdt, dXdt)
## return result as a list!
return(list(c(dPdt, dXdt)))
})
}
# Intro shocks These would be short term (perhaps 1 year) increases in the h parameter.
params_Bauch <- c(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5) #h = 0.075
times <- seq(from = 0, to = end_time, by = 1)
yini <- c(P = 0.406, X = .24) # See supplemental data for other starting params
ode(
func=Bauch.Model,
y=yini,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out1
out1 %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
#knitr::write_bib look into
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Mtx_Model")
library(tinytex)
library(matlib)
library(ggplot2)
library(quadprog) #cite
library(gridtext)
library(popbio) #cite
library(knitr)
library(gridExtra)
library(RColorBrewer)
#library(rPref) #Double check what this is doing. Maybe cite?
library(tidyr)
library(dplyr)
library(ggpubr)
library(bookdown)
library(kableExtra)
# #Raw data n supplemental. ASK
# in-stage bar graph goes in paper
# in stage management scenarios will definitely be supplemental
# Check out ecological modelling journal
# Write about stable stage cause I don't think you do
# Citations! Also check ahilya table
# APPENDIX!
# MAKE FIG CAPS FOR EVERYTHING AND EDIT FIGS.
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
options(tinytex.verbose = TRUE)
survivability <- function(increase){
#Calculate survivability for each staege and increase by x%
NewMtx <- (A * increase) + A
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1){
return(NA)
}}
return(NewMtx)
}
#This is stupid but it just forces R to stop writing things as complex numbers
f <- function(x) {
if (all(Im(z <- zapsmall(x))==0)) as.numeric(z) else x
}
real_check <- function(mtx){
if(sum(mtx[,1]) > 1 | sum(mtx[,2]) > 1 | sum(mtx[,3]) > 1 | mtx[4,4] > 1){
return(NA)
}
else{return(mtx)}
}
write_matex <- function(x) {
begin <- "$$\\begin{bmatrix}"
end <- "\\end{bmatrix}$$"
X <-
apply(x, 1, function(x) {
paste(
paste(x, collapse = "&"),
"\\\\"
)
})
writeLines(c(begin, X, end))
}
knitr::include_graphics("LifeGraph.png")
knitr::include_graphics("MtxGeneric.png")
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
#z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
A_round <- matrix( , byrow = TRUE, nrow = 4, ncol = 4)
for (i in 1:length(A)){
A_round[i] <- round(A[i], 3)
}
# A_round <- matrix(-1*c(qp_round[1], 0, 0, qp_round[7],
#               qp_round[2], qp_round[3], 0, 0,
#               0, qp_round[4], qp_round[5], 0,
#               0, 0, qp_round[6], qp_round[8]), byrow = TRUE, nrow = 4, ncol = 4)
round_A <- matrix(A_round, 4, 4)
round_A[1] <- paste0("P1 = ", round_A[1])
round_A[13] <- paste0("F4 = ", round_A[13])
round_A[2] <- paste0("G1 = ", round_A[2])
round_A[6] <- paste0("P2 = ", round_A[6])
round_A[7] <- paste0("G2 = ", round_A[7])
round_A[11] <- paste0("P3 = ", round_A[11])
round_A[12] <- paste0("G3 = ", round_A[12])
round_A[16] <- paste0("P4 = ", round_A[16])
knitr::include_graphics("MtxFilled.png")
#write_matex(round_A)
LifeHistory <- read.csv("OcyaneaLifeHistory.csv")
#LifeHistory
knitr::kable(LifeHistory, format = "latex", booktabs = TRUE, caption = "(ref:lifehistory) \\label{LifeHistory}") %>%
kable_styling(latex_options="scale_down")
pop <- observedStageMatrix[13,]
N <- list()
#72 mo projection
for (i in 1:120){
N[[1]] <- pop
N[[i+1]] <- A %*% N[[i]]
}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:120)
#write.csv(modeled_data, "testing.csv",row.names = TRUE)
modeled_data <- data.frame(modeled_data)
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016))
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
theme_bw()
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
theme(panel.background = element_blank())
_
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
theme_bw()
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
+ theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
theme_bw(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
# scale_color_manual(name = "", values = c("Stage 1" = "#004949",
#                                               "Stage 2" = "#009292",
#                                               "Stage 3" = "#db6d00",
#                                               "Stage 4" = "#920000")) +
scale_color_manual(name = "", values = c("Stage 1" = "#009E73",
"Stage 2" = "#F0E442",
"Stage 3" = "#E69F00",
"Stage 4" = "#D55E00")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
