}
p <- list()
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:120, pop = rowSums(modeled_data[,1:4]))
}
#write.csv(modeled_data, "testing.csv",row.names = TRUE)
modeled_data <- data.frame(modeled_data)
#plot(modeled_data$pop, type = "o")
p[[i]] <-   ggplot(modeled_data) +
geom_line(aes(y = pop, x = month), size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
# xlab("Year") +
# ylab("Total Pop") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016))
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()) +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
#}
#do.call(grid.arrange,p)
grid.arrange(arrangeGrob(p[[1]],p[[2]],p[[3]],p[[4]],
p[[5]],p[[6]],p[[7]],p[[8]],
p[[9]],p[[10]],p[[11]],p[[12]],
p[[13]],p[[14]],p[[15]],p[[16]],
p[[17]],p[[18]],p[[19]],p[[20]],
p[[21]],p[[22]],p[[23]],p[[24]],ncol=4, nrow=6))
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:120, pop = rowSums(modeled_data[,1:4]))
}
modeled_data
iteration
iteration[1]
iteration[,1]
iteration[4,1]
iteration[6,1]
iteration[,2]
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:120, pop = rowSums(modeled_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2])
}
modeled_data
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(new_data, month = 0:120, pop = rowSums(modeled_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2])
}
modeled_data
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "freq", "rate"))))
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- cbind(new_data, month = 0:120, pop = rowSums(modeled_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2])
modeled_data <- rbind(modeled_data, new_data)
}
modeled_data
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "freq", "rate"))))
modeled_data
new_data
new_data[,2:]
new_data[,-1]
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- as.data.frame(cbind(new_data, month = 0:120, pop = rowSums(modeled_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2]))
modeled_data <- rbind(modeled_data, new_data)
}
new_data <- as.data.frame(cbind(new_data, month = 0:120, pop = rowSums(modeled_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2]))
new_data
new_data[,-1]
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- cbind(new_data, month = 0:120, pop = rowSums(modeled_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2])
class(new_data)
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "freq", "rate"))))
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- cbind(new_data, month = 0:120, pop = rowSums(modeled_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2])
#modeled_data <- rbind(modeled_data, new_data)
}
class(new_data)
class(modeled_data)
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- data.frame(cbind(new_data, month = 0:120, pop = rowSums(modeled_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2]))
#modeled_data <- rbind(modeled_data, new_data)
}
class(new_data)
new_data
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "freq", "rate"))))
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- data.frame(cbind(new_data, month = 0:120, pop = rowSums(modeled_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2]))
modeled_data <- rbind(modeled_data, new_data)
}
new_data
modeled_data
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "freq", "rate"))))
modeled_data
modeled_data <- data.frame(matrix(ncol=8,nrow=0, dimnames=list(NULL, c("Stage_1", "Stage_2", "Stage_3", "Stage_4", "month", "pop", "freq", "rate"))))
#par(mfrow = c(6,4))
for(i in 1:nrow(iteration)){
pop <- observedStageMatrix[13,]
N <- list()
for (j in 1:120){
if(j %% iteration[i,1] == 0){
N[[1]] <- pop
N[[j+1]] <- survivability(iteration[i,2]) %*% N[[j]]
}
else{
N[[1]] <- pop
N[[j+1]] <- A %*% N[[j]]
}}
new_data <- t(as.data.frame(do.call(cbind, N)))
colnames(new_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
new_data <- data.frame(cbind(new_data, month = 0:120, pop = rowSums(new_data[,1:4]), freq = iteration[i,1], rate = iteration[i,2]))
modeled_data <- rbind(modeled_data, new_data)
}
modeled_data
class(modeled_data)
#plot(modeled_data$pop, type = "o")
ggplot(modeled_data, aes(y = pop, x = month)) +
geom_line(size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
# xlab("Year") +
# ylab("Total Pop") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
facet_wrap( ~freq + rate)
#plot(modeled_data$pop, type = "o")
ggplot(modeled_data, aes(y = pop, x = month)) +
geom_line(size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
# xlab("Year") +
# ylab("Total Pop") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
facet_grid( ~freq + rate)
#plot(modeled_data$pop, type = "o")
ggplot(modeled_data, aes(y = pop, x = month)) +
geom_line(size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
# xlab("Year") +
# ylab("Total Pop") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
facet_grid(freq ~ rate)
modeled_data
#plot(modeled_data$pop, type = "o")
ggplot(modeled_data, aes(y = pop, x = month)) +
geom_line(size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
xlab("Year") +
ylab("Total Pop") +
ylim(0,500) +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016)) +
facet_grid(freq ~ rate)
#plot(modeled_data$pop, type = "o")
ggplot(modeled_data, aes(y = pop, x = month)) +
geom_line(size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
xlab("Year") +
ylab("Total Pop") +
ylim(0,500) +
scale_x_continuous(breaks = seq(0, 120, 120), label = seq(2006, 2016)) +
facet_grid(freq ~ rate)
#plot(modeled_data$pop, type = "o")
ggplot(modeled_data, aes(y = pop, x = month)) +
geom_line(size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
xlab("Year") +
ylab("Total Pop") +
ylim(0,500) +
scale_x_continuous(breaks = seq(0, 120, 60), label = seq(2006, 2016)) +
facet_grid(freq ~ rate)
#plot(modeled_data$pop, type = "o")
ggplot(modeled_data, aes(y = pop, x = month)) +
geom_line(size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
xlab("Year") +
ylab("Total Pop") +
ylim(0,500) +
scale_x_continuous(breaks = seq(0, 120, 120), label = c(2006, 2016)) +
facet_grid(freq ~ rate)
#plot(modeled_data$pop, type = "o")
ggplot(modeled_data, aes(y = pop, x = month)) +
geom_line(size = 1.5) +
#ggtitle()+#paste0("Surv rate: ", iteration[i,2], " Freq: Close once every ", iteration[i,1], " months" )) + #paste0(i, " month projection")) +
xlab("Year") +
ylab("Total Pop") +
ylim(0,1000) +
scale_x_continuous(breaks = seq(0, 120, 120), label = c(2006, 2016)) +
facet_grid(freq ~ rate)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("C:/Users/sophi/Documents/UNH_Docs/Proposal/Mtx_Model")
library(matlib)
library(ggplot2)
library(quadprog)
library(gridtext)
library(popbio)
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
write_matex <- function(x) {
begin <- "$$\\begin{bmatrix}"
end <- "\\end{bmatrix}$$"
X <-
apply(x, 1, function(x) {
paste(
paste(x, collapse = "&"),
"\\\\"
)
})
writeLines(c(begin, X, end))
}
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
A
# subscripts <- c(gt_render("P1"['i']),  gt_render("F4"['i']),
#                 gt_render("G1"['i']), gt_render("P2"['i']),
#                  gt_render("G2"['i']), gt_render("P3"['i']),
#                 gt_render("G3"['i']), gt_render("P4"['i'])
#                 )
#
# A_generic <- matrix(c(subscripts[1], 0, 0, subscripts[2],
#               subscripts[3], subscripts[4], 0, 0,
#               0, subscripts[5], subscripts[6], 0,
#               0, 0, subscripts[7], subscripts[8]), byrow = TRUE, nrow = 4, ncol = 4)
#
# A_generic <- matrix(c(expression("P"[1]), 0, 0, expression("F"[4]),
#               expression("G"[1]), expression("P"[2]), 0, 0,
#               0, expression("G"[2]), expression("P"[3]), 0,
#               0, 0, expression("G"[3]), expression("P"[4])), byrow = TRUE, nrow = 4, ncol = 4)
A_generic <- matrix(c("P1", 0, 0, "F4",
"G1", "P2", 0, 0,
0, "G2", "P3", 0,
0, 0, "G3", "P4"), byrow = TRUE, nrow = 4, ncol = 4)
print(A_generic)
write_matex(A_generic)
write_matex(A)
A_round <- matrix( , byrow = TRUE, nrow = 4, ncol = 4)
for (i in 1:length(A)){
A_round[i] <- round(A[i], 3)
}
# A_round <- matrix(-1*c(qp_round[1], 0, 0, qp_round[7],
#               qp_round[2], qp_round[3], 0, 0,
#               0, qp_round[4], qp_round[5], 0,
#               0, 0, qp_round[6], qp_round[8]), byrow = TRUE, nrow = 4, ncol = 4)
round_A <- matrix(A_round, 4, 4)
round_A[1] <- paste0("P1 = ", round_A[1])
round_A[13] <- paste0("F4 = ", round_A[13])
round_A[2] <- paste0("G1 = ", round_A[2])
round_A[6] <- paste0("P2 = ", round_A[6])
round_A[7] <- paste0("G2 = ", round_A[7])
round_A[11] <- paste0("P3 = ", round_A[11])
round_A[12] <- paste0("G3 = ", round_A[12])
round_A[16] <- paste0("P4 = ", round_A[16])
write_matex(round_A)
pop <- observedStageMatrix[13,]
N <- list()
#72 mo projection
for (i in 1:120){
N[[1]] <- pop
N[[i+1]] <- A %*% N[[i]]
}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:120)
#write.csv(modeled_data, "testing.csv",row.names = TRUE)
modeled_data <- data.frame(modeled_data)
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016))
#eigenvecors and vals
A_eigen <- eigen(A)
A_eigen
#Intrinsic Rate of Increast (r): lambda = e^r
r <- log(A_eigen$values[1])
r
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
setwd("C:/Users/sophi/Documents/UNH_Docs/Proposal/Mtx_Model")
library(matlib)
library(ggplot2)
library(quadprog)
library(gridtext)
library(popbio)
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
write_matex <- function(x) {
begin <- "$$\\begin{bmatrix}"
end <- "\\end{bmatrix}$$"
X <-
apply(x, 1, function(x) {
paste(
paste(x, collapse = "&"),
"\\\\"
)
})
writeLines(c(begin, X, end))
}
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
A
pop <- observedStageMatrix[13,]
N <- list()
#72 mo projection
for (i in 1:120){
N[[1]] <- pop
N[[i+1]] <- A %*% N[[i]]
}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:120)
#write.csv(modeled_data, "testing.csv",row.names = TRUE)
modeled_data <- data.frame(modeled_data)
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016))
update.packages(ask = FALSE)
