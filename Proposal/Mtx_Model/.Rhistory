#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
A_round <- matrix( , byrow = TRUE, nrow = 4, ncol = 4)
for (i in 1:length(A)){
A_round[i] <- round(A[i], 3)
}
# A_round <- matrix(-1*c(qp_round[1], 0, 0, qp_round[7],
#               qp_round[2], qp_round[3], 0, 0,
#               0, qp_round[4], qp_round[5], 0,
#               0, 0, qp_round[6], qp_round[8]), byrow = TRUE, nrow = 4, ncol = 4)
round_A <- matrix(A_round, 4, 4)
round_A[1] <- paste0("P1 = ", round_A[1])
round_A[13] <- paste0("F4 = ", round_A[13])
round_A[2] <- paste0("G1 = ", round_A[2])
round_A[6] <- paste0("P2 = ", round_A[6])
round_A[7] <- paste0("G2 = ", round_A[7])
round_A[11] <- paste0("P3 = ", round_A[11])
round_A[12] <- paste0("G3 = ", round_A[12])
round_A[16] <- paste0("P4 = ", round_A[16])
knitr::include_graphics("MtxFilled.png")
#write_matex(round_A)
ages <- data.frame(matrix(data = NA, nrow = 4, ncol = 3))
colnames(ages) <- c("Stage", "Duration_New", "SD")
for(i in 1:nrow(A)){
ages$Stage[i] <- i
ages$Duration_New[i] <- 1/(1-A[i,i])
ages$SD[i] <- sqrt(A[i,i]/(1-A[i,i])^2)
}
Life <- read.csv("OcyaneaLifeHistory.csv")
LifeHistory <- Life[,1:2]
LifeHistory$New <- c(NA, NA, ages[,2], NA, NA )
LifeHistory$Var <- c(NA, NA, ages[,3], NA, NA )
colnames(LifeHistory) <- c("Stage", "Existing Estimate", "Estimate from Lefkovitch Matrix", "SD")
#LifeHistory
#Nowcombine LifeHistory[1:2]
knitr::kable(LifeHistory, format = "latex", booktabs = TRUE, caption = "(ref:lifehistory) \\label{LifeHistory}", col.names = c("Stage", "Existing Estimated Duration", "Estimate from Lekfovitch Matrix (Months)", "Standard Deviation of Estimate (Months)")) %>%
column_spec(2:4, width = "4.5cm") %>%
kable_styling(latex_options="scale_down")
pop <- observedStageMatrix[13,]
N <- list()
#72 mo projection
for (i in 1:216){
N[[1]] <- pop
N[[i+1]] <- A %*% N[[i]]
}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:216)
#write.csv(modeled_data, "testing.csv",row.names = TRUE)
modeled_data <- data.frame(modeled_data)
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1", linetype = "Stage 1"), size = .75) +
geom_line(aes(y = Stage_2, x = month, color = "Stage 2", linetype = "Stage 2"), size = .75) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3", linetype = "Stage 3"), size = .75) +
geom_line(aes(y = Stage_4, x = month, color = "Stage 4", linetype = "Stage 4"), size = .75) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
scale_linetype_manual(name = "", values = c("Stage 1" = 3,
"Stage 2" = 4,
"Stage 3" = 5,
"Stage 4" = 1)) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 216, 24), label = seq(2006, 2024, 2)) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
View(modeled_data)
out_Diff %>%
gather(variable,value,-time) %>%
ggplot(.)+
geom_line(aes(y = F_1, x = time, color = "F_1", linetype = "F_1"), size = .75) +
geom_line(aes(y = F_2, x = time, color = "F_2", linetype = "F_2"), size = .75) +
geom_line(aes(y = X_1, x = time, color = "X_1", linetype = "X_1"), size = .75) +
geom_line(aes(y = X_2, x = time, color = "X_2", linetype = "X_2"), size = .75) +
scale_color_manual(name = "", values = c("F_1" = "#004949",
"F_2" = "#009292",
"X_1" = "#db6d00",
"X_2" = "#920000")) +
scale_linetype_manual(name = "", values = c("F_1" = 3,
"F_2" = 4,
"X_1" = 5,
"X_2" = 1)) +
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "title", subtitle = as.character(i)) +
theme(plot.title = element_text(hjust = .5))
pdata <- out_Diff %>%
gather(variable,value,-time)
ptest <- ggplot(pdata)+
geom_line(aes(y = F_1, x = time, color = "F_1", linetype = "F_1"), size = .75) +
geom_line(aes(y = F_2, x = time, color = "F_2", linetype = "F_2"), size = .75) +
geom_line(aes(y = X_1, x = time, color = "X_1", linetype = "X_1"), size = .75) +
geom_line(aes(y = X_2, x = time, color = "X_2", linetype = "X_2"), size = .75) +
scale_color_manual(name = "", values = c("F_1" = "#004949",
"F_2" = "#009292",
"X_1" = "#db6d00",
"X_2" = "#920000")) +
scale_linetype_manual(name = "", values = c("F_1" = 3,
"F_2" = 4,
"X_1" = 5,
"X_2" = 1)) +
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "title", subtitle = as.character(i)) +
theme(plot.title = element_text(hjust = .5))
for(i in 1:6){
if(i == 1 | i == 4){
pdata <- out_Diff %>%
gather(variable,value,-time)
ptest <- ggplot(pdata)+
geom_line(aes(y = F_1, x = time, color = "F_1", linetype = "F_1"), size = .75) +
geom_line(aes(y = F_2, x = time, color = "F_2", linetype = "F_2"), size = .75) +
geom_line(aes(y = X_1, x = time, color = "X_1", linetype = "X_1"), size = .75) +
geom_line(aes(y = X_2, x = time, color = "X_2", linetype = "X_2"), size = .75) +
scale_color_manual(name = "", values = c("F_1" = "#004949",
"F_2" = "#009292",
"X_1" = "#db6d00",
"X_2" = "#920000")) +
scale_linetype_manual(name = "", values = c("F_1" = 3,
"F_2" = 4,
"X_1" = 5,
"X_2" = 1)) +
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "title", subtitle = as.character(i)) +
theme(plot.title = element_text(hjust = .5))
#ggtitle(as.character(i))
plotList[[i]] <- ptest
}else{
pdata <- out_Diff %>%
gather(variable,value,-time)
ptest <- ggplot(pdata)+
geom_line(aes(y = F_1, x = month, color = "F_1", linetype = "F_1"), size = .75) +
geom_line(aes(y = F_2, x = month, color = "F_2", linetype = "F_2"), size = .75) +
geom_line(aes(y = X_1, x = month, color = "X_1", linetype = "X_1"), size = .75) +
geom_line(aes(y = X_2, x = month, color = "X_2", linetype = "X_2"), size = .75) +
scale_color_manual(name = "", values = c("F_1" = "#004949",
"F_2" = "#009292",
"X_1" = "#db6d00",
"X_2" = "#920000")) +
scale_linetype_manual(name = "", values = c("F_1" = 3,
"F_2" = 4,
"X_1" = 5,
"X_2" = 1)) +
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population', subtitle = as.character(i))
#theme(legend.position = "none") +
#ggtitle(as.character(i))
plotList[[i]] <- ptest}
}
for(i in 1:6){
if(i == 1 | i == 4){
pdata <- out_Diff %>%
gather(variable,value,-time)
ptest <- ggplot(pdata)+
geom_line(aes(y = F_1, x = time, color = "F_1", linetype = "F_1"), size = .75) +
geom_line(aes(y = F_2, x = time, color = "F_2", linetype = "F_2"), size = .75) +
geom_line(aes(y = X_1, x = time, color = "X_1", linetype = "X_1"), size = .75) +
geom_line(aes(y = X_2, x = time, color = "X_2", linetype = "X_2"), size = .75) +
scale_color_manual(name = "", values = c("F_1" = "#004949",
"F_2" = "#009292",
"X_1" = "#db6d00",
"X_2" = "#920000")) +
scale_linetype_manual(name = "", values = c("F_1" = 3,
"F_2" = 4,
"X_1" = 5,
"X_2" = 1)) +
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "title", subtitle = as.character(i)) +
theme(plot.title = element_text(hjust = .5))
#ggtitle(as.character(i))
plotList[[i]] <- ptest
}else{
pdata <- out_Diff %>%
gather(variable,value,-time)
ptest <- ggplot(pdata)+
geom_line(aes(y = F_1, x = time, color = "F_1", linetype = "F_1"), size = .75) +
geom_line(aes(y = F_2, x = time, color = "F_2", linetype = "F_2"), size = .75) +
geom_line(aes(y = X_1, x = time, color = "X_1", linetype = "X_1"), size = .75) +
geom_line(aes(y = X_2, x = time, color = "X_2", linetype = "X_2"), size = .75) +
scale_color_manual(name = "", values = c("F_1" = "#004949",
"F_2" = "#009292",
"X_1" = "#db6d00",
"X_2" = "#920000")) +
scale_linetype_manual(name = "", values = c("F_1" = 3,
"F_2" = 4,
"X_1" = 5,
"X_2" = 1)) +
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population', subtitle = as.character(i))
#theme(legend.position = "none") +
#ggtitle(as.character(i))
plotList[[i]] <- ptest}
}
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"), nrow=3),
p_legend,
ncol=2,widths=c(2, 0.3))
pdata <- out_Diff %>%
gather(variable,value,-time)
gplot(pdata)+
geom_line(aes(y = F_1, x = time, color = "F_1", linetype = "F_1"), size = .75) +
geom_line(aes(y = F_2, x = time, color = "F_2", linetype = "F_2"), size = .75) +
geom_line(aes(y = X_1, x = time, color = "X_1", linetype = "X_1"), size = .75) +
geom_line(aes(y = X_2, x = time, color = "X_2", linetype = "X_2"), size = .75) +
scale_color_manual(name = "", values = c("F_1" = "#004949",
"F_2" = "#009292",
"X_1" = "#db6d00",
"X_2" = "#920000")) +
scale_linetype_manual(name = "", values = c("F_1" = 3,
"F_2" = 4,
"X_1" = 5,
"X_2" = 1)) +
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "title", subtitle = as.character(i)) +
theme(plot.title = element_text(hjust = .5))
ggplot(pdata)+
geom_line(aes(y = F_1, x = time, color = "F_1", linetype = "F_1"), size = .75) +
geom_line(aes(y = F_2, x = time, color = "F_2", linetype = "F_2"), size = .75) +
geom_line(aes(y = X_1, x = time, color = "X_1", linetype = "X_1"), size = .75) +
geom_line(aes(y = X_2, x = time, color = "X_2", linetype = "X_2"), size = .75) +
scale_color_manual(name = "", values = c("F_1" = "#004949",
"F_2" = "#009292",
"X_1" = "#db6d00",
"X_2" = "#920000")) +
scale_linetype_manual(name = "", values = c("F_1" = 3,
"F_2" = 4,
"X_1" = 5,
"X_2" = 1)) +
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "title", subtitle = as.character(i)) +
theme(plot.title = element_text(hjust = .5))
View(pdata)
Bauch.Coupled <- function (t, y, params) {
## first extract the state variables
F_1 <- y[1] #Fish Pop var
F_2 <- y[2] #Fish Pop var
X_1 <- y[3] #conservationist var
X_2 <- y[4] #conservationist var
#TT <- y[5]
## now extract the parameters
r_1 <- params["r_1"] # Net growth/fecundity
s_1 <- params["s_1"] # supply and demand
h_1 <- params["h_1"] # Harvesting efficiency
k_1 <- params["k_1"] # Social learning rate
w_1 <- params["w_1"] # conservation costs
c_1 <- params["c_1"] # rarity valuation param
d_1 <- params["d_1"] # social norm strength
m_1 <- params["m_1"] # Inflow of fish from pop 2 to pop 1
rho_1 <- params["rho_1"] # Influence of pop 2 on pop 1
r_2 <- params["r_2"] # Net growth/fecundity
s_2 <- params["s_2"] # supply and demand
h_2 <- params["h_2"] # Harvesting efficiency
k_2 <- params["k_2"] # Social learning rate
w_2 <- params["w_2"] # conservation costs
c_2 <- params["c_2"] # rarity valuation param
d_2 <- params["d_2"] # social norm strength
m_2 <- params["m_2"] # Inflow of fish from pop 1 to pop 2
rho_2 <- params["rho_2"] # Influence of pop 1 on pop 2
## now code the model equations
dF_1dt <-  r_1 * F_1 * (1-F_1) - (h_1 * F_1 * (1-X_1))/(F_1+s_1) - m_2 * F_1 + m_1 * F_2
dF_2dt <-  r_2 * F_2 * (1-F_2) - (h_2 * F_2 * (1-X_2))/(F_2+s_2) - m_1 * F_2 + m_2 * F_1
dX_1dt <- k_1 * X_1 * (1-X_1) *(1/(F_1 + c_1) - w_1 + d_1*(2*X_1 - 1) + rho_1 * (2*X_2 - 1))
dX_2dt <- k_2 * X_2 * (1-X_2) *(1/(F_2 + c_2) - w_2 + d_2*(2*X_2 - 1) + rho_2 * (2*X_1 - 1))
## combine results into a single vector
dydt <- c(dF_1dt, dF_2dt, dX_1dt, dX_2dt)
## return result as a list!
list(dydt)
}
params_Bauch2 <- params_list
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch2
) %>%
as.data.frame() -> out_Coupled
View(out_Coupled)
mparams <- c(0.01, 0.05, 0.1)
plotList <- list()
k <- 0
titlesList <- c("a)", "b)", "c)", "d)", "e)", "f)")
k <- k+1
params_Default <- params_list
params_Default[8] <- mparams[i]
params_Default[17] <- mparams[i]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
out_Diff %>%
gather(variable,value,-time)
p <- out_Diff %>%
gather(variable,value,-time)
View(p)
for(i in 1:6){
if(i == 1 | i == 4){
ptest <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable, linetype = variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "title", subtitle = as.character(i)) +
theme(plot.title = element_text(hjust = .5))
#ggtitle(as.character(i))
plotList[[i]] <- ptest
}else{ptest <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable, linetype = variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population', subtitle = as.character(i))
#theme(legend.position = "none") +
#ggtitle(as.character(i))
plotList[[i]] <- ptest}
}
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"), nrow=3),
p_legend,
ncol=2,widths=c(2, 0.3))
mparams <- c(0.01, 0.05, 0.1)
plotList <- list()
k <- 0
titlesList <- c("a)", "b)", "c)", "d)", "e)", "f)")
for(i in 1:length(mparams)){
k <- k+1
params_Default <- params_list
params_Default[8] <- mparams[i]
params_Default[17] <- mparams[i]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k == 1) {
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "Symmetrical Movement", subtitle = titlesList[k]) +
theme(plot.title = element_text(hjust = .5))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = NULL, subtitle = titlesList[k])
plotList[[k]] <- p
}
}
for(i in 1:length(mparams)){
k <- k+1
params_Default <- params_list
params_Default[8] <- mparams[i]
#params_Default[17] <- mparams[i]
times <- timespan
xstart <- c(F_1 = 0.406, F_2 = 0.406, X_1 = .24, X_2 = .24)
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Default
) %>%
as.data.frame() -> out_Diff
if(k == 4) {
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = "Asymmetrical Movement", subtitle = titlesList[k]) +
theme(plot.title = element_text(hjust = .5))
plotList[[k]] <- p
}else if(k == 6){
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = NULL, subtitle = titlesList[k]) +
scale_discrete_manual(values=cbbPalette, aesthetics = "colour",name = "Variable", labels=c(expression('F'[1]), expression('F'[2]), expression('X'[1]), expression('X'[2])))
plotList[[k]] <- p
}else{
p <- out_Diff %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=1)+
theme_classic()+
scale_colour_manual(values=cbbPalette) +
labs(x='Time (yr)',y='Population') +
ggtitle(label = NULL, subtitle = titlesList[k])
plotList[[k]] <- p
}
}
#function to extract the legend of a ggplot; source:
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
get_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
#arranging the legend and plots in a grid:
p_legend <- get_legend(plotList[[6]])
grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
plotList[[4]] + theme(legend.position="none"),
plotList[[2]] + theme(legend.position="none"),
plotList[[5]] + theme(legend.position="none"),
plotList[[3]] + theme(legend.position="none"),
plotList[[6]] + theme(legend.position="none"),
nrow=3),
p_legend,
ncol=2,widths=c(2, 0.3))
# for(i in 1:6){
#   if(i == 1 | i == 4){
#     ptest <- out_Diff %>%
#         gather(variable,value,-time) %>%
#         ggplot(aes(x=time,y=value,color=variable, linetype = variable))+
#         geom_line(size=1)+
#         theme_classic()+
#         scale_colour_manual(values=cbbPalette) +
#         labs(x='Time (yr)',y='Population') +
#         ggtitle(label = "title", subtitle = as.character(i)) +
#         theme(plot.title = element_text(hjust = .5))
#         #ggtitle(as.character(i))
# plotList[[i]] <- ptest
#
#   }else{ptest <- out_Diff %>%
#         gather(variable,value,-time) %>%
#         ggplot(aes(x=time,y=value,color=variable, linetype = variable))+
#         geom_line(size=1)+
#         theme_classic()+
#         scale_colour_manual(values=cbbPalette) +
#         labs(x='Time (yr)',y='Population', subtitle = as.character(i))
#         #theme(legend.position = "none") +
#         #ggtitle(as.character(i))
# plotList[[i]] <- ptest}
# }
#
# grid.arrange(arrangeGrob(plotList[[1]] + theme(legend.position="none"),
#                          plotList[[4]] + theme(legend.position="none"),
#                          plotList[[2]] + theme(legend.position="none"),
#                          plotList[[5]] + theme(legend.position="none"),
#                          plotList[[3]] + theme(legend.position="none"),
#                          plotList[[6]] + theme(legend.position="none"), nrow=3),
#              p_legend,
#              ncol=2,widths=c(2, 0.3))
install.packages("kableExtra")
