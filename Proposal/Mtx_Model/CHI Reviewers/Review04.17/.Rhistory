knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
#knitr::write_bib look into
#setwd("C:/Users/Sophi/Documents/GitHub/UNH_Docs/Proposal/Mtx_Model")
library(tinytex)
library(matlib)
library(ggplot2)
library(quadprog) #cite
library(gridtext)
library(popbio) #cite
library(knitr)
library(gridExtra)
library(RColorBrewer)
#library(rPref) #Double check what this is doing. Maybe cite?
library(tidyr)
library(dplyr)
library(ggpubr)
library(bookdown)
library(kableExtra)
library(Rage)
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
#knitr::write_bib look into
#setwd("C:/Users/Sophi/Documents/GitHub/UNH_Docs/Proposal/Mtx_Model")
library(tinytex)
library(matlib)
library(ggplot2)
library(quadprog) #cite
library(gridtext)
library(popbio) #cite
library(knitr)
library(gridExtra)
library(RColorBrewer)
#library(rPref) #Double check what this is doing. Maybe cite?
library(tidyr)
library(dplyr)
library(ggpubr)
library(bookdown)
library(kableExtra)
library(Rage)
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
getwd()
#knitr::write_bib look into
setwd("C:/Users/Sophi/Documents/GitHub/UNH_Docs/Proposal/Mtx_Model")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
#knitr::write_bib look into
#setwd("C:/Users/Sophi/Documents/GitHub/UNH_Docs/Proposal/Mtx_Model")
library(tinytex)
library(matlib)
library(ggplot2)
library(quadprog) #cite
library(gridtext)
library(popbio) #cite
library(knitr)
library(gridExtra)
library(RColorBrewer)
#library(rPref) #Double check what this is doing. Maybe cite?
library(tidyr)
library(dplyr)
library(ggpubr)
library(bookdown)
library(kableExtra)
library(Rage)
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
survivability <- function(increase){
#Calculate survivability for each stage and increase by x%
NewMtx <- (A * increase) + A
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1){
return(NA)
}}
return(NewMtx)
}
#Removes complex numbers
f <- function(x) {
if (all(Im(z <- zapsmall(x))==0)) as.numeric(z) else x
}
real_check <- function(mtx){
if(sum(mtx[,1]) > 1 | sum(mtx[,2]) > 1 | sum(mtx[,3]) > 1 | mtx[4,4] > 1){
return(NA)
}
else{return(mtx)}
}
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
#z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
# All the above code is from Sophie. The following code runs simulations where we we calculate lambda for situations where we let the matrix entries be drawn from a random variable
MtxValidU <- function(NewMtx){
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1 | sum(NewMtx<0)>0){
return(NA)
}}
return(eigen.analysis(NewMtx)$lambda1)
}
theme_qmel <- function(){
theme_classic() + theme(panel.border = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.text=element_text(size=12),
axis.title=element_text(size=14))
}
n_trial = 10000
entry_sd = seq(0.01,0.1,length.out=10)
lambda = data.frame(sd = rep(entry_sd,n_trial/length(entry_sd)),lambda=NA)
for (trial in 1:n_trial){
temp_A <- matrix(rnorm(16,A,sd=lambda$sd[trial]),nrow = 4,ncol=4)
temp_A[A==0] <- 0
lambda$lambda[trial] <- MtxValidU(temp_A)
# # Easton Check
# if (sum(temp_A<0)>0 | sum(temp_A>1)>1){
#   lambda$lambda[trial] <- NA
# }else{
#   lambda$lambda[trial] <- eigen.analysis(temp_A)$lambda1
# }
}
require(dplyr)
lambda_sum <- lambda %>%
group_by(sd) %>%
summarize(mean_lambda = mean(lambda,na.rm=T),
num_na = n() - sum(is.na(lambda)),
lambda_above_1 = sum(lambda>1)/n())
View(lambda_sum)
n_trial = 10000
entry_sd = seq(0.01,0.1,length.out=10)
lambda = data.frame(sd = rep(entry_sd,n_trial/length(entry_sd)),lambda=NA)
for (trial in 1:n_trial){
# temp_A <- matrix(rnorm(16,A,sd=lambda$sd[trial]),nrow = 4,ncol=4)
# temp_A[A==0] <- 0
#
# lambda$lambda[trial] <- MtxValidU(temp_A)
# Easton Check
if (sum(temp_A<0)>0 | sum(temp_A>1)>1){
lambda$lambda[trial] <- NA
}else{
lambda$lambda[trial] <- eigen.analysis(temp_A)$lambda1
}
}
require(dplyr)
lambda_sum <- lambda %>%
group_by(sd) %>%
summarize(mean_lambda = mean(lambda,na.rm=T),
num_na = n() - sum(is.na(lambda)),
lambda_above_1 = sum(lambda>1)/n())
View(lambda_sum)
View(lambda)
lambda = data.frame(sd = rep(entry_sd,n_trial/length(entry_sd)),lambda=NA)
View(lambda)
# All the above code is from Sophie. The following code runs simulations where we we calculate lambda for situations where we let the matrix entries be drawn from a random variable
MtxValidU <- function(NewMtx){
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1 | sum(NewMtx<0)>0){
return(NA)
}}
return(eigen.analysis(NewMtx)$lambda1)
}
theme_qmel <- function(){
theme_classic() + theme(panel.border = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.text=element_text(size=12),
axis.title=element_text(size=14))
}
n_trial = 10000
entry_sd = seq(0.01,0.1,length.out=10)
lambda = data.frame(sd = rep(entry_sd,n_trial/length(entry_sd)),lambdas=NA, lambdae = NA)
for (trial in 1:n_trial){
temp_A <- matrix(rnorm(16,A,sd=lambda$sd[trial]),nrow = 4,ncol=4)
temp_A[A==0] <- 0
lambda$lambdas[trial] <- MtxValidU(temp_A)
# Easton Check
if (sum(temp_A<0)>0 | sum(temp_A>1)>1){
lambda$lambdae[trial] <- NA
}else{
lambda$lambdae[trial] <- eigen.analysis(temp_A)$lambda1
}
}
require(dplyr)
lambda_sum <- lambda %>%
group_by(sd) %>%
summarize(mean_lambdas = mean(lambdas,na.rm=T),
num_nas = n() - sum(is.na(lambdas)),
lambda_above_1s = sum(lambdas>1)/n(),
mean_lambdae = mean(lambdae,na.rm=T),
num_nae = n() - sum(is.na(lambdae)),
lambda_above_1e = sum(lambdae>1)/n())
View(lambda_sum)
ggplot(data = lambda %>% filter(sd<0.05), aes(x = lambdae)) + geom_histogram() + geom_vline(xintercept = 1,linetype=2) + scale_y_continuous(expand = c(0, NA),limits = c(NA, 300)) + facet_wrap(~sd,labeller = label_both) + ylab('Count') + xlab('Dominant eigenvalue')  + theme_qmel()
#DOES THIS REANALYZE
MtxValidU <- function(NewMtx){
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1 | sum(NewMtx<0)>0){
return(NA)
}}
return(eigen.analysis(NewMtx)$lambda1)
}
theme_qmel <- function(){
theme_classic() + theme(panel.border = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.text=element_text(size=12),
axis.title=element_text(size=14))
}
n_trial = 10000
entry_sd = seq(0.01,0.1,length.out=10)
lambda = data.frame(sd = rep(entry_sd,n_trial/length(entry_sd)),lambda=NA)
for (trial in 1:n_trial){
temp_A <- matrix(rnorm(16,A,sd=lambda$sd[trial]),nrow = 4,ncol=4)
temp_A[A==0] <- 0
lambda$lambda[trial] <- MtxValidU(temp_A)
# # Easton Check
# if (sum(temp_A<0)>0 | sum(temp_A>1)>1){
#   lambda$lambda[trial] <- NA
# }else{
#   lambda$lambda[trial] <- eigen.analysis(temp_A)$lambda1
# }
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, dev="cairo_pdf")
#knitr::write_bib look into
#setwd("C:/Users/Sophi/Documents/GitHub/UNH_Docs/Proposal/Mtx_Model")
library(tinytex)
library(matlib)
library(ggplot2)
library(quadprog) #cite
library(gridtext)
library(popbio) #cite
library(knitr)
library(gridExtra)
library(RColorBrewer)
#library(rPref) #Double check what this is doing. Maybe cite?
library(tidyr)
library(dplyr)
library(ggpubr)
library(bookdown)
library(kableExtra)
library(Rage)
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
# Chunk 2
options(tinytex.verbose = TRUE)
# Chunk 3: FXNoverallsurvive
survivability <- function(increase){
#Calculate survivability for each stage and increase by x%
NewMtx <- (A * increase) + A
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1){
return(NA)
}}
return(NewMtx)
}
#Removes complex numbers
f <- function(x) {
if (all(Im(z <- zapsmall(x))==0)) as.numeric(z) else x
}
real_check <- function(mtx){
if(sum(mtx[,1]) > 1 | sum(mtx[,2]) > 1 | sum(mtx[,3]) > 1 | mtx[4,4] > 1){
return(NA)
}
else{return(mtx)}
}
# Chunk 4: FXNmatrixprint
write_matex <- function(x) {
begin <- "$$\\begin{bmatrix}"
end <- "\\end{bmatrix}$$"
X <-
apply(x, 1, function(x) {
paste(
paste(x, collapse = "&"),
"\\\\"
)
})
writeLines(c(begin, X, end))
}
# Chunk 5: LifeGraph
knitr::include_graphics("LifeGraph.png")
knitr::include_graphics("MtxGeneric.png")
# Chunk 6: QuadProg
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
#z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
# Chunk 7: WriteMtxRounded
A_round <- matrix( , byrow = TRUE, nrow = 4, ncol = 4)
for (i in 1:length(A)){
A_round[i] <- round(A[i], 3)
}
# A_round <- matrix(-1*c(qp_round[1], 0, 0, qp_round[7],
#               qp_round[2], qp_round[3], 0, 0,
#               0, qp_round[4], qp_round[5], 0,
#               0, 0, qp_round[6], qp_round[8]), byrow = TRUE, nrow = 4, ncol = 4)
round_A <- matrix(A_round, 4, 4)
round_A[1] <- paste0("P1 = ", round_A[1])
round_A[13] <- paste0("F4 = ", round_A[13])
round_A[2] <- paste0("G1 = ", round_A[2])
round_A[6] <- paste0("P2 = ", round_A[6])
round_A[7] <- paste0("G2 = ", round_A[7])
round_A[11] <- paste0("P3 = ", round_A[11])
round_A[12] <- paste0("G3 = ", round_A[12])
round_A[16] <- paste0("P4 = ", round_A[16])
knitr::include_graphics("MtxFilled.png")
#write_matex(round_A)
# Chunk 8: LifeHistory
ages <- data.frame(matrix(data = NA, nrow = 4, ncol = 3))
colnames(ages) <- c("Stage", "Duration_New", "SD")
for(i in 1:nrow(A)){
ages$Stage[i] <- i
ages$Duration_New[i] <- 1/(1-A[i,i])
ages$SD[i] <- sqrt(A[i,i]/(1-A[i,i])^2)
}
Life <- read.csv("OcyaneaLifeHistory.csv")
LifeHistory <- Life[,1:2]
LifeHistory$New <- c(NA, NA, ages[,2], NA, NA )
LifeHistory$Var <- c(NA, NA, ages[,3], NA, NA )
colnames(LifeHistory) <- c("Stage", "Existing Estimate", "Estimate from Lefkovitch Matrix", "SD")
#LifeHistory
#Nowcombine LifeHistory[1:2]
knitr::kable(LifeHistory, format = "latex", booktabs = TRUE, caption = "(ref:lifehistory) \\label{LifeHistory}", col.names = c("Stage", "Existing Estimated Duration", "Estimate from Lekfovitch Matrix (Months)", "Standard Deviation of Estimate (Months)")) %>%
column_spec(2:4, width = "4.5cm") %>%
kable_styling(latex_options="scale_down")
#DOES THIS REANALYZE
MtxValidU <- function(NewMtx){
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1 | sum(NewMtx<0)>0){
return(NA)
}}
return(eigen.analysis(NewMtx)$lambda1)
}
theme_qmel <- function(){
theme_classic() + theme(panel.border = element_blank(),panel.grid.major = element_blank(),panel.grid.minor = element_blank(),axis.text=element_text(size=12),
axis.title=element_text(size=14))
}
n_trial = 10000
entry_sd = seq(0.01,0.1,length.out=10)
lambda = data.frame(sd = rep(entry_sd,n_trial/length(entry_sd)),lambda=NA)
for (trial in 1:n_trial){
temp_A <- matrix(rnorm(16,A,sd=lambda$sd[trial]),nrow = 4,ncol=4)
temp_A[A==0] <- 0
lambda$lambda[trial] <- MtxValidU(temp_A)
# # Easton Check
# if (sum(temp_A<0)>0 | sum(temp_A>1)>1){
#   lambda$lambda[trial] <- NA
# }else{
#   lambda$lambda[trial] <- eigen.analysis(temp_A)$lambda1
# }
}
require(dplyr)
lambda_sum <- lambda %>%
group_by(sd) %>%
summarize(mean_lambda = mean(lambda,na.rm=T),
num_na = n() - sum(is.na(lambda)),
lambda_above_1 = sum(lambda>1)/n())
require(ggplot2)
ggplot(data = lambda %>% filter(sd<0.04), aes(x = lambda)) + geom_histogram() + geom_vline(xintercept = 1,linetype=2) + scale_y_continuous(expand = c(0, NA),limits = c(NA, 300)) + facet_wrap(~sd,labeller = label_both) + ylab('Count') + xlab('Dominant eigenvalue')  + theme_qmel()
ggsave(filename='lambda_sims_dist.jpeg',width = 8, height = 5, dpi = 300)
# # Optional code to plot time series instead
#
# plot(2006:2026,100*(mean(lambda$lambda))^(0:20), ylim = c(0,200),type='l',lwd=1,lty=1,xlab='Year',ylab='Relative count')
# for (trial in 1:100){
#   points(2006:2026,100*(lambda$lambda[trial])^(0:20), ylim = c(0,100),type='l',lwd=1,lty=1,col=rgb(211,211,211,maxColorValue=255))
# }
# points(2006:2026,100*(mean(lambda$lambda))^(0:20), ylim = c(0,200),type='l',lwd=3,lty=1)
#
#
# # Test just reproduction - doesn't seem to do anything
# n_trial = 6000
# entry_sd = seq(0,3,length.out = 6)
# lambda = data.frame(sd = rep(entry_sd,n_trial/length(entry_sd)),lambda=NA)
#
# for (trial in 1:n_trial){
#  temp_A <- A
#  temp_A[1,4] <- rnorm(A[1,4],n = 1,lambda$sd[trial])
#  temp_A[A==0] <- 0
#
#  if (sum(temp_A<0)>0){
#    lambda$lambda[trial] <- NA
#  }else{
#    lambda$lambda[trial] <- eigen.analysis(temp_A)$lambda1
#  }
# }
#
# require(dplyr)
# lambda_sum <- lambda %>%
#  group_by(sd) %>%
#  summarize(mean_lambda = mean(lambda))
#
#
# require(ggplot2)
# ggplot(data = lambda, aes(x = lambda)) + geom_histogram() + geom_vline(xintercept = 1,linetype=2) + facet_wrap(~sd,scales = 'free_y') + theme_bw()
