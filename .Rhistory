ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
param_ranges <- function(param, max, min){
#Generate list of ranges
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
new_param <- seq(from=min, to=max, length.out=5)
out_Diff <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default$param <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff[[i]]
out_Diff[[i]] %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
}
#grid.arrange(out_Diff[[1:5]], ncol = 2)
#do.call(grid.arrange, out_Diff)
}
#Change params to max and min for graph 6
#graph all 6 in same panel with caption or something idk
param_ranges(roe, 0, 10)
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
param_ranges <- function(param, max, min){
#Generate list of ranges
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
new_param <- seq(from=min, to=max, length.out=5)
out_Diff <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default$param <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff[[i]]
out_Diff[[i]] %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
}
#grid.arrange(out_Diff[[1:5]], ncol = 2)
do.call(grid.arrange, out_Diff)
}
#Change params to max and min for graph 6
#graph all 6 in same panel with caption or something idk
param_ranges(roe, 0, 10)
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
# params_Bauch <- c(R_1 = 0.06, s_1 = 0.8, h_1 = 0.075, k_1 = 0.17, w_1 = 0.35, c_1 = 0.6, d_1 = 0.5, roe_1 = 1,
#                   R_2 = 0.06, s_2 = 0.8, h_2 = 0.075, k_2 = 0.17, w_2 = 0.35, c_2 = 0.6, d_2 = 0.125, roe_2 = 1)
param_ranges <- function(param, max, min){
#Generate list of ranges
params_Default <- data.frame(R = 0.06, s = 0.8, h = 0.075, k = 0.17, w = 0.35, c = 0.6, d = 0.5, roe = 1)
new_param <- seq(from=min, to=max, length.out=5)
out_Diff <- list()
#Change params to each quartile for graphs 1-5
for(i in 1:length(new_param)){
#ASSIGN OLD PARAMS TO BE NEW SEQUENCE
params_Default$param <- new_param[i]
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff[[i]]
out_Diff[[i]] %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
}
#grid.arrange(out_Diff[[1:5]], ncol = 2)
#do.call(grid.arrange, out_Diff)
grid.arrange(arrangeGrob(out_Diff, main = "Big Title", ncol=2))
}
#Change params to max and min for graph 6
#graph all 6 in same panel with caption or something idk
param_ranges(roe, 0, 10)
out_Diff <- list()
params_Bauch <- c(R_1 = params_Default$R, s_1 = params_Default$s, h_1 = params_Default$h, k_1 = params_Default$k,
w_1 = params_Default$w, c_1 = params_Default$c, d_1 = params_Default$d, roe_1 = params_Default$roe,
R_2 = params_Default$R, s_2 = params_Default$s, h_2 = params_Default$h, k_2 = params_Default$k,
w_2 = params_Default$w, c_2 =params_Default$c, d_2 = params_Default$d, roe_2 = params_Default$roe)
times <- seq(from = 0, to = 100, by = 1)
xstart <- c(P_1 = 0.406, X_1 = .24, P_2 = 0.406, X_2 = .24) #See supplemental for other starting params
ode(
func=Bauch.Coupled,
y=xstart,
times=times,
parms=params_Bauch
) %>%
as.data.frame() -> out_Diff[[1]]
out_Diff[[1]] %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
View(out_Diff)
#grid.arrange(out_Diff[[1:5]], ncol = 2)
#do.call(grid.arrange, out_Diff)
grid.arrange(arrangeGrob(out_Diff, main = "Big Title", ncol=1))
out_Diff[[1]] %>%
gather(variable,value,-time) %>%
ggplot(aes(x=time,y=value,color=variable))+
geom_line(size=2)+
theme_classic()+
labs(x='time (yr)',y='pop')
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
#knitr::write_bib look into
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs/Proposal/Mtx_Model")
library(tinytex)
library(matlib)
library(ggplot2)
library(quadprog) #cite
library(gridtext)
library(popbio) #cite
library(knitr)
library(gridExtra)
library(RColorBrewer)
#library(rPref) #Double check what this is doing. Maybe cite?
library(dplyr)
library(ggpubr)
library(bookdown)
library(kableExtra)
# #Raw data n supplemental. ASK
# in-stage bar graph goes in paper
# in stage management scenarios will definitely be supplemental
# Check out ecological modelling journal
# Write about stable stage cause I don't think you do
# Citations! Also check ahilya table
# APPENDIX!
# MAKE FIG CAPS FOR EVERYTHING AND EDIT FIGS.
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
options(tinytex.verbose = TRUE)
#Easton note: I am also including the larval survivability in this function. Should I not be doing that or should I create two that
survivability <- function(increase){
#Calculate survivability for each staege and increase by x%
NewMtx <- (A * increase) + A
for(i in 1:ncol(NewMtx)-1){
if(sum(NewMtx[,i]) > 1 | NewMtx[4,4] > 1){
return(NA)
}
else{return(NewMtx)}
}
}
#This is stupid but it just forces R to stop writing things as complex numbers
f <- function(x) {
if (all(Im(z <- zapsmall(x))==0)) as.numeric(z) else x
}
real_check <- function(mtx){
if(sum(mtx[,1]) > 1 | sum(mtx[,2]) > 1 | sum(mtx[,3]) > 1 | mtx[4,4] > 1){
return(NA)
}
else{return(mtx)}
}
write_matex <- function(x) {
begin <- "$$\\begin{bmatrix}"
end <- "\\end{bmatrix}$$"
X <-
apply(x, 1, function(x) {
paste(
paste(x, collapse = "&"),
"\\\\"
)
})
writeLines(c(begin, X, end))
}
knitr::include_graphics("LifeGraph.png")
knitr::include_graphics("MtxGeneric.png")
#Make Z
z <- matrix(t(observedStageMatrix[2:11,]), ncol = 1, nrow = 40, byrow = TRUE)
#z
#Make M
m <- matrix(, nrow = nrow(z) , ncol = 8)
for(i in 1:(nrow(observedStageMatrix)-3)){
m[(4 * (i-1) + 1):(4 * i),] <- matrix(c(observedStageMatrix[i,1], 0, 0, 0, 0, 0, observedStageMatrix[i,4], 0,
0, observedStageMatrix[i,1], observedStageMatrix[i,2], 0, 0, 0, 0, 0,
0, 0, 0, observedStageMatrix[i,2], observedStageMatrix[i,3], 0, 0, 0,
0, 0, 0, 0, 0, observedStageMatrix[i,3], 0, observedStageMatrix[i,4]),
nrow = 4, byrow = TRUE)
#m
}
#Make C
c <- matrix(c(diag(8) * (-1),
1, 1, 0, 0, 0, 0, 0, 0,
0, 0, 1, 1, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1), nrow = 12, ncol = 8, byrow = TRUE)
#c
#Make b
b <- matrix(c(rep(0,8), rep(1,4)), nrow = 12, ncol = 1, byrow = TRUE)
#Make P
#p <- matrix(, nrow = 8, ncol = 1, byrow = TRUE) #vector(p1, g1, p2, g2, p3, g3, f4, p4)
#Make mtx G and vector x
g <- t(m) %*% m
f_t <- -(t(-z) %*% m)
qp <- solve.QP(Dmat = g, dvec = f_t, Amat = -t(c), bvec = -t(b))#, factorized = FALSE)
A <- matrix(c(qp$solution[1], 0, 0, qp$solution[7],
qp$solution[2], qp$solution[3], 0, 0,
0, qp$solution[4], qp$solution[5], 0,
0, 0, qp$solution[6], qp$solution[8]), byrow = TRUE, nrow = 4, ncol = 4)
#A
A_round <- matrix( , byrow = TRUE, nrow = 4, ncol = 4)
for (i in 1:length(A)){
A_round[i] <- round(A[i], 3)
}
# A_round <- matrix(-1*c(qp_round[1], 0, 0, qp_round[7],
#               qp_round[2], qp_round[3], 0, 0,
#               0, qp_round[4], qp_round[5], 0,
#               0, 0, qp_round[6], qp_round[8]), byrow = TRUE, nrow = 4, ncol = 4)
round_A <- matrix(A_round, 4, 4)
round_A[1] <- paste0("P1 = ", round_A[1])
round_A[13] <- paste0("F4 = ", round_A[13])
round_A[2] <- paste0("G1 = ", round_A[2])
round_A[6] <- paste0("P2 = ", round_A[6])
round_A[7] <- paste0("G2 = ", round_A[7])
round_A[11] <- paste0("P3 = ", round_A[11])
round_A[12] <- paste0("G3 = ", round_A[12])
round_A[16] <- paste0("P4 = ", round_A[16])
knitr::include_graphics("MtxFilled.png")
#write_matex(round_A)
LifeHistory <- read.csv("OcyaneaLifeHistory.csv")
#LifeHistory
knitr::kable(LifeHistory, format = "latex", booktabs = TRUE, caption = "(ref:lifehistory) \\label{LifeHistory}") %>%
kable_styling(latex_options="scale_down")
pop <- observedStageMatrix[13,]
N <- list()
#72 mo projection
for (i in 1:120){
N[[1]] <- pop
N[[i+1]] <- A %*% N[[i]]
}
modeled_data <- t(as.data.frame(do.call(cbind, N)))
colnames(modeled_data) <- c("Stage_1", "Stage_2", "Stage_3", "Stage_4")
modeled_data <- cbind(modeled_data, month = 0:120)
#write.csv(modeled_data, "testing.csv",row.names = TRUE)
modeled_data <- data.frame(modeled_data)
ggplot(modeled_data) +
geom_line(aes(y = Stage_1, x = month, color = "Stage 1"), size = 1.5) +
geom_line(aes(y = Stage_2, x = month, color= "Stage 2"), size = 1.5) +
geom_line(aes(y = Stage_3, x = month, color = "Stage 3"), size = 1.5) +
geom_line(aes(y = Stage_4, x = month, color= "Stage 4"), size = 1.5) +
scale_color_manual(name = "", values = c("Stage 1" = "#004949",
"Stage 2" = "#009292",
"Stage 3" = "#db6d00",
"Stage 4" = "#920000")) +
#ggtitle("Ten year population projection") + #paste0(i, " month projection")) +
xlab("Year") +
ylab("No. Individuals") +
scale_x_continuous(breaks = seq(0, 120, 12), label = seq(2006, 2016))
#eigenvecors and vals
A_eigen <- eigen(A)
#A_eigen
#Intrinsic Rate of Increast (r): lambda = e^r
r <- log(A_eigen$values[1])
#r
#stable stage dist
A_stable_stage <-as.numeric(A_eigen$vectors[,1]/sum(A_eigen$vectors[,1]))
#A_stable_stage
#reproductive value
A_repro_value <- as.numeric(eigen(t(A))$vectors[,1]/eigen(t(A))$vectors[1,1])
#A_repro_value
#mean reproductive value- is the avg no offspring?
#A_repro_value %*% A_stable_stage
#. Vandermeer (1975, 1978)
lifetable <- data.frame(matrix(ncol = 3, nrow = 4))
#x <- c("Stage", "Stable Stage Distribution (Dominant Eigenvector)", "Reproductive Value (Left Eigenvector)")
#colnames(lifetable) <- x
#colnames(lifetable) <- stringr::str_replace_all(colnames(lifetable), "\\n", "<br>")
lifetable[1:4,1] <- c("1 Immature", "2 Incipient Maturity", "3 Mature", "4 Fully Mature")
lifetable[1:4,2] <- round(A_stable_stage,3)
lifetable[1:4,3] <- round(A_repro_value,3)
#colnames(lifetable) <- stringr::str_replace_all(colnames(lifetable), "\\n", "<br>")
knitr::kable(lifetable, format = "latex", booktabs = TRUE, caption = "(ref:lifetablecap) \\label{lifetable}", col.names = c("Stage", "Stable Stage Distribution (Dominant Eigenvector)", "Reproductive Value (Left Eigenvector)")) %>%
column_spec(2:3, width = "4.5cm") %>%
kable_styling(latex_options="scale_down")
surviveTable <- data.frame(matrix(ncol = 2, nrow = 5))
y <- c("Stage", "Survivability")
colnames(surviveTable) <- y
surviveTable[1:5,1] <- c("1 Immature", "2 Incipient Maturity", "3 Mature", "4 Fully Mature", "Larval")
for(i in 1:3){
surviveTable[i,2] <- sum(A[,i])
}
surviveTable[4,2] <- A[4,4]
surviveTable[5,2] <- A[1,4]/((375000+27000)/2)
knitr::kable(surviveTable, format = "latex", booktabs = TRUE, caption = "(ref:surviveTable) \\label{survivabilityEst}") #%>%
#kable_styling(latex_options="scale_down")
cols <- hcl.colors(1000, palette = "Greens 3", alpha = NULL, rev = TRUE, fixup = TRUE)#, end = .85)
sens <- sensitivity(A)
for(i in 1:length(A)){
if(A[i] == 0){
sens[i] <-  NA
}
}
## IMAGE plot with smaller boxes
image2(sens, mar=c(1,3.5,5,1), box.offset=.1, border="gray70",col = c("white", cols[150:850]), text.cex = 2)
## MATPLOT
# matplot2(sens, log='y', type='b', yaxt='n', ltitle="Fate",
#  ylab=expression(paste("Sensitivity of ",lambda)),
#  main="Sensitivity matrix using matplot2")
# pwrs <- -4:1
#  #axis(2, 10^pwrs, parse(text=paste("10^", pwrs, sep = "")), las=1)
#https://rdrr.io/cran/popbio/man/sensitivity.html
#
cols <- hcl.colors(1000, palette = "Greens 3", alpha = NULL, rev = TRUE, fixup = TRUE)#, end = .85)
elas <- elasticity(A)
for(i in 1:length(A)){
if(A[i] == 0){
elas[i] <-  NA
}
}
image2(elas, mar=c(1,3.5,5,1), border="gray70", col = c("white", cols[150:850]), text.cex = 2 )
# # Summed elasticities for teasel.
# # fertility in last column, stasis P on diagonal, and growth in bottom-left triangle
# c(F=sum(elas[,4]), P=sum(diag(elas)), G=sum(elas[row(elas)>col(elas)]))
#
# elas <- elasticity(tortoise[["med.high"]])
# image2(elas, mar=c(1,3.5,5,1),  log=FALSE)
#  title("Tortoise elasticity matrix", line=2.5)
# # Summed elasticities for tortoise (see example 9.4)
# # fertility in top row, stasis on diagonal, and growth on subdiagonal
# c(F=sum(elas[1,]), P=sum(diag(elas)), G=sum(elas[row(elas)==col(elas)+1]))
#https://rdrr.io/cran/popbio/man/elasticity.html
rates <- c(0, 0, 0, 0, 0)
for(i in 1:(length(rates)-1)){
#First need to do the stage 4 and larval differently
if(i == 4){
incr <- 0.01
testMtx <- A
testMtx[4,4] <- A[4,4] + A[4,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[4,4] <- A[4,4] + A[4,4] * incr
}
rates[4] <- incr
incr <- 0.01
testMtx <- A
testMtx[1,4] <- A[1,4] + A[1,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[1,4] <- A[1,4] + A[1,4] * incr
}
rates[5] <- incr
}
else{
incr <- 0.01
testMtx <- A
testMtx[,i] <- A[,i] + A[,i] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[,i] <- A[,i] + A[,i] * incr
}
rates[i] <- incr
}}
rates_percent <- rates * 100
barplot(rates_percent, xlab = "Stage", ylab = "Percent survival increase",
names.arg=c("1", "2", "3", "4", "Larval"))
#rates
#Calculates new rates based on vectors of % chagne and frequencies of restrictions
percentage <-rates <- c(seq(0, 1, .01)) # c(0.01, 0.05, 0.1, 0.15)
freqs <- c(seq(1, 12)) #c(1, 2, 3, 4, 6, 12)
iteration <- data.frame(matrix(ncol=4,nrow=0, dimnames=list(NULL, c("Frequency", "PercentChange", "mu", "lambda"))))
for(i in 1:length(freqs)){
for(j in 1:length(percentage)){
if (!is.na(real_check(survivability(percentage[j])))){
mu <- ((freqs[i]-1) * log(eigen(A)$values[1]) + log(eigen(survivability(percentage[j]))$values[1]))/ freqs[i]
lambda <- exp(mu)
iteration[nrow(iteration) + 1,] <- c(freqs[i], percentage[j], f(mu), f(lambda))
}
# neweig <- (eigen(survivability(percentage[j]))$values[1] + (freqs[i]-1) * eigen(A)$values[1]) / freqs[i]
}
}
#kable(iteration)
# Sources: https://www.webpages.uidaho.edu/wlf448/stochgro.pdf
# https://esajournals.onlinelibrary.wiley.com/doi/10.2307/1943004
paretospagheto <- iteration %>%
filter(lambda >= 1) %>%
group_by(Frequency) %>%
filter(lambda == min(lambda))
paretospagheto$Frequency <- paretospagheto$Frequency - 0.5
paretospagheto$PercentChange <- paretospagheto$PercentChange - 0.005
#Continuous Colors
ggplot(iteration, aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Frequency of closure (months)", expand=c(0,0), breaks = c(1, 3, 6, 9, 12)) +
scale_y_continuous(name = "Percent change in survival", expand=c(0,0)) +
labs(fill = "Eigenvalue") +
geom_segment(aes(x = 4.5, y = .095, xend = 4.5, yend = 0.105), size = .5, color = "#5A5A5A") +
geom_step(data = paretospagheto , aes(x=Frequency, y=PercentChange), size = .5, color = "#5A5A5A")
View(iteration)
paretospagheto <- iteration %>%
filter(lambda >= 1) %>%
group_by(Frequency) %>%
filter(lambda == min(lambda))
paretospagheto$Frequency <- paretospagheto$Frequency - 0.5
paretospagheto$PercentChange <- paretospagheto$PercentChange - 0.005
#Continuous Colors
ggplot(iteration, aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Frequency of closure (months)", expand=c(0,0), breaks = c(1, 3, 6, 9, 12)) +
scale_y_continuous(name = "Percent change in survival", expand=c(0,0)) +
labs(fill = "Eigenvalue") +
geom_segment(aes(x = 5.5, y = .095, xend = 5.5, yend = 0.105), size = .5, color = "#5A5A5A") +
geom_step(data = paretospagheto , aes(x=Frequency, y=PercentChange), size = .5, color = "#5A5A5A")
#Continuous Colors
ggplot(iteration, aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Frequency of closure (months)", expand=c(0,0), breaks = c(1, 3, 6, 9, 12)) +
scale_y_continuous(name = "Percent change in survival", expand=c(0,0)) +
labs(fill = "Eigenvalue") +
geom_segment(aes(x = 5.5, y = .095, xend = 5.5, yend = 0.105), size = .5, color = "#5A5A5A") +
geom_segment(aes(x = 4.5, y = .095, xend = 4.5, yend = 0.095), size = .5, color = "#5A5A5A") +
geom_step(data = paretospagheto , aes(x=Frequency, y=PercentChange), size = .5, color = "#5A5A5A")
paretospagheto <- iteration %>%
filter(lambda >= 1) %>%
group_by(Frequency) %>%
filter(lambda == min(lambda))
paretospagheto$Frequency <- paretospagheto$Frequency - 0.5
paretospagheto$PercentChange <- paretospagheto$PercentChange - 0.005
#Continuous Colors
ggplot(iteration, aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50") +
scale_x_continuous(name = "Frequency of closure (months)", expand=c(0,0), breaks = c(1, 3, 6, 9, 12)) +
scale_y_continuous(name = "Percent change in survival", expand=c(0,0)) +
labs(fill = "Eigenvalue") +
geom_segment(aes(x = 5.5, y = .095, xend = 5.5, yend = 0.105), size = .5, color = "#5A5A5A") +
geom_segment(aes(x = 4.5, y = .095, xend = 5.5, yend = 0.095), size = .5, color = "#5A5A5A") +
geom_step(data = paretospagheto , aes(x=Frequency, y=PercentChange), size = .5, color = "#5A5A5A")
View(iteration_popDy)
library(dplyr)
setwd("C:/Users/sophi/Documents/GitHub/UNH_Docs")
all_data <- read.csv("ModelClassData.csv")
sp <- all_data %>%
count(Fish.ID)
sp
data <- all_datan %>%
filter(Fish.ID == "french grunt (Haemulon flavolineatum)")
data <- all_data %>%
filter(Fish.ID == "french grunt (Haemulon flavolineatum)")
data
View(data)
