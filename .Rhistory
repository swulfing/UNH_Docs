geom_point()
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data = Measles_Uk, aes(x=Year,y=Total_Deaths)) +
geom_smooth() +
geom_point()
ggplot(data = Measles_Uk,
aes(x=Year,y=Total_Deaths)) +
geom_point()
ggplot(data= Measles_Uk,
aes(x=Year, y=Notifications)) +
geom_point()
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data = Measles_Uk, aes(x=Year,y=Total_Deaths)) +
geom_smooth() +
geom_point()
ggplot(data= Measles_Uk,
aes(x=Year, y=Notifications)) +
geom_point()
ggplot(data = Measles_Uk,
aes(x=Year,y=Total_Deaths/Notifications)) +
geom_point()
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data = Measles_Uk, aes(x=Year,y=Total_Deaths)) +
geom_smooth() +
geom_point() +
xlab("Year") + ylab("Measles Deaths")
ggplot(data= Measles_Uk,
aes(x=Year, y=Notifications)) +
geom_point() +
xlab("Year") + ylab("Measles Cases")
ggplot(data = Measles_Uk,
aes(x=Year,y=Total_Deaths/Notifications)) +
geom_point() +
xlab("Year") + ylab("Measles Deaths per Case")
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data = Measles_Uk, aes(x=Year,y=Total_Deaths)) +
geom_smooth() +
geom_point() +
xlab("Year") + ylab("Measles Deaths")
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data= Measles_Uk,
aes(x=Year, y=Notifications)) +
geom_point() +
xlab("Year") + ylab("Measles Cases")
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data= Measles_Uk,
aes(x=Year, y=Notifications)) +
geom_point() +
xlab("Year") + ylab("Measles Cases")
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data = Measles_Uk,
aes(x=Year,y=Total_Deaths/Notifications)) +
geom_point() +
xlab("Year") + ylab("Measles Deaths per Case")
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] = as.character(new_allele)
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
plot(1:max.time,p,ylim=c(0,1),type='l',las=1,ylab='Freq(A)',xlab='Time')
# sample.population <- function(p,N){
#   next_pop = vector('character',length = N)
#   for (i in 1:N){
#     new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
#     next_pop[i] = as.character(new_allele)
#     if(x='a'){
#       rbinom('a',N,u)
#     }
#   }
#   return(sum(next_pop=='A')/N) # returns the value for p
# }
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] = as.character(new_allele)
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
plot(1:max.time,p,ylim=c(0,1),type='l',las=1,ylab='Freq(A)',xlab='Time')
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] = as.character(new_allele)
if(x='a'){
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] = as.character(new_allele)
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
plot(1:max.time,p,ylim=c(0,1),type='l',las=1,ylab='Freq(A)',xlab='Time')
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <-  as.character(new_allele)
if(x='a'){
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] = as.character(new_allele)
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
plot(1:max.time,p,ylim=c(0,1),type='l',las=1,ylab='Freq(A)',xlab='Time')
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele <-  sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <-  as.character(new_allele)
if(x='a'){
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] = as.character(new_allele)
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
plot(1:max.time,p,ylim=c(0,1),type='l',las=1,ylab='Freq(A)',xlab='Time')
sample.population <- function(p,N){
next_pop <-  vector('character',length = N)
for (i in 1:N){
new_allele <-  sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <-  as.character(new_allele)
if(x == 'a'){
rbinom('a',N,u)
}
}
return(sum(next_pop=='A')/N) # returns the value for p
}
N <- vector("numeric", length = 50)
for (i in 1:50){
N[1] <- .1
N[i+1] <- N[i] + .4*N[i]*(1 - N[i]/1)
}
popdata <- data.frame(1:51, N)
ggplot(popdata, aes(x = X1.51, y = N)) +
geom_point() +
geom_line(color = "black") +
ggtitle("R = 0.4") +
xlab("Year") + ylab("Population")
N <- vector("numeric", length = 50)
for (i in 1:50){
N[1] <- .1
N[i+1] <- N[i] + .6*N[i]*(1 - N[i]/1)
}
popdata <- data.frame(1:51, N)
ggplot(popdata, aes(x = X1.51, y = N)) +
geom_point() +
geom_line(color = "black") +
ggtitle("R = 0.6") +
xlab("Year") + ylab("Population")
for (i in 1:50){
N[1] <- .1
N[i+1] <- N[i] + .8*N[i]*(1 - N[i]/1)
}
popdata <- data.frame(1:51, N)
ggplot(popdata, aes(x = X1.51, y = N)) +
geom_point() +
geom_line(color = "black") +
ggtitle("R = 0.8") +
xlab("Year") + ylab("Population")
for (i in 1:50){
N[1] <- .1
N[i+1] <- N[i] + 1*N[i]*(1 - N[i]/1)
}
popdata <- data.frame(1:51, N)
ggplot(popdata, aes(x = X1.51, y = N)) +
geom_point() +
geom_line(color = "black") +
ggtitle("R = 1") +
xlab("Year") + ylab("Population")
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data = Measles_Uk, aes(x=Year,y=Total_Deaths)) +
geom_smooth() +
geom_point() +
xlab("Year") + ylab("Measles Deaths")
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data= Measles_Uk,
aes(x=Year, y=Notifications)) +
geom_point() +
xlab("Year") + ylab("Measles Cases")
Measles_Uk <- read.csv("Measles_Uk.csv")
ggplot(data = Measles_Uk,
aes(x=Year,y=Total_Deaths/Notifications)) +
geom_point() +
xlab("Year") + ylab("Measles Deaths per Case")
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop <-  vector('character',length = N)
for (i in 1:N){
new_allele <-  sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <-  as.character(new_allele)
if(x == 'a'){
rbinom('a',N,u)
}
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop <-  vector('character',length = N)
for (i in 1:N){
new_allele <-  sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <-  as.character(new_allele)
if(x == 'a'){
rbinom('a',N,u)
}
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop <-  vector('character',length = N)
for (i in 1:N){
new_allele <- sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <- as.character(new_allele)
if(x == 'a'){
rbinom('a',N,u)
}
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop <-  vector('character',length = N)
for (i in 1:N){
new_allele <- sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <- as.character(new_allele)
if(x == 'a'){
rbinom('a',N,u)
}
}
return(sum(next_pop=='A')/N) # returns the value for p
}
p <-  vector(mode = 'numeric',length = max.time)
p[1] <- p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop = vector('character',length = N)
for (i in 1:N){
new_allele = sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] = as.character(new_allele)
if(x='a'){
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop <-  vector('character',length = N)
for (i in 1:N){
new_allele <-  sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <-  as.character(new_allele)
if(x == 'a'){
rbinom('a',N,u)
}
}
return(sum(next_pop == 'A')/N) # returns the value for p
}
p = vector(mode = 'numeric',length = max.time)
p[1]=p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop <-  vector('character',length = N)
for (i in 1:N){
new_allele <-  sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <-  as.character(new_allele)
if(x == 'a'){
rbinom('a',N,u)
}
}
return(sum(next_pop == 'A')/N) # returns the value for p
}
p <- vector(mode = 'numeric',length = max.time)
p[1] <- p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p[t],N){
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop <-  vector('character',length = N)
for (i in 1:N){
new_allele <-  sample(x = c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <-  as.character(new_allele)
if(x == 'a'){
rbinom('a',N,u)
}
}
return(sum(next_pop == 'A')/N) # returns the value for p
}
p <- vector(mode = 'numeric',length = max.time)
p[1] <- p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
# Part 1: Wright-Fisher model with genetic drift and mutation
# Created by Easton R. White
# Last edited: 4-Oct-2021
# Setting up parameter values
N=1000      # population size
p_ini= 0.1   # the initial frequency of the A allele
u = 0.1      # mutation rate from a to A
max.time=100 # time to run simulations
# Custom built function
sample.population <- function(p,N){
next_pop <-  vector('character',length = N)
for (i in 1:N){
new_allele <-  sample(x <-  c('A','a'),size = 1,prob=c(p,1-p))
next_pop[i] <-  as.character(new_allele)
if(x == 'a'){
rbinom('a',N,u)
}
}
return(sum(next_pop == 'A')/N) # returns the value for p
}
p <- vector(mode = 'numeric',length = max.time)
p[1] <- p_ini
for (t in 1:(max.time-1)){
p[t+1] = sample.population(p[t],N)
}
plot(1:max.time,p,ylim=c(0,1),type='l',las=1,ylab='Freq(A)',xlab='Time')
cod_pop <- c(1450, 1420, 1050, 2643, 1060, 1080, 1410, 1150, 740, 175, 43, 10, 12, 15, 16, 16, 28, 30, 32, 23, 12, 19, 27)
years <- c(1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992,
1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
2004, 2005)
fishdata <- data.frame(x = years, y = cod_pop)
ggplot(data = fishdata, aes(x = years, y = cod_pop))+
geom_point() +
geom_smooth() +
xlab("Year") + ylab("Cod Population")
M <- matrix(c(0,0,0,0,127,4,80,
0.6747,0.7370,0,0,0,0,0,
0,0.0486,0.6610,0,0,0,0,
0,0,0.0147,0.6907,0,0,0,
0,0,0,0.0518,0,0,0,
0,0,0,0,0.8091,0,0,
0,0,0,0,0,0.8091,0.8089), nrow = 7, byrow = TRUE)
eigyBois <- eigen(M)
# extract components
(values <- eigyBois$values)
(vectors <- eigyBois$vectors)
