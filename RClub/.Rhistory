testMtx[stage, stage] <- A[stage, stage] + A[stage, stage]*(j/100)
} #input stage 4
else if(stage == 5){
testMtx[1, stage-1] <- A[1, stage-1] + A[1, stage-1]*(j/100)
} #input stage 5
else{
testMtx[,stage] <- A[,stage] + A[,stage]*(j/100)
} #input other stages
if (!is.na(real_check(testMtx))){
mu <- ((i-1) * log(eigen(A)$values[1])) + log(eigen(testMtx)$values[1]) / i
lambda <- exp(mu)
stage_it[nrow(stage_it) + 1,] <- c(f(stage), i, j/100, f(mu), f(lambda))
}
}
}
return(stage_it)
}
ggplot(stagemo(5), aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)
ggplot(stagemo(1), aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)
stagemo <- function(stage){
stage_it <- data.frame(matrix(ncol=5,nrow=0, dimnames=list(NULL, c("Stage", "Frequency", "PercentChange", "mu", "lambda"))))
for(i in 1:12){
for(j in 1:100){#FIND OUT HOW TO CONDENSE THESE IF STATEMENTS
testMtx <- A
if(stage == 4){
testMtx[stage, stage] <- A[stage, stage] + A[stage, stage]*(j/100)
} #input stage 4
else if(stage == 5){
testMtx[1, stage-1] <- A[1, stage-1] + A[1, stage-1]*(j/100)
} #input stage 5
else{
testMtx[,stage] <- A[,stage] + A[,stage]*(j/100)
} #input other stages
if (!is.na(real_check(testMtx))){
mu <- ((i-1) * log(eigen(A)$values[1])) + log(eigen(testMtx)$values[1]) / i
lambda <- exp(mu)
print(lambda)
stage_it[nrow(stage_it) + 1,] <- c(f(stage), i, j/100, f(mu), f(lambda))
}
}
}
return(stage_it)
}
stagemo(1)
ggplot(stagemo(1), aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)
stagemo(1)
#Calculates new rates based on vectors of % chagne and frequencies of restrictions
percentage <-rates <- c(seq(0, 1, .01)) # c(0.01, 0.05, 0.1, 0.15)
freqs <- c(seq(1, 12)) #c(1, 2, 3, 4, 6, 12)
iteration <- data.frame(matrix(ncol=4,nrow=0, dimnames=list(NULL, c("Frequency", "PercentChange", "mu", "lambda"))))
for(i in 1:length(freqs)){
for(j in 1:length(percentage)){
if (!is.na(real_check(survivability(percentage[j])))){
mu <- ((freqs[i]-1) * log(eigen(A)$values[1]) + log(eigen(survivability(percentage[j]))$values[1]))/ freqs[i]
lambda <- exp(mu)
iteration[nrow(iteration) + 1,] <- c(freqs[i], percentage[j], f(mu), f(lambda))
}
# neweig <- (eigen(survivability(percentage[j]))$values[1] + (freqs[i]-1) * eigen(A)$values[1]) / freqs[i]
}
}
#kable(iteration)
# Sources: https://www.webpages.uidaho.edu/wlf448/stochgro.pdf
# https://esajournals.onlinelibrary.wiley.com/doi/10.2307/1943004
#DO I NEED THIS
# moopshoop <- function(rate, freq){
#   mu <- ((freq-1) * log(eigen(A)$values[1]) + log(eigen(survivability(rate))$values[1]))/ freq
#   lambda <- exp(mu)
#   return(f(lambda))
# }
#Paretto fromt LOOK UP ITS WHAT THIS IS TELLING YOU. look in optimization lit
#see:https://www.pnas.org/doi/full/10.1073/pnas.1911440116
#https://www.rdocumentation.org/packages/GPareto/versions/1.1.6/topics/easyGParetoptim
#https://rdrr.io/cran/rPref/man/plot_front.html
# plots Pareto fronts for the hp/mpg values of mtcars
paretospagheto <- iteration %>% filter(lambda >= 1)
show_front <- function(pref) {
plot(paretospagheto$Frequency, paretospagheto$PercentChange)
sky <- psel(paretospagheto, pref)
plot_front(paretospagheto, pref, col = rgb(0, 0, 1))
points(sky$Frequency, sky$PercentChange, lwd = 3)
}
# do this for all four combinations of Pareto compositions
show_front(low(Frequency)  * low(PercentChange))
show_front(low(Frequency)  * high(PercentChange))
show_front(high(Frequency) * low(PercentChange)) #This is the optimal scenario
show_front(high(Frequency) * high(PercentChange))
# compare this to the front of a intersection preference
show_front(high(Frequency) | high(PercentChange))
mycolors <- colorRampPalette(brewer.pal(9, "RdYlBu"))(1177)
iteration_popDy <- iteration %>%
mutate(PopDynamics = case_when(
lambda < 1 ~ "Negative",
lambda >= 1 ~ "Positive"
))
iteration_bins <- iteration %>%
mutate(PopDynamics = case_when(
lambda < 1 ~ "Decrease",
lambda >= 1 & lambda < 1.25 ~ "0-25",
lambda >= 1.25 & lambda < 1.5 ~ "25-50",
lambda >= 1.5 & lambda < 1.75 ~ "50-75",
lambda >= 1.75 & lambda < 2 ~ "75-100"
))
# #Discrete Colors
# ggplot(iteration_popDy, aes(Frequency, PercentChange, fill = PopDynamics)) + geom_tile(width=1) +
#   scale_fill_manual(
#   values = c("red", "green")
# )
#Continuous Colors
ggplot(iteration, aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)
cols <- c(hcl.colors(4, palette = "Greens", alpha = NULL, rev = TRUE, fixup = TRUE), "#000000") #"Green-Yellow"
#Binned Colors
ggplot(iteration_bins, aes(Frequency, PercentChange, fill = PopDynamics)) + geom_tile(width=1) +
scale_fill_manual(
values = c(cols)
)
#https://ggplot2.tidyverse.org/reference/scale_gradient.html
#Okay so I changed what this is showing because it became kind of redundant with the other graph. This now bins it into amounts of pop increase
#GO BACK TO THIS FOR CHEKCIN SURVIVABILITY!!!!!
#col 4 needs to be separate because you need to parse out larval and stage 4 survivability
rates <- c(0, 0, 0, 0, 0)
for(i in 1:(length(rates)-1)){
#First need to do the stage 4 and larval differently
if(i == 4){
incr <- 0.01
testMtx <- A
testMtx[4,4] <- A[4,4] + A[4,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[4,4] <- A[4,4] + A[4,4] * incr
}
rates[4] <- incr
incr <- 0.01
testMtx <- A
testMtx[1,4] <- A[1,4] + A[1,4] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[1,4] <- A[1,4] + A[1,4] * incr
}
rates[5] <- incr
}
else{
incr <- 0.01
testMtx <- A
testMtx[,i] <- A[,i] + A[,i] * incr
while(f(eigen(testMtx)$values[1]) < 1){
incr <- incr + 0.01
testMtx[,i] <- A[,i] + A[,i] * incr
}
rates[i] <- incr
}}
barplot(rates, main = "Minimum % survivability change needed to create population increase",
names.arg=c("Stage 1", "Stage 2", "Stage 3", "Stage 4", "Larval"))
rates
#MAKE SURE EVERYTHING IS CALCED RIGHT
#See if there's literature on selective catch
#see if there's a relationship of life history type and which stage is most important
#maybe try a monthly closure to certain sizes
stagemo(1)
ggplot(stagemo(1), aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, cache = TRUE)
setwd("C:/Users/sophi/Documents/UNH_Docs/Proposal/Mtx_Model")
library(knitr)
library(matlib)
library(ggplot2)
library(quadprog)
library(gridtext)
library(popbio)
library(gridExtra)
library(RColorBrewer)
library(rPref)
library(dplyr)
library(ggpubr)
observedData <- as.matrix(data.frame(read.csv("RaberinaryBenbow2012Calcs.csv")))
observedStageMatrix <- observedData[1:13, 2:5]
for(i in 1:12){
for(j in 1:100){#FIND OUT HOW TO CONDENSE THESE IF STATEMENTS
testMtx <- A
if(stage == 4){
testMtx[stage, stage] <- A[stage, stage] + A[stage, stage]*(j/100)
} #input stage 4
else if(stage == 5){
testMtx[1, stage-1] <- A[1, stage-1] + A[1, stage-1]*(j/100)
} #input stage 5
else{
testMtx[,stage] <- A[,stage] + A[,stage]*(j/100)
} #input other stages
if (!is.na(real_check(testMtx))){
mu <- ((i-1) * log(eigen(A)$values[1])) + log(eigen(testMtx)$values[1]) / i
lambda <- exp(mu)
#print(lambda)
stage_it[nrow(stage_it) + 1,] <- c(stage, i, j/100, f(mu), f(lambda))
}
}
}
#Dowble check survivability > 1 check. I don't think you did that correctly
#do stagemo
#have a survivability check in stagemo
stage = 4
for(i in 1:12){
for(j in 1:100){#FIND OUT HOW TO CONDENSE THESE IF STATEMENTS
testMtx <- A
if(stage == 4){
testMtx[stage, stage] <- A[stage, stage] + A[stage, stage]*(j/100)
} #input stage 4
else if(stage == 5){
testMtx[1, stage-1] <- A[1, stage-1] + A[1, stage-1]*(j/100)
} #input stage 5
else{
testMtx[,stage] <- A[,stage] + A[,stage]*(j/100)
} #input other stages
if (!is.na(real_check(testMtx))){
mu <- ((i-1) * log(eigen(A)$values[1])) + log(eigen(testMtx)$values[1]) / i
lambda <- exp(mu)
#print(lambda)
stage_it[nrow(stage_it) + 1,] <- c(stage, i, j/100, f(mu), f(lambda))
}
}
}
stage_it <- data.frame(matrix(ncol=5,nrow=0, dimnames=list(NULL, c("Stage", "Frequency", "PercentChange", "mu", "lambda"))))
for(i in 1:12){
for(j in 1:100){#FIND OUT HOW TO CONDENSE THESE IF STATEMENTS
testMtx <- A
if(stage == 4){
testMtx[stage, stage] <- A[stage, stage] + A[stage, stage]*(j/100)
} #input stage 4
else if(stage == 5){
testMtx[1, stage-1] <- A[1, stage-1] + A[1, stage-1]*(j/100)
} #input stage 5
else{
testMtx[,stage] <- A[,stage] + A[,stage]*(j/100)
} #input other stages
if (!is.na(real_check(testMtx))){
mu <- ((i-1) * log(eigen(A)$values[1])) + log(eigen(testMtx)$values[1]) / i
lambda <- exp(mu)
#print(lambda)
stage_it[nrow(stage_it) + 1,] <- c(stage, i, j/100, f(mu), f(lambda))
}
}
}
testMtx
stagemo <- function(stage){
stage_it <- data.frame(matrix(ncol=5,nrow=0, dimnames=list(NULL, c("Stage", "Frequency", "PercentChange", "mu", "lambda"))))
for(i in 1:12){
for(j in 1:100){#FIND OUT HOW TO CONDENSE THESE IF STATEMENTS
testMtx <- A
if(stage == 4){
testMtx[stage, stage] <- A[stage, stage] + A[stage, stage]*(j/100)
} #input stage 4
else if(stage == 5){
testMtx[1, stage-1] <- A[1, stage-1] + A[1, stage-1]*(j/100)
} #input stage 5
else{
testMtx[,stage] <- A[,stage] + A[,stage]*(j/100)
} #input other stages
if (!is.na(real_check(testMtx))){
mu <- ((i-1) * log(eigen(A)$values[1])) + log(eigen(testMtx)$values[1]) / i
lambda <- exp(mu)
#print(lambda)
stage_it[nrow(stage_it) + 1,] <- c(stage, i, j/100, f(mu), f(lambda))
}
}
}
return(stage_it)
}
doesthiswork <- list()
for(i in 1:5){
doesthiswork[i] <- ggplot(stagemo(i), aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)}
ggarrange(doesthiswork, ncol = 3, nrow = 2)
doesthiswork
doesthiswork[[1,]]
doesthiswork[1]
doesthiswork[1:5]
ggarrange(doesthiswork[1:5], ncol = 3, nrow = 2)
ggarrange(doesthiswork[1], doesthiswork[2], ncol = 3, nrow = 2)
ggarrange(doesthiswork[1], doesthiswork[2], ncol = 3, nrow = 2)
do.call(ggarrange, c(doesthiswork[1:5], widths = c(2, 1), labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval")))
do.call(ggarrange, c(doesthiswork[1:5],  labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval")))
ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), nrow = 2, ncol = 3)
doesthiswork
ggplot(doesthiswork[1])
ggarrange(plotlist = doesthiswork, widths = 1, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), nrow = 2, ncol = 3)
ggarrange(plotlist = doesthiswork, widths = c(rep(1,5)), labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), nrow = 2, ncol = 3)
ggarrange(plotlist = doesthiswork, widths = c(rep(5,1)), labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), nrow = 2, ncol = 3)
ggarrange(plotlist = doesthiswork[1:5],  labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), nrow = 2, ncol = 3)
class(doesthiswork)
set.seed(21)
x<-rnorm(20)
y<-rnorm(20)
df<-data.frame(x,y)
df
Scatterplot<-ggplot(df,aes(x,y))+geom_point()
Hist_of_x<-ggplot(df,aes(x))+geom_histogram(bins=30)
List<-list(Scatterplot,Hist_of_x)
ggarrange(plotlist=List,widths=c(2,1),labels=c("Scatter","Hist"))
List
ggarrange(plotlist=List,widths=c(2,1),labels=c("Scatter","Hist"), nrow = 2, ncol = 1)
Scatterplot<-ggplot(df,aes(x,y))+geom_point()
Hist_of_x<-ggplot(df,aes(x))+geom_histogram(bins=30)
List<-list(Scatterplot,Hist_of_x)
ggarrange(plotlist=List,widths=c(2,1),labels=c("Scatter","Hist"), nrow = 2, ncol = 1)
ggarrange(plotlist=List,widths=c(2,1),labels=c("Scatter","Hist"), nrow = 2, ncol = 2)
ggarrange(plotlist = doesthiswork,  widths = c(.5), labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), nrow = 2, ncol = 3)
List
doesthiswork <- list()
for(i in 1:5){
doesthiswork <-doesthiswork +
ggplot(stagemo(i), aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)}
doesthiswork
doesthiswork[1]
doesthiswork <- list()
for(i in 1:5){
doesthiswork[i] <-ggplot(stagemo(i), aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)}
print(doesthiswork[1])
doesthiswork <- list()
for(i in 1:5){
p1 <-ggplot(stagemo(i), aes(Frequency, PercentChange, fill = lambda)) + geom_tile(width=1) +
scale_fill_gradient2(
low = "red",
mid = "white",
high = "green",
#limits = c(1, max(iteration$lambda)),
midpoint = 1,
space = "Lab",
na.value = "grey50"
)
doesthiswork[[i]] <- p1
}
doesthiswork[[1]]
ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), nrow = 2, ncol = 3)
ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), nrow = 2, ncol = 3)
ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), nrow = 2, ncol = 2)
ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), font.label = list(size = 2), nrow = 2, ncol = 2)
ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), font.label = list(size = 5), nrow = 2, ncol = 2)
ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), font.label = list(size = 10), nrow = 2, ncol = 2)
ggarrange(plotlist = doesthiswork, labels = c("Stage 1", "Stage 2", "Stage 3", "Stage 4","Larval"), font.label = list(size = 7), nrow = 2, ncol = 2)
install.packages("pacman")
rm(list=ls())
############################################################################################################################
## load packages
############################################################################################################################
##pacman can install packages that aren't already installed.
library(pacman)
p_load(tidyverse,ggpmisc,broom,forcats)
############################################################################################################################
## create dataframes
############################################################################################################################
tank_id <- 1:10
mussel_tag <- c("blue", "green", "yellow", "red", "white",
"purple", "brown", "black", "pink", "beige")
mussel_length <- round(rnorm(10, mean = 15, sd = 2))
mussel_weight <- round(rnorm(10, mean = 4, sd = 1))
temperature_treatment <- c("low", "medium", "high", rep("extreme", 7))
d_1 <- data.frame(tank_id = tank_id[1:8], tag = mussel_tag[1:8],
mussel_length = mussel_length[1:8], mussel_weight = mussel_weight[1:8])
d_2 <- data.frame(tank_id = tank_id[-5], tag = mussel_tag[-5], temperature_treatment = temperature_treatment[-5])
d_1
d_2
p1<-d_1 %>%
ggplot(aes(x=mussel_length,y=mussel_weight))+
geom_point()+
geom_smooth(method="lm",formula=y ~ x+I(x^2),se=T)+
theme_bw()+theme(legend.position="right")+
theme( panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
labs(x="mussel length (mm)", y=expression(mussel~weight~(ug)))
p1
memory.limit
memory.limit()
require(tidyr)
#Long > wide format or vice versa
gapminder <- download.file(“https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv")
#Long > wide format or vice versa
gapminder <- download.file("https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv")
setwd("~/UNH_Docs/RClub")
#Long > wide format or vice versa
gapminder <- download.file("https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv", "gapminder.csv")
require(tidyr)
#Long > wide format or vice versa
gapminder <- download.file("https://raw.githubusercontent.com/swcarpentry/r-novice-gapminder/gh-pages/_episodes_rmd/data/gapminder_wide.csv", "gapminder.csv")
gapminder
#Long > wide format or vice versa
gapminder <- read.csv("gapminder.csv")
gap_long <- gap_wide %>%
pivot_longer(cols = c(starts_with(gdpPercap), starts_with(lifeExp), starts_with(pop)),
names_to = "measurement",
values_to = "amount")
require(tidyr)
#Long > wide format or vice versa
gapminder <- read.csv("gapminder.csv")
gap_long <- gap_wide %>%
pivot_longer(cols = c(starts_with(gdpPercap), starts_with(lifeExp), starts_with(pop)),
names_to = "measurement",
values_to = "amount")
#Long > wide format or vice versa
gap_wide <- read.csv("gapminder.csv", header = T)
gap_long <- gap_wide %>%
pivot_longer(cols = c(starts_with(gdpPercap), starts_with(lifeExp), starts_with(pop)),
names_to = "measurement",
values_to = "amount")
gap_long <- gap_wide %>%
pivot_longer(cols = c(starts_with("gdpPercap"), starts_with("lifeExp"), starts_with("pop")),
names_to = "measurement",
values_to = "amount")
View(gap_long)
View(gap_wide)
gap_long <- gap_long %>%
separate(col = measurement,
into = c("measurement", "year"),
sep = "_")
gap_long <- gap_long %>%
separate(col = measurement,
into = c("measurement", "year"),
sep = "_")
gap_long <- gap_wide %>%
pivot_longer(cols = c(starts_with("gdpPercap"), starts_with("lifeExp"), starts_with("pop")),
names_to = "measurement",
values_to = "amount")
gap_long <- gap_long %>%
separate(col = measurement,
into = c("measurement", "year"),
sep = "_")
gap_wide2 <- gap_long %>%
pivot_wider(names_from = masurement,
values_from = amount
)
gap_wide2 <- gap_long %>%
pivot_wider(names_from = measurement,
values_from = amount
)
View(gap_wide2)
# Going back to wide
gap_wide3 <- gap_long %>%
pivot_wider(names_from = year,
values_from = amount
)
View(gap_wide3)
gap_wide4 <- gap_long %>%
pivot_wider(names_from = c(measurement, year),
values_from = amount
)
View(gap_wide4)
